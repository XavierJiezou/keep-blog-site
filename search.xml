<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Blog v1.0.0 Released</title>
    <url>/2022/01/07/Blog-v1-0-0-Released/</url>
    <content><![CDATA[<ul class="lvl-0">
<li class="lvl-2">
<p>使用 Hexo 框架 Keep 主题构建静态博客</p>
</li>
<li class="lvl-2">
<p>菜单栏增加更新日志</p>
</li>
<li class="lvl-2">
<p>网站源文件增加 <code>CNAME</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog v1.0.1 Released</title>
    <url>/2022/01/10/Blog-v1-0-1-Released/</url>
    <content><![CDATA[<ul class="lvl-0">
<li class="lvl-2">
<p>安装 <code>hexo-tag-mmedia</code>（在 Hexo 中自由地插入音视频）</p>
</li>
<li class="lvl-2">
<p>关闭 <code>pjax</code> 模式</p>
</li>
</ul>
<div class="tips">
<p><strong>提示</strong><br>
虽然 <code>pjax</code> 会带来良好的页面效果和彩色进度条，但插入音视频时会产生冲突，打开页面后必须要再刷新一下才能正常显示音视频。</p>
</div>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog v1.0.2 Released</title>
    <url>/2022/03/06/Blog-v1-0-2-Released/</url>
    <content><![CDATA[<p>修改博客的评论系统为 <code>Twikoo</code>（基于腾讯云开发环境配置）</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog v1.1.0 Released</title>
    <url>/2022/03/19/Blog-v1-1-0-Released/</url>
    <content><![CDATA[<p>更换 Hexo 默认 Markdown 渲染器为 <a class="link"   href="https://github.com/hexojs/hexo-renderer-marked" >hexo-renderer-marked<i class="fas fa-external-link-alt"></i></a>（点击<a href="/2022/03/17/%E3%80%90Hexo%E3%80%91%E9%80%89%E6%8B%A9%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84Markdown%E6%B8%B2%E6%9F%93%E5%99%A8/">这里</a>查看详情）</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>静态网站部署到云服务器的最佳解决方案</title>
    <url>/2022/01/09/Blog-%E5%B0%86%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="引言-Introduction">引言 | Introduction</h2>
<p>如您所见，本网站是用 <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a> 框架的 <a class="link"   href="https://keep.xpoet.cn/" >Keep<i class="fas fa-external-link-alt"></i></a> 主题搭建的一个静态博客。使用 <code>hexo g</code> 生成静态页面后，编辑配置文件中的部署相关参数，再使用 <code>hexo d</code> 命令即可实现网站的部署。</p>
<p>为实现更进一步的自动化，推荐使用 <a class="link"   href="https://github.com/features/actions" >GitHub Action<i class="fas fa-external-link-alt"></i></a> 自动化工作流程。即实现 <code>Git</code> 提交代码后，<code>GitHub Action</code> 能自动渲染 Markdown 文件，并将生成的静态页面自动部署到 GitHub Pages，腾讯云，阿里云等云服务器。</p>
<blockquote>
<p>本教程不仅适用于 Hexo 生成的静态页面，对于其它任何静态网站页面也都适用。</p>
</blockquote>
<h2 id="准备-Preparation">准备 | Preparation</h2>
<p>正式开始之前，你需要掌握 GitHub Action 的基础语法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>name</code>: 工作流的名称。</p>
</li>
<li class="lvl-2">
<p><code>on</code>: 指定次工作流的触发器。<code>push</code> 表示只要有人将更改推送到仓库就会触发工作流运行。（点击<a class="link"   href="https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#onpushpull_requestpaths" >这里<i class="fas fa-external-link-alt"></i></a>了解如何指定特定分支，路径或标签）</p>
</li>
<li class="lvl-2">
<p><code>jobs</code>: 将工作流运行的所有作业组合到一起。</p>
</li>
<li class="lvl-2">
<p><code>build-and-deploy</code>: 定义的作业的名称。</p>
</li>
<li class="lvl-2">
<p><code>runs-on</code>: 将作业配置为在最新版本的 Ubuntu Linux 上运行。这意味着作业将在 GitHub 托管的新虚拟机上执行。有关使用其他运行器的语法示例，请参阅 <a class="link"   href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on" >GitHub 操作的工作流语法<i class="fas fa-external-link-alt"></i></a>。</p>
</li>
<li class="lvl-2">
<p><code>steps</code>: 将作业中运行的所有步骤组合在一起。嵌套在此部分下的每个项都是一个单独的操作或 shell 脚本。</p>
</li>
<li class="lvl-2">
<p><code>uses</code>: 指定需要运行的 <code>action</code>。</p>
</li>
<li class="lvl-2">
<p><code>env</code>: 指定运行 <code>action</code> 时需要用到的环境变量的值。</p>
</li>
</ul>
<h2 id="部署-Deploy">部署 | Deploy</h2>
<h3 id="GitHub-Pages">GitHub Pages</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploying</span> <span class="string">Hexo</span> <span class="string">project</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">theme-keep/hexo-deploy-github-pages-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">PERSONAL_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_GH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">PUBLISH_REPOSITORY:</span> <span class="string">XavierJiezou/xavierjiezou.github.io</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">PUBLISH_DIR:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p><code>PERSONAL_TOKEN</code>: GitHub 个人访问令牌。点击<a class="link"   href="https://github.com/settings/tokens/new" >这里<i class="fas fa-external-link-alt"></i></a>新建，可以命名为 <code>HEXO_DEPLOY_GH</code>，开启 <code>repo</code> 和 <code>workflow</code> 权限即可，有效日期设置为永久。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Blog-%E5%B0%86%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1641801509583.png"
                      alt="image"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>复制上一步获取的 <code>token</code>，打开你的静态网页托管的 GitHub 仓库，在 <code>Settings-Secrets</code> 中新建一个密钥，名称填 <code>HEXO_DEPLOY_GH</code>，值 Value 直接 <kbd>Ctrl</kbd>+<kbd>V</kbd>粘贴 <code>token</code> 的值。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Blog-%E5%B0%86%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/1641801992221.png"
                      alt="image"
                ></p>
<ol start="3">
<li class="lvl-3">
<p><code>PUBLISH_REPOSITORY</code>: GitHub 的公共仓库，用于展示 <a class="link"   href="https://pages.github.com/" >GitHub Pages<i class="fas fa-external-link-alt"></i></a>。这里填 <code>用户名/用户名.github.io</code>，用户名是你 GitHub 的用户名。</p>
</li>
<li class="lvl-3">
<p><code>BRANCH</code>: 分支，填 <code>gh-pages</code> 就行。</p>
</li>
<li class="lvl-3">
<p><code>PUBLISH_DIR</code>: 网页的静态文件存放目录。Hexo 默认是 <code>./public</code></p>
</li>
</ol>
<h3 id="腾讯、阿里等云服务器">腾讯、阿里等云服务器</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploying</span> <span class="string">Hexo</span> <span class="string">project</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># main 分支有 push 行为时就触发这个 action</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">theme-keep/hexo-deploy-github-pages-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">PERSONAL_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_KEEP_DEPLOY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">PUBLISH_REPOSITORY:</span> <span class="string">XavierJiezou/xavierjiezou.github.io</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">PUBLISH_DIR:</span> <span class="string">./public</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Server</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">easingthemes/ssh-deploy@main</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">            <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SERVER_SSH_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">            <span class="attr">ARGS:</span> <span class="string">-rltgoDzvO</span> <span class="string">--delete</span></span><br><span class="line">            <span class="attr">SOURCE:</span> <span class="string">./public/</span></span><br><span class="line">            <span class="attr">REMOTE_HOST:</span> <span class="string">ghgxj.xyz</span></span><br><span class="line">            <span class="attr">REMOTE_USER:</span> <span class="string">root</span></span><br><span class="line">            <span class="attr">TARGET:</span> <span class="string">/www/wwwroot/ghgxj.xyz/</span></span><br><span class="line">            <span class="attr">EXCLUDE:</span> </span><br></pre></td></tr></table></figure>
<ol>
<li class="lvl-3">
<p>部署到腾讯或阿里的 CentOS 服务器上需要用到 <code>easingthemes/ssh-deploy@main</code></p>
</li>
<li class="lvl-3">
<p><code>SSH_PRIVATE_KEY</code>: 是在服务器上生成的 SSH 私钥，可以使用命令 <code>ssh-keygen -m PEM -t rsa -b 4096</code> 生成，并配置到仓库的 <code>Secrets</code> 中。</p>
</li>
<li class="lvl-3">
<p><code>ARGS</code>: 默认即可。</p>
</li>
<li class="lvl-3">
<p><code>SOURCE</code>: 需要上传到服务器上的文件的目录。</p>
</li>
<li class="lvl-3">
<p><code>REMOTE_HOST</code>: 服务器公网 IP 或域名。</p>
</li>
<li class="lvl-3">
<p><code>REMOTE_USER</code>: 服务器 SSH 用户名。</p>
</li>
<li class="lvl-3">
<p><code>TARGET</code>: 文件上传到服务器上保存的目录。</p>
</li>
<li class="lvl-3">
<p><code>EXCLUDE</code>: 可指定部分文件不上传。</p>
</li>
</ol>
<h2 id="参考-Reference">参考 | Reference</h2>
<blockquote>
<p><a class="link"   href="https://github.com/easingthemes/ssh-deploy" >https://github.com/easingthemes/ssh-deploy<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>github</tag>
        <tag>action</tag>
        <tag>deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>DataEase安装教程（Windows）</title>
    <url>/2022/03/24/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>DataEase 是开源的数据可视化分析工具，帮助用户快速分析数据并洞察业务趋势，从而实现业务的改进与优化。DataEase 支持丰富的数据源连接，能够通过拖拉拽方式快速制作图表，并可以方便的与他人分享。</p>
<h2 id="示例">示例</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/ex_1.png"
                      alt="ex_1"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/ex_2.png"
                      alt="ex_2"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/ex_3.png"
                      alt="ex_3"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/ex_4.png"
                      alt="ex_4"
                ></p>
<h2 id="安装-2">安装</h2>
<h3 id="安装-WSL">安装 WSL</h3>
<p><mark>以管理员身份打开 cmd</mark></p>
<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line"></span><br><span class="line">部署映像服务和管理工具</span><br><span class="line">版本: 10.0.22000.1</span><br><span class="line"></span><br><span class="line">映像版本: 10.0.22000.556</span><br><span class="line"></span><br><span class="line">启用一个或多个功能</span><br><span class="line">[==========================100.0%==========================]</span><br><span class="line">操作成功完成。</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line"></span><br><span class="line">部署映像服务和管理工具</span><br><span class="line">版本: 10.0.22000.1</span><br><span class="line"></span><br><span class="line">映像版本: 10.0.22000.556</span><br><span class="line"></span><br><span class="line">启用一个或多个功能</span><br><span class="line">[==========================100.0%==========================]</span><br><span class="line">操作成功完成。</span><br></pre></td></tr></table></figure>
<p><mark>立即重启操作系统</mark></p>
<h3 id="更新-WSL">更新 WSL</h3>
<blockquote>
<p>下载<a class="link"   href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" >适用于 x64 计算机的 WSL2 Linux 内核更新包<i class="fas fa-external-link-alt"></i></a>并安装</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/1.png"
                      alt="1"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/2.png"
                      alt="2"
                ></p>
<p><mark>设置 WSL2 为默认</mark></p>
<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;wsl --set-default-version 2</span><br><span class="line">有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2</span><br><span class="line">操作成功完成。</span><br></pre></td></tr></table></figure>
<h3 id="安装-Ubuntu">安装 Ubuntu</h3>
<p>在 Windows 应用商店里搜索&quot;Ubuntu&quot;并安装</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/3.png"
                      alt="3"
                ></p>
<p>安装完成后打开，设置用户名和密码</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/4.png"
                      alt="4"
                ></p>
<p>检测 Ubuntu WSL 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl.exe -l -v</span><br></pre></td></tr></table></figure>
<p>输出如下结果，可以看到 VERSION 是 2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   NAME      STATE           VERSION</span><br><span class="line">* Ubuntu    Running         2</span><br></pre></td></tr></table></figure>
<p>如果 VERSION 为 1，继续执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl.exe --set-version Ubuntu 2</span><br></pre></td></tr></table></figure>
<h3 id="安装-Docker">安装 Docker</h3>
<blockquote>
<p>下载<a class="link"   href="https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe" >Docker Desktop for Windows<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/5.png"
                      alt="5"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/6.png"
                      alt="6"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/7.png"
                      alt="7"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/8.png"
                      alt="8"
                ></p>
<h3 id="安装-Dataease">安装 Dataease</h3>
<ol>
<li class="lvl-3">
<p>下载离线版安装包</p>
</li>
</ol>
<blockquote>
<p><a class="link"   href="https://community.fit2cloud.com/#/products/dataease/downloads" >https://community.fit2cloud.com/#/products/dataease/downloads<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<ol start="2">
<li class="lvl-3">
<p>启动 Ubuntu，执行以下命令，切换到 root 用户</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su -</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/9.png"
                      alt="9"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>检查 Docker 是否能正常使用</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>
<p>正常显示版本号，则可以继续执行以下操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker version 20.10.13, build a224086</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>执行以下解压命令</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设安装包存放路径为 c:\dataease-v1.5.0-offline.tar.gz</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/c</span><br><span class="line"><span class="comment"># 解压安装包</span></span><br><span class="line">tar zxvf dataease-v1.8.0-offline.tar.gz</span><br></pre></td></tr></table></figure>
<ol start="5">
<li class="lvl-3">
<p>执行安装脚本</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入安装包目录</span></span><br><span class="line"><span class="built_in">cd</span> dataease-v1.5.0-offline</span><br><span class="line"><span class="comment"># 运行安装脚本</span></span><br><span class="line">/bin/bash install.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@DESKTOP-L559T0C:/mnt/c<span class="comment"># cd dataease-v1.8.0-offline/</span></span><br><span class="line">root@DESKTOP-L559T0C:/mnt/c/dataease-v1.8.0-offline<span class="comment"># /bin/bash install.sh</span></span><br><span class="line">======================= 开始安装 =======================</span><br><span class="line">[DATAEASE Log]: 拷贝配置文件模板文件  -&gt; /opt/dataease/conf</span><br><span class="line">[DATAEASE Log]: 根据安装配置参数调整配置文件</span><br><span class="line">time: Wed Mar 23 10:28:06 CST 2022</span><br><span class="line">[DATAEASE Log]: 检测到 Docker 已安装，跳过安装步骤</span><br><span class="line">[DATAEASE Log]: 启动 Docker</span><br><span class="line">docker: unrecognized service</span><br><span class="line">[DATAEASE Log]: 检测到 Docker Compose 已安装，跳过安装步骤</span><br><span class="line">[DATAEASE Log]: 加载镜像</span><br><span class="line">Loaded image: registry.cn-qingdao.aliyuncs.com/dataease/dataease:v1.8.0</span><br><span class="line">Loaded image: registry.cn-qingdao.aliyuncs.com/dataease/doris:0.15-1125</span><br><span class="line">Loaded image: registry.cn-qingdao.aliyuncs.com/dataease/kettle:8.3-v1.7</span><br><span class="line">Loaded image: registry.cn-qingdao.aliyuncs.com/dataease/mysql:5.7.36</span><br><span class="line">[DATAEASE Log]: 配置 dataease Service</span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line">[DATAEASE Log]: 启动服务</span><br><span class="line"></span><br><span class="line">[+] Running 6/6</span><br><span class="line"> ⠿ Network dataease_dataease-network  Created 0.6ss</span><br><span class="line"> ⠿ Container mysql                    Healthy 15.6s</span><br><span class="line"> ⠿ Container doris-be                 Healthy 15.1s</span><br><span class="line"> ⠿ Container kettle                   Started 4.4ss</span><br><span class="line"> ⠿ Container dataease                 Started 15.8ss</span><br><span class="line"> ⠿ Container doris-fe                 Started 14.9ss</span><br><span class="line"></span><br><span class="line">NAME                COMMAND                  SERVICE             STATUS               PORTS</span><br><span class="line">dataease            <span class="string">&quot;/deployments/run-ja…&quot;</span>   dataease            running (starting)   0.0.0.0:80-&gt;8081/tcp</span><br><span class="line">doris-be            <span class="string">&quot;/entrypoint.sh&quot;</span>         doris-be            running (healthy)</span><br><span class="line">doris-fe            <span class="string">&quot;/entrypoint.sh&quot;</span>         doris-fe            running (starting)</span><br><span class="line">kettle              <span class="string">&quot;/opt/kettle/carte.s…&quot;</span>   kettle              running</span><br><span class="line">mysql               <span class="string">&quot;docker-entrypoint.s…&quot;</span>   mysql               running (healthy)    0.0.0.0:3306-&gt;3306/tcp</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动成功!</span><br><span class="line">======================= 安装完成 =======================</span><br><span class="line"></span><br><span class="line">请通过以下方式访问:</span><br><span class="line"> URL: http://<span class="variable">$LOCAL_IP</span>:80</span><br><span class="line"> 用户名: admin</span><br><span class="line"> 初始密码: dataease</span><br></pre></td></tr></table></figure>
<ol start="6">
<li class="lvl-3">
<p>打开浏览器，地址栏输入 <code>localhost:80</code>，输入用户名和密码进入系统</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/10.png"
                      alt="10"
                ></p>
<h2 id="参考-2">参考</h2>
<blockquote>
<p><a class="link"   href="https://dataease.io/docs/installation/offline_installation_windows/" >离线安装(Windows) - DataEase 文档<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-2">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-2">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/%E5%AE%A4%E5%9F%B4%E3%83%9D%E3%82%B3-pixiv.net-84118881.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】/室埴ポコ 【P站ID】84118881</div>
]]></content>
      <categories>
        <category>visualization</category>
      </categories>
      <tags>
        <tag>visualization</tag>
        <tag>dataease</tag>
        <tag>installation</tag>
      </tags>
  </entry>
  <entry>
    <title>Demo Hexo 图片 CDN 访问加速测试</title>
    <url>/2022/01/08/Demo-Hexo-%E5%9B%BE%E7%89%87CDN%E8%AE%BF%E9%97%AE%E5%8A%A0%E9%80%9F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="图片展示">图片展示</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Hexo-%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87CDN%E8%AE%BF%E9%97%AE%E5%8A%A0%E9%80%9F%E6%B5%8B%E8%AF%95/%E4%B8%89%E3%81%A4%E8%91%89%E3%81%A1%E3%82%87%E3%81%93-pixiv.net-93067074.webp"
                      alt="三つ葉ちょこ-pixiv.net-93067074"
                ></p>
<h2 id="图片来源">图片来源</h2>
<blockquote>
<p><a class="link"   href="https://www.pixiv.net/artworks/93067074" >https://www.pixiv.net/artworks/93067074<i class="fas fa-external-link-alt"></i></a>（需要翻墙）</p>
</blockquote>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>hexo</tag>
        <tag>image</tag>
        <tag>cdn</tag>
      </tags>
  </entry>
  <entry>
    <title>Demo Hexo 插入 Aplayer 标签</title>
    <url>/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-Aplayer-%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedia <span class="string">&quot;aplayer&quot;</span> <span class="string">&quot;name:songName&quot;</span> <span class="string">&quot;url:a.mp3&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><div id="mmedia-lmiahNDlYzPizyvD"></div><script> var lmiahNDlYzPizyvD_options = JSON.parse('{\"lrcType\":3,\"audio\":[{\"name\":\"songName\",\"url\":\"a.mp3\"}]}'); lmiahNDlYzPizyvD_options.container = document.getElementById("mmedia-lmiahNDlYzPizyvD"); const ap_lmiahNDlYzPizyvD = new APlayer(lmiahNDlYzPizyvD_options); </script>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedias <span class="string">&quot;aplayer&quot;</span> <span class="string">&quot;autoplay:false&quot;</span> %&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;volume&quot;</span>: <span class="number">0.8</span>,</span><br><span class="line">  <span class="string">&quot;audio&quot;</span>:</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;name1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;artist&quot;</span>: <span class="string">&quot;artist1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;url1.mp3&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;cover1.jpg&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lrc&quot;</span>: <span class="string">&quot;lrc1.lrc&quot;</span>,</span><br><span class="line">      <span class="string">&quot;theme&quot;</span>: <span class="string">&quot;#ebd0c2&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;name2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;artist&quot;</span>: <span class="string">&quot;artist2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;url2.mp3&quot;</span>,</span><br><span class="line">      <span class="string">&quot;cover&quot;</span>: <span class="string">&quot;cover2.jpg&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lrc&quot;</span>: <span class="string">&quot;lrc2.lrc&quot;</span>,</span><br><span class="line">      <span class="string">&quot;theme&quot;</span>: <span class="string">&quot;#46718b&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endmmedias %&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><div id="mmedia-VKKZVkKCoPgRBFZt"></div><script> var VKKZVkKCoPgRBFZt_options = JSON.parse('{\"lrcType\":3,\"autoplay\":false,\"audio\":[{\"name\":\"name1\",\"artist\":\"artist1\",\"url\":\"url1.mp3\",\"cover\":\"cover1.jpg\",\"lrc\":\"lrc1.lrc\",\"theme\":\"#ebd0c2\"},{\"name\":\"name2\",\"artist\":\"artist2\",\"url\":\"url2.mp3\",\"cover\":\"cover2.jpg\",\"lrc\":\"lrc2.lrc\",\"theme\":\"#46718b\"}],\"volume\":0.8}'); VKKZVkKCoPgRBFZt_options.container = document.getElementById("mmedia-VKKZVkKCoPgRBFZt"); const ap_VKKZVkKCoPgRBFZt = new APlayer(VKKZVkKCoPgRBFZt_options); </script>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>hexo</tag>
        <tag>aplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>Demo Hexo 插入 Dplayer 标签</title>
    <url>/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-Dplayer-%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedia <span class="string">&quot;dplayer&quot;</span> <span class="string">&quot;url:https://tx.dogevideo.com/vcloud/17/v/20190424/1556036075_818c4125ec9c8cbc7a7a8a7cc1601512/1037/7d515b22c4958598c0fbd1e6290a5ca5.mp4?vkey=50A9A4&amp;tkey=16417927802cac065227&amp;auth_key=1641807180-RlsPiL7r4AMReAi9-0-0bf4d9194f06a5f6c224e9d168188a4c&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>
<script src="https://cdn.jsdelivr.net/npm/dplayer@1/dist/DPlayer.min.js"></script><div id="mmedia-wDrvzZCqzyOmVZMz"></div><script> var wDrvzZCqzyOmVZMz_options = JSON.parse('{\"video\":{\"url\":\"https://tx.dogevideo.com/vcloud/17/v/20190424/1556036075_818c4125ec9c8cbc7a7a8a7cc1601512/1037/7d515b22c4958598c0fbd1e6290a5ca5.mp4?vkey=50A9A4&tkey=16417927802cac065227&auth_key=1641807180-RlsPiL7r4AMReAi9-0-0bf4d9194f06a5f6c224e9d168188a4c\"}}'); wDrvzZCqzyOmVZMz_options.container = document.getElementById("mmedia-wDrvzZCqzyOmVZMz"); const dp_wDrvzZCqzyOmVZMz = new DPlayer(wDrvzZCqzyOmVZMz_options); </script>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>hexo</tag>
        <tag>dplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>Demo Hexo 插入 ArtPlayer 标签</title>
    <url>/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-ArtPlayer-%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedia <span class="string">&quot;artplayer&quot;</span> <span class="string">&quot;url:https://artplayer.org/assets/sample/video.mp4&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>
<script src="https://cdn.jsdelivr.net/npm/artplayer@3/dist/artplayer.js"></script><div id="mmedia-TuDhxBmdmexXuHqH" style="width:100%;height:650px;max-width:1200px;center"></div><script> var TuDhxBmdmexXuHqH_options = JSON.parse('{\"style\":\"width:100%;height:650px;max-width:1200px;center\",\"url\":\"https://artplayer.org/assets/sample/video.mp4\",\"autoSize\":true,\"autoMini\":true,\"fullscreen\":true,\"fullscreenWeb\":true}'); TuDhxBmdmexXuHqH_options.container = "#mmedia-TuDhxBmdmexXuHqH"; const art_TuDhxBmdmexXuHqH = new Artplayer(TuDhxBmdmexXuHqH_options); </script>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>hexo</tag>
        <tag>artplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>Demo Hexo 插入 H5 原生视频</title>
    <url>/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-H5-%E5%8E%9F%E7%94%9F%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedia <span class="string">&quot;video&quot;</span> <span class="string">&quot;src:https://1251316161.vod2.myqcloud.com/007a649dvodcq1251316161/18cb667f5285890807929994651/xBwYyNhF3CkA.mp4&quot;</span> <span class="string">&quot;width:100%&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>
<video id="mmedia-BrGgexWnSYjNPamr" controls=true vide="video" src="https://1251316161.vod2.myqcloud.com/007a649dvodcq1251316161/18cb667f5285890807929994651/xBwYyNhF3CkA.mp4" width="100%" ></video>]]></content>
  </entry>
  <entry>
    <title>Demo Hexo 插入 H5 原生音频</title>
    <url>/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-H5-%E5%8E%9F%E7%94%9F%E9%9F%B3%E9%A2%91/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedia <span class="string">&quot;audio&quot;</span> <span class="string">&quot;src:https://go-sycdn.kuwo.cn/bab90a6eb39a3393490f86e36b931734/61db193b/resource/n1/0/59/4273740735.mp3&quot;</span> <span class="string">&quot;autoplay:true&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>
<audio id="mmedia-TuydJrSKaBWVymdp" controls=true audi="audio" src="https://go-sycdn.kuwo.cn/bab90a6eb39a3393490f86e36b931734/61db193b/resource/n1/0/59/4273740735.mp3" autoplay=true ></audio>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>hexo</tag>
        <tag>audio</tag>
      </tags>
  </entry>
  <entry>
    <title>Demo Hexo 插入数学公式</title>
    <url>/2022/01/06/Demo-Hexo-%E6%8F%92%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>$$<br>
i\hbar\frac{\partial}{\partial t}\psi=-\frac{\hbar<sup>2}{2m}\nabla</sup>2\psi+V\psi<br>
$$</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>mathJax</tag>
      </tags>
  </entry>
  <entry>
    <title>Demo Hexo 插入 MetingJS 标签</title>
    <url>/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-MetingJS-%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<ul class="lvl-0">
<li class="lvl-2">
<p>QQ音乐单曲（复制单曲播放界面的 <code>URL</code> 并去掉其中的 <code>Detail</code>）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedia <span class="string">&quot;meting&quot;</span> <span class="string">&quot;auto=https://y.qq.com/n/ryqq/song/003UkWuI0E8U0l.html&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script><meting-js metin="meting" auto="https://y.qq.com/n/ryqq/song/003UkWuI0E8U0l.html" ></meting-js>
<ul class="lvl-0">
<li class="lvl-2">
<p>网易云歌单（替换歌单 <code>id</code> 即可）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedia <span class="string">&quot;meting&quot;</span> <span class="string">&quot;server=netease&quot;</span>	<span class="string">&quot;type=playlist&quot;</span>	<span class="string">&quot;id=60198&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script><meting-js metin="meting" server="netease" type="playlist" id=60198 ></meting-js>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>hexo</tag>
        <tag>metingjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Demo Hexo 插入哔哩哔哩动画</title>
    <url>/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<ul class="lvl-0">
<li class="lvl-2">
<p>默认开启弹幕</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedia <span class="string">&quot;bilibili&quot;</span> <span class="string">&quot;bvid:BV1br4y1P7ND&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-WASWTyjlWXxVjyST" src="https://player.bilibili.com/player.html?bvid=BV1br4y1P7ND&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-WASWTyjlWXxVjyST").style.height=document.getElementById("mmedia-WASWTyjlWXxVjyST").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-WASWTyjlWXxVjyST").style.height=document.getElementById("mmedia-WASWTyjlWXxVjyST").scrollWidth*0.76+"px";
    }; </script>
<ul class="lvl-0">
<li class="lvl-2">
<p>设置关闭弹幕</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedia <span class="string">&quot;bilibili&quot;</span> <span class="string">&quot;bvid:BV1br4y1P7ND&quot;</span> <span class="string">&quot;danmaku:false&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-ucngoXGZLHEnyUua" src="https://player.bilibili.com/player.html?bvid=BV1br4y1P7ND&page=1&high_quality=1&danmaku=false" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-ucngoXGZLHEnyUua").style.height=document.getElementById("mmedia-ucngoXGZLHEnyUua").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-ucngoXGZLHEnyUua").style.height=document.getElementById("mmedia-ucngoXGZLHEnyUua").scrollWidth*0.76+"px";
    }; </script>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>hexo</tag>
        <tag>bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title>Demo Hexo 插入西瓜视频</title>
    <url>/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5%E8%A5%BF%E7%93%9C%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% mmedia <span class="string">&quot;xigua&quot;</span> <span class="string">&quot;xid=6925997698269053453&quot;</span> %&#125;</span><br></pre></td></tr></table></figure>
<style>.xgplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="xgplayer"><iframe class="xgplayer" id="mmedia-ZgSxwNkdkpKHplsi" src="https://www.ixigua.com/iframe/6925997698269053453?autoplay=0&startTime=undefined" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-ZgSxwNkdkpKHplsi").style.height=document.getElementById("mmedia-ZgSxwNkdkpKHplsi").scrollWidth*0.7+"px";
    window.onresize = function(){
      document.getElementById("mmedia-ZgSxwNkdkpKHplsi").style.height=document.getElementById("mmedia-ZgSxwNkdkpKHplsi").scrollWidth*0.7+"px";
    }; </script>
]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>hexo</tag>
        <tag>xigua</tag>
      </tags>
  </entry>
  <entry>
    <title>Demo Hexo 文章加密访问测试</title>
    <url>/2022/01/08/Demo-Hexo-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2e757f787437be74e0da0a9ef85e23ad2fe565e541a0f5df7d217fd43a640ed7">10d79030e8222445804370796b90fca1693257b3faef0c27e8a3d9df3a3ea1e759ab7a9aa0c9d77d548a4b544e7b05fe77e11ca78ce50f2de3b93141c1b39059da69d3a0525d597ad8d7e3c79c93a0d849538220b45ea952500a34b650b27b655f2f3fec23b898a3b2d50d6bd74d556dab2466764308d815c8dd1772a8378d9db2aa9102ac6762ebdca77d08d4633baf085d17009797f61b6657befd17d09b776f56ace73e07119ea852cb0573383207c4ebcd0777e2220497d0324aef2d210ba307f338dc218be6a60788867fce0545a294447892c0faf5158b5dfed14edfeb886f77001acd3d64e2444b232f31bbdd38a0c1264c8fda7b427a005b5a1c604ac18ed329b879834921d615c58f13b895ed1be51be373c1e8cc696b933a26258b4a83af698b6f48a9526253c391ada861aa0a547560d7e6dda679f95359b992ca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here (Password is hello).</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>demo</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>hexo</tag>
        <tag>encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>GDAL 安装教程（Python）</title>
    <url>/2022/03/03/GDAL-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Python%EF%BC%89/</url>
    <content><![CDATA[<h2 id="引言-2">引言</h2>
<p>本文介绍 GDAL（Geospatial Data Abstraction Library，空间数据抽象库）的 Python 版本安装教程。</p>
<h2 id="简介-2">简介</h2>
<p>GDAL 是用于栅格和矢量地理空间数据格式的开源转换器。向调用应用程序提供所有受支持格式的单个栅格抽象数据模型和单个矢量抽象数据模型。它还附带了各种有用的命令行实用程序，用于数据转换和处理。</p>
<h2 id="安装-3">安装</h2>
<h3 id="Windows">Windows</h3>
<ol>
<li class="lvl-3">
<p>转到<a class="link"   href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal" >这里<i class="fas fa-external-link-alt"></i></a>下载 <code>whl</code> 格式的安装包</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/GDAL-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Python%EF%BC%89/1646292982782.png"
                      alt="image"
                ></p>
<details>
<summary><mark>如何选取合适的安装包？</mark></summary>
<blockquote>
<p>安装包命名规则，以 <code>GDAL‑3.4.1‑cp310‑cp310‑win_amd64.whl</code> 为例：</p>
<ul class="lvl-1">
<li class="lvl-2"><code>3.4.1</code>：GDAL的版本号，数字越大表示版本越新</li>
<li class="lvl-2"><code>cp310</code>：3.10 版本的 Python 实现</li>
<li class="lvl-2"><code>win_amd64</code>：64 位操作系统，对应 <code>win32</code> 为 32 位操作系统</li>
</ul>
<p>请下载适合你电脑软硬件的 GDAL 安装包，比如我的电脑搭载 64 位操作系统，Python 版本是 <code>3.8</code>，那我就可以下载 <code>GDAL‑3.4.1‑cp38‑cp38‑win_amd64.whl</code>。</p>
</blockquote>
</details>
<ol start="2">
<li class="lvl-3">
<p>下载下来之后使用 <code>pip</code> 指令安装（请确保执行目录下有安装文件）</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install GDAL‑3.4.1‑cp38‑cp38‑win_amd64.whl</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>在 Python 的 命令行交互界面执行以下代码，若正确显示版本号则安装成功</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from osgeo import gdal</span><br><span class="line">&gt;&gt;&gt; gdal.__version__</span><br><span class="line"><span class="string">&#x27;3.4.1&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="Unix">Unix</h3>
<blockquote>
<p>参见：<a class="link"   href="https://gdal.org/api/python.html#unix" >https://gdal.org/api/python.html#unix<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="参考-3">参考</h2>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>官网：<a class="link"   href="https://gdal.org/" >https://gdal.org/<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p>源码：<a class="link"   href="https://github.com/OSGeo/gdal" >https://github.com/OSGeo/gdal<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>gdal</category>
      </categories>
      <tags>
        <tag>installation</tag>
        <tag>gdal</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Git软件安装教程（Windows）</title>
    <url>/2022/03/23/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Git-Logo.png"
                      alt="cover" width="100%"
                ></p>
<h2 id="简介-3">简介</h2>
<p>Git 是一个开源免费的分布式版本控制工具，旨在以高效的速度处理各种规格的项目。Git 易于学习，占用空间小，性能快如闪电。它比 Subversion、CVS、Perforce 和 ClearCase 等 SCM 工具更具优势，具有廉价的本地分支，方便的暂存区和多个工作流等特征。</p>
<h2 id="下载">下载</h2>
<blockquote>
<p>🔗官网下载：<a class="link"   href="https://git-scm.com/download/win" >https://git-scm.com/download/win<i class="fas fa-external-link-alt"></i></a><br>
👍镜像下载：<a class="link"   href="https://npm.taobao.org/mirrors/git-for-windows/" >https://npm.taobao.org/mirrors/git-for-windows/<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="安装-4">安装</h2>
<ol>
<li class="lvl-3">
<p>下载安装程序开始安装<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1.png"
                      alt="1"
                ></p>
</li>
<li class="lvl-3">
<p>这一步是选择安装路径<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/2.png"
                      alt="2"
                ></p>
</li>
<li class="lvl-3">
<p>选择需要安装的组件，默认即可<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/3.png"
                      alt="3"
                ></p>
</li>
<li class="lvl-3">
<p>添加快捷方式到开始菜单<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/4.png"
                      alt="4"
                ></p>
</li>
<li class="lvl-3">
<p>选择 Git 的默认编辑器，笔者常用 Vscode，所以这里就选它了<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/5.png"
                      alt="5"
                ></p>
</li>
<li class="lvl-3">
<p>设置初始化分支的名称，这里设置为 <code>main</code><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/6.png"
                      alt="6"
                ></p>
</li>
<li class="lvl-3">
<p>设置如何将 Git 添加到环境变量，使用推荐的设置即可<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/7.png"
                      alt="7"
                ></p>
</li>
<li class="lvl-3">
<p>选择要使用的 SSH 程序，默认即可<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/8.png"
                      alt="8"
                ></p>
</li>
<li class="lvl-3">
<p>选择 HTTPS 连接使用的后端库，默认即可<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/9.png"
                      alt="9"
                ></p>
</li>
<li class="lvl-4">
<p>配置换行符转换方式，默认即可<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/10.png"
                      alt="10"
                ></p>
</li>
<li class="lvl-4">
<p>选择 Git Bash 要使用的终端仿真程序，默认即可<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/11.png"
                      alt="11"
                ></p>
</li>
<li class="lvl-4">
<p>选择 <code>git pull</code> 的行为，默认即可<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/12.png"
                      alt="12"
                ></p>
</li>
<li class="lvl-4">
<p>配置帮助文档，默认即可<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/13.png"
                      alt="13"
                ></p>
</li>
<li class="lvl-4">
<p>配置额外的选项，默认即可<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/14.png"
                      alt="14"
                ></p>
</li>
<li class="lvl-4">
<p>这里可以选择是否开始一些实验性的功能，对于喜欢尝鲜的用户可以开启<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/15.png"
                      alt="15"
                ></p>
</li>
<li class="lvl-4">
<p>安装完成，启动 Git Bash<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/16.png"
                      alt="16"
                ></p>
</li>
<li class="lvl-4">
<p>Git Bash 启动界面如下<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/17.png"
                      alt="17"
                ></p>
</li>
</ol>
<h2 id="配置">配置</h2>
<p>首次打开需要配置用户名和密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br></pre></td></tr></table></figure>
<p>使用如下命令查看刚配置的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>
<h2 id="参考-4">参考</h2>
<blockquote>
<p>Git-官方网站：<a class="link"   href="https://git-scm.com/" >https://git-scm.com/<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-3">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-3">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E3%81%91%E3%82%93%E3%81%9F%E3%81%86%E3%82%8D%E3%81%99%EF%BC%A03%E6%97%A5%E7%9B%AE%E8%A5%BFG15b-pixiv.net-67579299.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】3日目西G15b 【P站ID】67579299</div>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>installation</tag>
        <tag>git</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Chrome 浏览器安装教程</title>
    <url>/2022/04/03/Google-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/Google-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Google-Chrome-Logo.png"
                      alt="cover"
                ></p>
<h2 id="简介-4">简介</h2>
<p>Google Chrome 是由谷歌公司开发的网络浏览器。</p>
<h2 id="下载-2">下载</h2>
<blockquote>
<p><a class="link"   href="https://google.cn/chrome/" >https://google.cn/chrome/<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="安装-5">安装</h2>
<p>从官网下载 Google Chrome 浏览器安装包，下载完成后双击默认安装即可。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/Google-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1648969727579.png"
                      alt="1"
                ></p>
<h2 id="拓展">拓展</h2>
<p>国内谷歌服务受限，导致无法登录谷歌账号进行同步，这里推荐 <a class="link"   href="https://iguge.xyz/" >iGG 谷歌学术助手<i class="fas fa-external-link-alt"></i></a>。使用该软件可以免费访问谷歌服务，包括但不限于谷歌搜索，谷歌账号同步，谷歌邮箱，谷歌学术等。</p>
<h2 id="关于-4">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-4">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/Google-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E4%BD%90%E5%80%89%E3%81%8A%E3%82%8A%E3%81%93@%E5%8D%98%E8%A1%8C%E6%9C%AC%E7%99%BA%E5%A3%B2%E4%B8%AD-pixiv.net-81241050.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】佐倉おりこ 【P站ID】81241050</div>
]]></content>
      <categories>
        <category>application</category>
      </categories>
      <tags>
        <tag>installation</tag>
        <tag>application</tag>
        <tag>google</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Hello World</title>
    <url>/2022/01/05/Hexo-hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 在静态网站中插入音视频</title>
    <url>/2022/01/10/Hexo-%E5%9C%A8%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E4%B8%AD%E6%8F%92%E5%85%A5%E9%9F%B3%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<h2 id="引言-Introduction-2">引言 | Introduction</h2>
<p>今天给大家推荐一款适用于 <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a> 的音视频插件：<a class="link"   href="https://www.u2sb.com/pages/748f02/" >hexo-tag-mmedia<i class="fas fa-external-link-alt"></i></a>，搭配此插件你可以在网页中自由地插入音视频。</p>
<h2 id="安装-Install">安装 | Install</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a class="link"   href="https://www.npmjs.com/" >npm<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-mmedia@1 --save</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><a class="link"   href="https://pnpm.io/" >pnpm<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm install hexo-tag-mmedia@1 --save</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><a class="link"   href="https://classic.yarnpkg.com/lang/en/" >yarn<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add hexo-tag-mmedia@1 --save</span><br></pre></td></tr></table></figure>
<h2 id="用法-Usage">用法 | Usage</h2>
<h3 id="Audio">Audio</h3>
<p>插入 H5 原生音频。（Demo: <a href="/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-H5-%E5%8E%9F%E7%94%9F%E9%9F%B3%E9%A2%91/">点击查看</a>）</p>
<h3 id="Video">Video</h3>
<p>插入 H5 原生视频。（Demo: <a href="/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-H5-%E5%8E%9F%E7%94%9F%E8%A7%86%E9%A2%91/">点击查看</a>）</p>
<h3 id="Meting">Meting</h3>
<p>支持插入 <a class="link"   href="https://github.com/metowolf/MetingJS" >MetingJS<i class="fas fa-external-link-alt"></i></a> 标签。（Demo: <a href="/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-MetingJS-%E6%A0%87%E7%AD%BE/">点击查看</a>）</p>
<h3 id="Aplayer">Aplayer</h3>
<p>支持插入 <a class="link"   href="https://aplayer.js.org/" >Aplayer<i class="fas fa-external-link-alt"></i></a> 标签。（Demo: <a href="/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-Aplayer-%E6%A0%87%E7%AD%BE/">点击查看</a>）</p>
<h3 id="Dplayer">Dplayer</h3>
<p>支持插入 <a class="link"   href="http://dplayer.js.org/" >Dplayer<i class="fas fa-external-link-alt"></i></a> 标签。（Demo: <a href="/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-Dplayer-%E6%A0%87%E7%AD%BE/">点击查看</a>）</p>
<h3 id="Bilibili">Bilibili</h3>
<p>支持插入 <a class="link"   href="https://www.bilibili.com/" >bilibili<i class="fas fa-external-link-alt"></i></a> 动画。（Demo: <a href="/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%8A%A8%E7%94%BB/">点击查看</a>）</p>
<h3 id="Xigua">Xigua</h3>
<p>支持插入 <a class="link"   href="https://www.ixigua.com/" >西瓜视频<i class="fas fa-external-link-alt"></i></a> 动画。（Demo: <a href="/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5%E8%A5%BF%E7%93%9C%E8%A7%86%E9%A2%91/">点击查看</a>）</p>
<h3 id="ArtPlayer">ArtPlayer</h3>
<p>支持插入 <a class="link"   href="https://artplayer.org/" >ArtPlayer<i class="fas fa-external-link-alt"></i></a> 动画。（Demo: <a href="/2022/01/10/Demo-Hexo-%E6%8F%92%E5%85%A5-ArtPlayer-%E6%A0%87%E7%AD%BE/">点击查看</a>）</p>
<h2 id="参考-Reference-2">参考 | Reference</h2>
<blockquote>
<p><a class="link"   href="https://github.com/u2sb/hexo-tag-mmedia" >https://github.com/u2sb/hexo-tag-mmedia<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>audio</tag>
        <tag>video</tag>
        <tag>plug-in</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 静态博客设置文章加密访问</title>
    <url>/2022/01/08/Hexo-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="引言-Introduction-3">引言 | Introduction</h2>
<p>今天给大家推荐一款适用于 <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a> 的静态博客加密插件：<a class="link"   href="https://www.npmjs.com/package/hexo-blog-encrypt" >hexo-blog-encrypt<i class="fas fa-external-link-alt"></i></a>，搭配此插件你可以写一些私密博客，通过密码验证的方式让人不能随意浏览。</p>
<h2 id="安装-Install-2">安装 | Install</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a class="link"   href="https://www.npmjs.com/" >npm<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure>
<p>或</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a class="link"   href="https://classic.yarnpkg.com/lang/en/" >yarn<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add hexo-blog-encrypt</span><br></pre></td></tr></table></figure>
<h2 id="用法-Usage-2">用法 | Usage</h2>
<h3 id="快速使用-Quick-start">快速使用 | Quick start</h3>
<p>添加 <code>password</code> 字段到文章信息头 <code>Front-matter</code>，该字段用于设置文章访问密码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016-03-30 21:18:02</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">hello</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="/2022/01/08/Demo-Hexo-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95/">演示（密码就是 <code>password</code> 字段对应的值 <code>hello</code>）</a></p>
</blockquote>
<h3 id="高级设置-Advanced-settings">高级设置 | Advanced settings</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016-03-30 21:12:21</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">Here&#x27;s</span> <span class="string">something</span> <span class="string">encrypted,</span> <span class="string">password</span> <span class="string">is</span> <span class="string">required</span> <span class="string">to</span> <span class="string">continue</span> <span class="string">reading.</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">Hey,</span> <span class="string">password</span> <span class="string">is</span> <span class="string">required</span> <span class="string">here.</span></span><br><span class="line"><span class="attr">wrong_pass_message:</span> <span class="string">Oh,</span> <span class="string">this</span> <span class="string">is</span> <span class="string">an</span> <span class="string">invalid</span> <span class="string">password.</span> <span class="string">Check</span> <span class="string">and</span> <span class="string">try</span> <span class="string">again,</span> <span class="string">please.</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>abstract</code>：用于设置加密文章显示的摘要。</p>
</li>
<li class="lvl-2">
<p><code>message</code>：输入密码提示。</p>
</li>
<li class="lvl-2">
<p><code>wrong_pass_message</code>: 输入错误提示。</p>
</li>
</ul>
<blockquote>
<p><a href="/2022/01/08/Demo-Hexo-%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95/">演示（密码就是 <code>password</code> 字段对应的值 <code>hello</code>）</a></p>
</blockquote>
<h2 id="参考-Reference-3">参考 | Reference</h2>
<blockquote>
<p><a class="link"   href="https://github.com/D0n9X1n/hexo-blog-encrypt" >https://github.com/D0n9X1n/hexo-blog-encrypt<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
        <tag>encrypt</tag>
        <tag>plug-in</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js安装教程（Windows）</title>
    <url>/2022/03/24/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/Node.js-Logo.png"
                      alt="cover"
                ></p>
<h2 id="简介-5">简介</h2>
<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。</p>
<h2 id="下载-3">下载</h2>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>🔗官网下载：<a class="link"   href="https://nodejs.org/zh-cn/download/" >https://nodejs.org/zh-cn/download/<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p>👍镜像下载：<a class="link"   href="http://nodejs.cn/download/" >http://nodejs.cn/download/<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
</blockquote>
<h2 id="安装-6">安装</h2>
<div class="tips">
<p><strong>提示</strong><br>
一路默认安装即可，可自定义安装路径</p>
</div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/1.png"
                      alt="1"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/2.png"
                      alt="2"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/3.png"
                      alt="3"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/4.png"
                      alt="4"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/5.png"
                      alt="5"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/6.png"
                      alt="6"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/7.png"
                      alt="7"
                ></p>
<h2 id="检验">检验</h2>
<div class="tips">
<p><strong>提示</strong><br>
打开终端，输入 <code>node</code> 出现类似如下信息，则说明安装成功</p>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node</span><br><span class="line">Welcome to Node.js v14.19.1.</span><br><span class="line">Type <span class="string">&quot;.help&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h2 id="关于-5">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-5">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/TOKKYU-pixiv.net-80503896.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】TOKKYU 【P站ID】80503896</div>
]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>installation</tag>
        <tag>windows</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 11 使用一周后的总体感觉</title>
    <url>/2022/01/18/Windows-11-%E4%BD%BF%E7%94%A8%E4%B8%80%E5%91%A8%E5%90%8E%E7%9A%84%E6%80%BB%E4%BD%93%E6%84%9F%E8%A7%89/</url>
    <content><![CDATA[<h2 id="引言-3">引言</h2>
<p>Windows 11 发布已经有一段时间，笔者也是被它的外观所吸引，前几日刚安装上。大概使用一周了，将使用的总体感觉分享给大家。</p>
<h2 id="安装-7">安装</h2>
<ol>
<li class="lvl-3">
<p>安装之前先看一下您的电脑配置是否满足如下最低系统要求</p>
</li>
</ol>
<p align="center">表1 Windows 11 安装最低系统要求
<table>
<thead>
<tr>
<th style="text-align:left">硬件</th>
<th style="text-align:left">最低要求</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">处理器</td>
<td style="text-align:left">1 GHz 或更快的支持 64 位的处理器（双核或多核）或系统单芯片 (SoC)。</td>
</tr>
<tr>
<td style="text-align:left">内存</td>
<td style="text-align:left">4 GB。</td>
</tr>
<tr>
<td style="text-align:left">存储</td>
<td style="text-align:left">64 GB 或更大的存储设备，注：有关详细信息，请参见以下“关于保持 Windows 11 最新所需存储空间的更多信息”。</td>
</tr>
<tr>
<td style="text-align:left">系统固件</td>
<td style="text-align:left">支持 UEFI 安全启动。请在此处查看关于如何启用电脑以满足这一要求的说明。</td>
</tr>
<tr>
<td style="text-align:left">TPM</td>
<td style="text-align:left">受信任的平台模块 (TPM) 2.0 版本。请在此处查看关于如何启用电脑以满足这一要求的说明。</td>
</tr>
<tr>
<td style="text-align:left">显卡</td>
<td style="text-align:left">支持 DirectX 12 或更高版本，支持 WDDM 2.0 驱动程序。</td>
</tr>
<tr>
<td style="text-align:left">显示器</td>
<td style="text-align:left">对角线长大于 9 英寸的高清 (720p) 显示屏，每个颜色通道为 8 位。</td>
</tr>
</tbody>
</table>
<ol start="2">
<li class="lvl-3">
<p>然后使用电脑健康状况检查应用查看您的个人电脑是否可以运行 Windows 11</p>
</li>
</ol>
<blockquote>
<p>电脑健康状况检查应用：<a class="link"   href="https://aka.ms/GetPCHealthCheckApp" >点击下载<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<ol start="3">
<li class="lvl-3">
<p>最后下载 Windows 11 系统镜像进行安装</p>
</li>
</ol>
<blockquote>
<p>Windows 11 官网下载地址：<a class="link"   href="https://www.microsoft.com/zh-cn/software-download/windows11" >点击跳转<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="使用">使用</h2>
<ol>
<li class="lvl-3">
<p>全新的界面设计和过渡效果，这是使用一周以来最大的感觉。相较于 win10，win11 在界面和交互上做了极大地的优化，提升了用户使用体验。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdnimg.cn/750c57e7c4d34cee9169fb2afa0f2aaf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWGF2aWVyIEppZXpvdQ==,size_20,color_FFFFFF,t_70,g_se,x_16"
                      alt="图1 仿造 MAC 实现了任务栏图标居中"
                ></p>
<p align="center">图1 仿造 MAC 实现了任务栏图标居中</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdnimg.cn/a8ca655cff8543348f8ecfea3e696ed8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWGF2aWVyIEppZXpvdQ==,size_20,color_FFFFFF,t_70,g_se,x_16"
                      alt="图2 文件资源管理器界面也极大地进行了优化"
                ></p>
<p align="center">图2 文件资源管理器界面也极大地进行了优化</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdnimg.cn/e4d89323e3f6446b9117b05ab8167eba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWGF2aWVyIEppZXpvdQ==,size_20,color_FFFFFF,t_70,g_se,x_16"
                      alt="图3 设置界面美化"
                ></p>
<p align="center">图3 设置界面美化</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdnimg.cn/2955f9e19f804f21abdc4c8f01baffea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWGF2aWVyIEppZXpvdQ==,size_20,color_FFFFFF,t_70,g_se,x_16"
                      alt="图4 内置应用界面美化及功能增强"
                ></p>
<p align="center">图4 内置应用界面美化及功能增强</p>
<ol start="2">
<li class="lvl-3">
<p>多种分屏模式可以自由选择</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdnimg.cn/8231b4115cfa40afaee3c0a87316af4c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWGF2aWVyIEppZXpvdQ==,size_20,color_FFFFFF,t_70,g_se,x_16"
                      alt="图5 支持多种分屏模式"
                ></p>
<p align="center">图5 支持多种分屏模式</p>
<ol start="3">
<li class="lvl-3">
<p>当然还有其他的一些升级，例如全新的开始菜单，应用商店，游戏体验及安全升级等等。</p>
</li>
</ol>
<h2 id="结论">结论</h2>
<p>总的来说，给我最大的感受就是 UI 界面设计的升级了，优化了界面过渡和交互效果，用起来很舒服，还是比较推荐升级的。其它功能和 Windows 10 差不多，你可以简单理解为给 win10 换了一件美丽的衣服。</p>
<h2 id="拓展-2">拓展</h2>
<p>Windows 11 的右键菜单也改了，没有了很多功能的快捷方式，用起来很不舒服，可以通过如下方式切换回经典菜单：</p>
<ol>
<li class="lvl-3">
<p><kbd>Windows</kbd>+<kbd>X</kbd>打开高级选项，点击 <strong>Windows 终端（管理员）</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdnimg.cn/e1475e15756945c7b724a46266644efa.png"
                      alt="图6 Windows 终端（管理员）"
                ></p>
<p align="center">图6 Windows 终端（管理员）</p>
<ol start="2">
<li class="lvl-3">
<p>键入以下命令，并按下<kbd>Enter</kbd>执行</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reg add <span class="string">&quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot;</span> /f /ve</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>切换回桌面，点击鼠标右键发现已经切换回经典菜单了</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdnimg.cn/bf4624cf9e0547f39555735e6d1b7e8c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWGF2aWVyIEppZXpvdQ==,size_20,color_FFFFFF,t_70,g_se,x_16"
                      alt="图7 切换回经典右键菜单"
                ></p>
<p align="center">图7 切换回经典右键菜单</p>
<h2 id="参考-5">参考</h2>
<blockquote>
<p><a class="link"   href="https://gitee.com/albertwang2020/win11#%E5%88%87%E6%8D%A2%E5%9B%9E%E7%BB%8F%E5%85%B8%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95" >让 Win11 任务栏、开始菜单、右键菜单恢复 Win10 习惯<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>win11</tag>
      </tags>
  </entry>
  <entry>
    <title>难道我买了一个假路由器？解决光猫引出的路由器网速很慢的问题</title>
    <url>/2022/01/09/Network-%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="引言-Introduction-4">引言 | Introduction</h2>
<p>家里办理了 100 兆的移动宽带业务，师傅也上门安装了一个移动智能光猫。光猫也带了一个无线路由，即可以通过 WIFI 直接连接网络。但是，性能很差，于是在网上花 169 大洋买了一个小米的 Redmi AC2100 的路由器。</p>
<p>一般的路由器也就 100 元以内，169 算是比较好的路由器了，但是发现一个问题：直接连光猫的 WIFI 速度很快，基本能达到百兆，但是连小米路由器 WIFI 的网速只有 10 兆？！</p>
<table>
<thead>
<tr>
<th>光猫路由 WIFI 测速</th>
<th>小米路由 WIFI 测速</th>
</tr>
</thead>
<tbody>
<tr>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641720749759.png"
                      alt="image"
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641720749760.png"
                      alt="image"
                ></td>
</tr>
</tbody>
</table>
<p>该问题出现的根本原因是光猫和小米路由器的网络配置不对，接下来将正确的配置方法分享给大家。</p>
<h2 id="教程-Tutorial">教程 | Tutorial</h2>
<h3 id="申请公网-IP">申请公网 IP</h3>
<p>这个有点难度，这里就不再介绍了。</p>
<h3 id="光猫改桥接">光猫改桥接</h3>
<h4 id="桥接模式">桥接模式</h4>
<p>使用管理员账号将光猫的工作模式改为桥接。超级管理员账号和密码可以在网上直接搜，有很多网友分享。比如我这里是中国移动：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>超级管理员账号：<code>CMCCAdmin</code></p>
</li>
<li class="lvl-2">
<p>超级管理员密码：<code>aDm8H%MdA</code></p>
</li>
</ul>
<ol>
<li class="lvl-3">
<p>使用超级管理员账号登录光猫的网关后台管理系统（我这里移动的是：<code>192.168.1.1</code>）</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641736125633.png"
                      alt="image"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>将网络由路由（Route）模式改为桥接（Bridge）模式，并关闭 <code>DHCP</code> 服务器</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641736345017.png"
                      alt="image"
                ></p>
<h4 id="拨号上网">拨号上网</h4>
<p>接下来设置小米路由器的拨号上网。</p>
<ol>
<li class="lvl-3">
<p>打开 <code>cmd</code> 执行命令 <code>ipconfig -all</code>，查看小米路由器的默认网关 IP 地址</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641720749761.png"
                      alt="image"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>浏览器地址栏输入上一步获取的 IP 地址 <code>192.168.31.1</code>（小米路由器也可直接输入 <code>miwifi.com</code>）</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641732528878.png"
                      alt="image"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>输入密码进入后，点击<strong>常用设置-上网设置</strong>，上网方式选择 PPPoE（即拨号上网），账号一般为手机号，如果是移动宽带的话，密码可能是 6 个 8，设置成功后就会自动拨号进行上网。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641738745058.png"
                      alt="image"
                ></p>
<blockquote>
<p>提示：如果不知道宽带拨号上网的密码，可以百度搜一下，或者直接打运营商的客服电话进行咨询。这里再分享一个可以直接查看拨号上网账号和密码的小技巧。在修改光猫的工作模式为桥接之前，按 <code>F12</code> 调出开发者工具，定位到密码那一栏，修改网页标签的文本框属性 <code>password</code> 为 <code>text</code>，就能看到拨号上网的密码了(#<sup>.</sup>#)。然后这里其实也能看到拨号上网的账号，手机号后面还加了一个 <code>@jtkd</code>，但我家里的宽带拨号上网只用了手机号，不需要加后面这个东西。<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641739734299.png"
                      alt="image"
                ></p>
</blockquote>
<h3 id="路由器改交换机模式">路由器改交换机模式</h3>
<ol>
<li class="lvl-3">
<p>打开 <code>cmd</code> 执行命令 <code>ipconfig -all</code>，查看小米路由器的默认网关 IP 地址</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641720749761.png"
                      alt="image"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>浏览器地址栏输入上一步获取的 IP 地址 <code>192.168.31.1</code>（小米路由器也可直接输入 <code>miwifi.com</code>）</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641732528878.png"
                      alt="image"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>输入密码进入后，点击<strong>常用设置-上网设置-工作模式切换</strong>，切换到<strong>有线中继工作模式</strong>，点击下一步</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641732819127.png"
                      alt="image"
                ></p>
<ol start="4">
<li class="lvl-3">
<p>点击<strong>确认</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641732889824.png"
                      alt="image"
                ></p>
<ol start="5">
<li class="lvl-3">
<p>点击<strong>下一步</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641732908509.png"
                      alt="image"
                ></p>
<ol start="6">
<li class="lvl-3">
<p>切换成功，电脑桌面新建一个记事本文件记住路由器后台管理 IP <code>192.168.1.2</code></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%A7%A3%E5%86%B3%E5%85%89%E7%8C%AB%E5%BC%95%E5%87%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BD%91%E9%80%9F%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1641732967778.png"
                      alt="image"
                ></p>
<blockquote>
<p>提示：若通过 IP 地址无法进入小米路由器后台管理系统，可用别针长按黑色的按钮 10 秒进行重置。</p>
</blockquote>
<h2 id="参考-Reference-4">参考 | Reference</h2>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-kRnlmJvJqSqACpLO" src="https://player.bilibili.com/player.html?bvid=BV1DQ4y1B7ow&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-kRnlmJvJqSqACpLO").style.height=document.getElementById("mmedia-kRnlmJvJqSqACpLO").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-kRnlmJvJqSqACpLO").style.height=document.getElementById("mmedia-kRnlmJvJqSqACpLO").scrollWidth*0.76+"px";
    }; </script>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-GmRGSfYFJvoHGopn" src="https://player.bilibili.com/player.html?bvid=BV1Bt4y1v7Lk&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-GmRGSfYFJvoHGopn").style.height=document.getElementById("mmedia-GmRGSfYFJvoHGopn").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-GmRGSfYFJvoHGopn").style.height=document.getElementById("mmedia-GmRGSfYFJvoHGopn").scrollWidth*0.76+"px";
    }; </script>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-DSFITtlcmboqNQbW" src="https://player.bilibili.com/player.html?bvid=BV1Eh411Q7CY&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-DSFITtlcmboqNQbW").style.height=document.getElementById("mmedia-DSFITtlcmboqNQbW").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-DSFITtlcmboqNQbW").style.height=document.getElementById("mmedia-DSFITtlcmboqNQbW").scrollWidth*0.76+"px";
    }; </script>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>route</tag>
        <tag>wifi</tag>
      </tags>
  </entry>
  <entry>
    <title>【Github Actions】自动从GitHub同步代码到Gitee</title>
    <url>/2022/03/17/%E3%80%90Github-Actions%E3%80%91%E8%87%AA%E5%8A%A8%E4%BB%8EGitHub%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%88%B0Gitee/</url>
    <content><![CDATA[<h2 id="引言-4">引言</h2>
<p><a href="/2022/03/16/%E3%80%90Git%E3%80%91%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81%E5%88%B0GitHub%E5%92%8C%E7%A0%81%E4%BA%91Gitee/">上期教程</a>讲了如何通过 Git 配置来实现 GitHub 和 Gitee 的同步更新。本期教程将介绍更高效的代码同步方法：使用 GitHub Actions 将代码自动从 GitHub 同步到 Gitee。</p>
<h2 id="用法">用法</h2>
<blockquote></blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Mirror</span> <span class="string">the</span> <span class="string">Github</span> <span class="string">organization</span> <span class="string">repos</span> <span class="string">to</span> <span class="string">Gitee.</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">Yikun/hub-mirror-action@master</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">src:</span> <span class="string">github/XavierJiezou</span></span><br><span class="line">      <span class="attr">dst:</span> <span class="string">gitee/ghgxj</span></span><br><span class="line">      <span class="attr">dst_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">dst_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">static_list:</span> <span class="string">&quot;picx-image-hosting&quot;</span> <span class="comment"># 仅同步名为 picx-image-hosting 的仓库</span></span><br><span class="line">      <span class="attr">force_update:</span> <span class="literal">true</span> <span class="comment"># 启用 git push -f 强制覆盖目的端仓库</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>src</code>：需要被同步的源端账户名，如 github/kunpengcompute，表示 Github 的 kunpengcompute 账户。</p>
</li>
<li class="lvl-2">
<p><code>dst</code>：需要同步到的目的端账户名，如 gitee/kunpengcompute，表示 Gitee 的 kunpengcompute 账户。</p>
</li>
<li class="lvl-2">
<p><code>dst_key</code>：用于在目的端上传代码的私钥(默认可以从~/.ssh/id_rsa 获取），可参考<a class="link"   href="https://gitee.com/help/articles/4181" >生成/添加 SSH 公钥<i class="fas fa-external-link-alt"></i></a>或<a class="link"   href="https://docs.github.com/articles/generating-an-ssh-key/" >generating SSH keys<i class="fas fa-external-link-alt"></i></a>生成，并确认对- 应公钥已经被正确配置在目的端。对应公钥，Github 可以在<a class="link"   href="https://github.com/settings/keys" >这里<i class="fas fa-external-link-alt"></i></a>配置，Gitee 可以<a class="link"   href="https://gitee.com/profile/sshkeys" >这里<i class="fas fa-external-link-alt"></i></a>配置。</p>
</li>
<li class="lvl-2">
<p><code>dst_token</code>：创建仓库的 API tokens， 用于自动创建不存在的仓库，Github 可以在<a class="link"   href="https://github.com/settings/tokens" >这里<i class="fas fa-external-link-alt"></i></a>找到，Gitee 可以在<a class="link"   href="https://gitee.com/profile/personal_access_tokens" >这里<i class="fas fa-external-link-alt"></i></a>找到。</p>
</li>
</ul>
<h2 id="教程-2">教程</h2>
<p>具体用法教程等下次要用的时候再更新吧。</p>
<h2 id="参考-6">参考</h2>
<blockquote>
<p><a class="link"   href="https://github.com/Yikun/hub-mirror-action/" >https://github.com/Yikun/hub-mirror-action/<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-6">关于</h2>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
<h2 id="插画-6">插画</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【Squoosh】谷歌开源在线图片压缩工具/Mauve-pixiv.net-82756421.jpg"
                      width="100%"
                >
<div align="center" style="color: #ccc">【画师】Mauve 【P站ID】82756421</div>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>actions</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】.gitkeep简介及用法</title>
    <url>/2022/03/19/%E3%80%90Git%E3%80%91-gitkeep%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="简介-6">简介</h2>
<p>Git 默认是不跟踪空文件夹和空目录的，所以要想推送空文件夹或空目录，就必须在里面放一个文件，即使是空文件也行，但必须要有。于是，就有了一个不成文的规定，通常我们放一个名为 <code>.gitkeep</code> 的文件到空文件夹或空目录，以此实现其 Git 跟踪。该规定并没有在官方文档中定义，只是一个公认的约定罢了。</p>
<h2 id="用法-2">用法</h2>
<p>使用 <code>.gitkeep</code> 提交并推送空的 Git 文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir empty-directory</span><br><span class="line"><span class="built_in">cd</span> empty-directory</span><br><span class="line">touch .gitkeep</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Commit empty folder in Git with gitkeep&quot;</span></span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure>
<h2 id="参考-7">参考</h2>
<blockquote>
<p><a class="link"   href="https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/gitkeep-push-empty-folders-git-commit" >使用 .gitkeep 提交并推送空的 Git 文件夹或目录<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-7">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-7">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Git%E3%80%91-gitkeep%E7%AE%80%E4%BB%8B%E5%8F%8A%E7%94%A8%E6%B3%95/%E3%81%97%E3%82%85%E3%81%AF%EF%BC%A03%E6%97%A5%E7%9B%AE%E8%A5%BFR-22a-pixiv.net-75682664.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】しゅは＠3日目西R-22a 【P站ID】75682664</div>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitkeep</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】同时推送代码到GitHub和码云Gitee</title>
    <url>/2022/03/16/%E3%80%90Git%E3%80%91%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81%E5%88%B0GitHub%E5%92%8C%E7%A0%81%E4%BA%91Gitee/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Git%E3%80%91%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81%E5%88%B0GitHub%E5%92%8C%E7%A0%81%E4%BA%91Gitee/1647492362464.png"
                      alt="封面"
                ></p>
<h2 id="引言-5">引言</h2>
<p>笔者的个人博客网站之前是在 GitHub 里面新建了一个仓库充当图床，虽然搭配了 jsdelivr CDN 加速，但仍然很慢，于是又选了国内的码云 Gitee 充当图床。所以目前就有一个需求，需要同时将代码或文件更新提交到 GitHub 和 Gitee，本文是该需求的解决方案，相关技术是 Git 命令及其使用。</p>
<h2 id="教程-3">教程</h2>
<h3 id="查看当前-GitHub-远程仓库信息">查看当前 GitHub 远程仓库信息</h3>
<p>打开终端，切换到本地仓库根目录，查看远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>
<p>不出意外的外，会看到输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">origin</span><br></pre></td></tr></table></figure>
<p><code>origin</code> 是远程仓库的别名。</p>
<p>通过如下命令查看 <code>origin</code> 指向的远程仓库地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">origin  https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting.git (fetch)</span><br><span class="line">origin  https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting.git (push)</span><br></pre></td></tr></table></figure>
<p>该结果表明 <code>origin</code> 指向的是 GitHub 的某个远程仓库。</p>
<h3 id="修改当前-GitHub-远程仓库别名">修改当前 GitHub 远程仓库别名</h3>
<p>当前远程仓库地址来自 GitHub，为方便辨识，别名就设置为 GitHub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rename origin github</span><br></pre></td></tr></table></figure>
<p>设置完成后使用命令 <code>git remote -v</code> 查看，输出结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">github  https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting.git (fetch)</span><br><span class="line">github  https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting.git (push)</span><br></pre></td></tr></table></figure>
<p>说明别名修改成功！</p>
<h3 id="添加-Gitee-远程仓库地址">添加 Gitee 远程仓库地址</h3>
<p>添加 Gitee 的远程仓库地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add gitee https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting.git</span><br></pre></td></tr></table></figure>
<p>设置完成后使用命令 <code>git remote -v</code> 查看，输出结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitee   https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting.git (fetch)</span><br><span class="line">gitee   https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting.git (push)</span><br><span class="line">github  https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting.git (fetch)</span><br><span class="line">github  https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting.git (push)</span><br></pre></td></tr></table></figure>
<p>说明 Gitee 远程仓库地址添加成功。</p>
<h3 id="多个远程仓库的推送-拉取">多个远程仓库的推送/拉取</h3>
<p>多个远程仓库的推送和拉取命令如下：<code>git push &lt;remote&gt; &lt;branch&gt;</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>&lt;remote&gt;</code>：远程仓库的别名</p>
</li>
<li class="lvl-2">
<p><code>&lt;branch&gt;</code>：远程仓库的分支</p>
</li>
</ul>
<p>例如，推送到 GitHub main 分支就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push github main</span><br></pre></td></tr></table></figure>
<p>例如，推送到 Gitee main 分支就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push gitee main</span><br></pre></td></tr></table></figure>
<p>拉取的话就是将上述 <code>push</code> 改为 <code>pull</code>。</p>
<p>当然如果不想每次操作都带着分支，可以将本地分支和远程分支通过如下命令进行关联：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=&lt;remote&gt;/&lt;remote_branch&gt; &lt;local_branch&gt;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>&lt;remote&gt;</code>：远程仓库的别名</p>
</li>
<li class="lvl-2">
<p><code>&lt;remote_branch&gt;</code>：远程仓库的分支</p>
</li>
<li class="lvl-2">
<p><code>&lt;local_branch&gt;</code>：本地仓库的分支</p>
</li>
</ul>
<p>例如，我这里将远程 GitHub 仓库的 main 分支和本地仓库 main 分支进行关联：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=github/main main</span><br></pre></td></tr></table></figure>
<p>关联之后，我可以直接通过如下命令来推送/拉取代码或文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">推送：git push github</span><br><span class="line">拉取：git pull github</span><br></pre></td></tr></table></figure>
<p>为了提高提交效率，可以写一个 shell 脚本，实现一次性提交代码或文件到 GitHub 和 Gitee：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> Push to GitHub</span><br><span class="line">git push github main</span><br><span class="line"><span class="built_in">echo</span> Push to Gitee</span><br><span class="line">git push gitee main</span><br></pre></td></tr></table></figure>
<p>然后执行脚本 <code>sh push.sh</code> 实现提交功能。</p>
<h2 id="提示">提示</h2>
<p>当然，还有更好的，更加自动化的做法，就是采用 GitHub Actions。首先需要配置 GitHub Actions，提交代码或文件到 GitHub 仓库后，Actions 就会自动将您的代码或文件同步推送到 Gitee 仓库中，具体的配置教程会在下期讲解。</p>
<h2 id="参考-8">参考</h2>
<blockquote>
<p><a class="link"   href="https://blog.csdn.net/gozhuyinglong/article/details/113861993" >https://blog.csdn.net/gozhuyinglong/article/details/113861993<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-8">关于</h2>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
<h2 id="插画-8">插画</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【Git】同时推送代码到GitHub和码云Gitee/ふぇありぃあい＠FANBOX-pixiv.net-78127030.jpg"
                      width="100%"
                >
<div align="center" style="color: #ccc">【画师】Mauve 【P站ID】82756421</div>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】选择更高级的Markdown渲染器</title>
    <url>/2022/03/17/%E3%80%90Hexo%E3%80%91%E9%80%89%E6%8B%A9%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84Markdown%E6%B8%B2%E6%9F%93%E5%99%A8/</url>
    <content><![CDATA[<h2 id="引言-6">引言</h2>
<p><a class="link" href="https://hexo.io/zh-cn/">Hexo<i class="fas fa-external-link-alt"></i></a> 默认搭配的 Markdown 渲染器是 <a class="link" href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked<i class="fas fa-external-link-alt"></i></a>，但其支持的渲染格式有限，不利于自由写作。因此，今天教大家如何更换为功能更加强大，渲染速度更快的 <a class="link" href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it<i class="fas fa-external-link-alt"></i></a> 渲染器，并且还会详细介绍常用插件的配置，实现更优雅的 Markdown 写作。</p>
<h2 id="安装-8">安装</h2>
<p>卸载 <code>hexo-renderer-marked</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>
<p>安装 <code>hexo-renderer-markdown-it</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure>
<h2 id="配置-2">配置</h2>
<p>将如下文本复制粘贴到 Hexo 的配置文件 <code>_config.yml</code> 的尾部</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">preset:</span> <span class="string">"default"</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">langPrefix:</span> <span class="string">"language-"</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">"“”‘’"</span></span><br><span class="line">  <span class="attr">enable_rules:</span></span><br><span class="line">  <span class="attr">disable_rules:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-cjk-breaks</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-deflist</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-ins</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-mark</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-checkbox</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-imsize</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-expandable</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">success</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">tips</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">warning</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">danger</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">""</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">"header-anchor"</span></span><br><span class="line">    <span class="attr">permalinkSide:</span> <span class="string">"left"</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">"¶"</span></span><br><span class="line">    <span class="attr">case:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">separator:</span> <span class="string">"-"</span></span><br></pre></td></tr></table></figure>
<h2 id="插件">插件</h2>
<p>本章节讲述各种插件的用法、配置和注意事项。</p>
<h3 id="安装-9">安装</h3>
<p>分别使用 <code>npm</code> 命令安装以下三个插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i markdown-it-checkbox</span><br><span class="line">npm i markdown-it-imsize</span><br><span class="line">npm i markdown-it-expandable</span><br></pre></td></tr></table></figure>
<p>其它插件 <code>hexo-renderer-markdown-it</code> 渲染器自带的有，不要安装。</p>
<h3 id="用法-3">用法</h3>
<h4 id="基础">基础</h4>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">语法</th>
<th style="text-align:center">示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">markdown-it-abbr</td>
<td style="text-align:center">注释</td>
<td style="text-align:center"><code>*[HTML]: 超文本标记语言</code></td>
<td style="text-align:center"><abbr title="超文本标记语言">HTML</abbr></td>
</tr>
<tr>
<td style="text-align:center">markdown-it-emoji</td>
<td style="text-align:center">表情</td>
<td style="text-align:center"><code>:)</code></td>
<td style="text-align:center">😃</td>
</tr>
<tr>
<td style="text-align:center">markdown-it-footnote</td>
<td style="text-align:center">脚注</td>
<td style="text-align:center"><code>参考文献[^1]</code></td>
<td style="text-align:center">参考文献<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></td>
</tr>
<tr>
<td style="text-align:center">markdown-it-ins</td>
<td style="text-align:center">下划线</td>
<td style="text-align:center"><code>++下划线++</code></td>
<td style="text-align:center"><ins>下划线</ins></td>
</tr>
<tr>
<td style="text-align:center">markdown-it-mark</td>
<td style="text-align:center">突出显示</td>
<td style="text-align:center"><code>==标记==</code></td>
<td style="text-align:center"><mark>标记</mark></td>
</tr>
<tr>
<td style="text-align:center">markdown-it-sub</td>
<td style="text-align:center">下标</td>
<td style="text-align:center"><code>H~2~O</code></td>
<td style="text-align:center">H<sub>2</sub>O</td>
</tr>
<tr>
<td style="text-align:center">markdown-it-sup</td>
<td style="text-align:center">上标</td>
<td style="text-align:center"><code>X^2^</code></td>
<td style="text-align:center">X<sup>2</sup></td>
</tr>
<tr>
<td style="text-align:center">markdown-it-checkbox</td>
<td style="text-align:center">复选框</td>
<td style="text-align:center">未选：<code>- [ ]</code> <br> 选中：<code>- [x]</code></td>
<td style="text-align:center"><input type="checkbox" id="checkbox1"><label for="checkbox1">未选 </label><br><input type="checkbox" id="checkbox0" checked="true"><label for="checkbox0">选中</label></td>
</tr>
</tbody>
</table>
<h4 id="进阶">进阶</h4>
<blockquote>
<p><a class="link" href="https://github.com/tatsy/markdown-it-imsize">markdown-it-imsize<i class="fas fa-external-link-alt"></i></a>：自定义图片宽高。</p>
</blockquote>
<p>语法：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">test</span>](<span class="link">image.png =100x200</span>)</span><br></pre></td></tr></table></figure>
<div class="warning">
<p><strong>注意</strong><br>
=100x200 前面有一个空格</p>
</div>
<p>输出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image.png"</span> <span class="attr">alt</span>=<span class="string">"test"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"200"</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><a class="link" href="https://github.com/bioruebe/markdown-it-collapsible">markdown-it-expandable<i class="fas fa-external-link-alt"></i></a>：折叠/展开内容。</p>
</blockquote>
<p>默认展开语法：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">+++ <span class="strong">**点击折叠**</span></span><br><span class="line">这是被隐藏的内容</span><br><span class="line">+++</span><br></pre></td></tr></table></figure>
<p>输出效果展示：</p>
<details open="">
<summary><span class="pre-summary"> </span><strong>点击折叠</strong></summary><p>这是被隐藏的内容</p>
</details>
<p>默认折叠语法：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="strong">**点击展开**</span></span><br><span class="line">这是一个隐藏内容</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>输出效果展示：</p>
<details>
<summary><span class="pre-summary"> </span><strong>点击展开</strong></summary><p>这是一个隐藏内容</p>
</details>
<hr>
<blockquote>
<p><a class="link" href="https://github.com/markdown-it/markdown-it-container">markdown-it-container<i class="fas fa-external-link-alt"></i></a>：自定义容器。</p>
</blockquote>
<p>语法</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">::: tips</span><br><span class="line"><span class="strong">**提示**</span></span><br><span class="line">这是一个提示</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: warning</span><br><span class="line"><span class="strong">**注意**</span></span><br><span class="line">这是一个警告</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: danger</span><br><span class="line"><span class="strong">**警告**</span></span><br><span class="line">这是一个危险信号</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: success</span><br><span class="line"><span class="strong">**成功**</span></span><br><span class="line">这是一个成功信号</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>
<p>效果</p>
<div class="tips">
<p><strong>提示</strong><br>
这是一个提示</p>
</div>
<div class="warning">
<p><strong>注意</strong><br>
这是一个警告</p>
</div>
<div class="danger">
<p><strong>警告</strong><br>
这是一个危险信号</p>
</div>
<div class="success">
<p><strong>成功</strong><br>
这是一个成功信号</p>
</div>
<p>自定义容器还需要在 Hexo 的主题下的控制 Markdown 渲染样式文件中配置如下 CSS 内容：（否则不会显示背景色填充效果）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tips</span> {</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span> rgba(<span class="number">52</span>,<span class="number">152</span>,<span class="number">219</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">border-left</span> <span class="number">4px</span> solid rgb(<span class="number">52</span>,<span class="number">152</span>,<span class="number">219</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">darken</span>(<span class="built_in">rgb</span>(<span class="number">52</span>,<span class="number">152</span>,<span class="number">219</span>),<span class="number">20%</span>);</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.success</span> {</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span> rgba(<span class="number">46</span>,<span class="number">204</span>,<span class="number">113</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">border-left</span> <span class="number">4px</span> solid rgb(<span class="number">46</span>,<span class="number">204</span>,<span class="number">113</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">darken</span>(<span class="built_in">rgb</span>(<span class="number">46</span>,<span class="number">204</span>,<span class="number">113</span>),<span class="number">20%</span>);</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.warning</span> {</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span> rgba(<span class="number">241</span>,<span class="number">196</span>,<span class="number">15</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">border-left</span> <span class="number">4px</span> solid rgb(<span class="number">241</span>,<span class="number">196</span>,<span class="number">15</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">darken</span>(<span class="built_in">rgb</span>(<span class="number">241</span>,<span class="number">196</span>,<span class="number">15</span>),<span class="number">20%</span>);</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.danger</span> {</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span> rgba(<span class="number">231</span>,<span class="number">76</span>,<span class="number">60</span>,.<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">border-left</span> <span class="number">4px</span> solid rgb(<span class="number">231</span>,<span class="number">76</span>,<span class="number">60</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">darken</span>(<span class="built_in">rgb</span>(<span class="number">231</span>,<span class="number">76</span>,<span class="number">60</span>),<span class="number">20%</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>笔者博客用的 Hexo 模板是 Keep，可以直接在 <code>themes\keep\source\css\common\markdown.styl</code> 文件末尾添加如上 CSS 内容，其它主题请自行查找控制 Markdown 渲染样式的文件。</p>
<p>此外，通过自定义容器可以直接实现折叠/展开内容的效果，不需要安装插件 <code>markdown-it-expandable</code>，并且官方已经给出了案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> md = <span class="built_in">require</span>(<span class="string">"markdown-it"</span>)();</span><br><span class="line"></span><br><span class="line">md.use(<span class="built_in">require</span>(<span class="string">"markdown-it-container"</span>), <span class="string">"spoiler"</span>, {</span><br><span class="line">  <span class="attr">validate</span>: <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> params.trim().match(<span class="regexp">/^spoiler\s+(.*)$/</span>);</span><br><span class="line">  },</span><br><span class="line"></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">tokens, idx</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> m = tokens[idx].info.trim().match(<span class="regexp">/^spoiler\s+(.*)$/</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tokens[idx].nesting === <span class="number">1</span>) {</span><br><span class="line">      <span class="comment">// opening tag</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">"&lt;details&gt;&lt;summary&gt;"</span> + md.utils.escapeHtml(m[<span class="number">1</span>]) + <span class="string">"&lt;/summary&gt;\n"</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// closing tag</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">"&lt;/details&gt;\n"</span>;</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(md.render(<span class="string">"::: spoiler click me\n*content*\n:::\n"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// &lt;details&gt;&lt;summary&gt;click me&lt;/summary&gt;</span></span><br><span class="line"><span class="comment">// &lt;p&gt;&lt;em&gt;content&lt;/em&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">// &lt;/details&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是笔者主要是做后端开发的，所以不太会用，不知道如何导入到主题 JS 中，如果有懂的朋友希望可以指点一下。</p>
<h3 id="提示-2">提示</h3>
<p>如果不想启用某个插件，可以直接注释掉</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">  <span class="comment"># - markdown-it-deflist</span></span><br></pre></td></tr></table></figure>
<h2 id="拓展-3">拓展</h2>
<p>自定义容器方面还是 VuePress 做的比较好，不需要任何配置，即可使用：</p>
<p><img lazyload="" src="/images/loading.svg" data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Hexo%E3%80%91%E9%80%89%E6%8B%A9%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84Markdown%E6%B8%B2%E6%9F%93%E5%99%A8/1647672137506.png" alt="vuepress 自定义容器"></p>
<p>当然，也期待 <code>markdown-it-container</code> 的改进和 Hexo 的兼容。</p>
<h2 id="关于-9">关于</h2>
<details>
<summary><span class="pre-summary"> </span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img lazyload="" src="/images/loading.svg" data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg" alt="qq"></th>
<th><img lazyload="" src="/images/loading.svg" data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg" alt="wx"></th>
</tr>
</thead>
</table>
<p><img lazyload="" src="/images/loading.svg" data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp" alt="wechat-official-account"></p>
</details>
<h2 id="插画-9">插画</h2>
<p><img lazyload="" src="/images/loading.svg" data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Hexo%E3%80%91%E9%80%89%E6%8B%A9%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%9A%84Markdown%E6%B8%B2%E6%9F%93%E5%99%A8/Dana-pixiv.net-74451750.jpg" alt="anime"></p>
<div align="center" style="color: #ccc">【画师】Dana 【P站ID】74451750</div>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a class="link" href="https://ghgxj.xyz">https://ghgxj.xyz<i class="fas fa-external-link-alt"></i></a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
        <tag>plugins</tag>
      </tags>
  </entry>
  <entry>
    <title>【LaTex】IEEE论文作者信息排版</title>
    <url>/2022/03/27/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/</url>
    <content><![CDATA[<h2 id="引言-7">引言</h2>
<p>IEEE 会议论文投稿，样例论文作者信息排版如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/1648352728065.png"
                      alt="1"
                ></p>
<p>但是给的 LaTex 模板里面渲染的效果却是这样的：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/1648352859752.png"
                      alt="2"
                ></p>
<p>对应的 LaTex 语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\author&#123;\IEEEauthorblockN&#123;Michael Shell&#125;</span><br><span class="line">\IEEEauthorblockA&#123;School of Electrical and\\Computer Engineering\\</span><br><span class="line">Georgia Institute of Technology\\</span><br><span class="line">Atlanta, Georgia 30332--0250\\</span><br><span class="line">Email: http://www.michaelshell.org/contact.html&#125;</span><br><span class="line">\and</span><br><span class="line">\IEEEauthorblockN&#123;Homer Simpson&#125;</span><br><span class="line">\IEEEauthorblockA&#123;Twentieth Century Fox\\</span><br><span class="line">Springfield, USA\\</span><br><span class="line">Email: homer@thesimpsons.com&#125;</span><br><span class="line">\and</span><br><span class="line">\IEEEauthorblockN&#123;James Kirk\\ and Montgomery Scott&#125;</span><br><span class="line">\IEEEauthorblockA&#123;Starfleet Academy\\</span><br><span class="line">San Francisco, California 96678--2391\\</span><br><span class="line">Telephone: (800) 555--1212\\</span><br><span class="line">Fax: (888) 555--1212&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>如何修改 LaTex 语句，使其达到样例论文展示的效果？</p>
<h2 id="教程-4">教程</h2>
<p>按照如下修改方式修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\author&#123;</span><br><span class="line">\IEEEauthorblockN&#123;</span><br><span class="line">Michael Shell\IEEEauthorrefmark&#123;1&#125;,</span><br><span class="line">Homer Simpson\IEEEauthorrefmark&#123;2&#125;,</span><br><span class="line">James Kirk\IEEEauthorrefmark&#123;3&#125;, and</span><br><span class="line">Montgomery Scott\IEEEauthorrefmark&#123;3&#125;&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\IEEEauthorrefmark&#123;1&#125;School of Electrical and Computer Engineering, Georgia Institute of Technology, Atlanta, Georgia 30332--0250&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\IEEEauthorrefmark&#123;2&#125;Twentieth Century Fox, Springfield, USA&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\IEEEauthorrefmark&#123;3&#125;Starfleet Academy, San Francisco, California 96678--2391&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\IEEEauthorrefmark&#123;3&#125;Starfleet Academy, San Francisco, California 96678--2391&#125;</span><br><span class="line">\IEEEauthorblockA&#123;ms@michaelshell.org, homer@thesimpsons.com, (800) 555--1212, (888) 555--1212&#125;</span><br><span class="line">\IEEEauthorblockA&#123;Corresponding Author: Michael Shell \quad Email: ms@michaelshell.org&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>修改完成渲染效果如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/1648372515495.png"
                      alt="3"
                ></p>
<p>发现还是不太一样，作者标注格式是星号，而我们要的是数字。</p>
<p>要想实现数字的效果，需要在 <code>\begin&#123;document&#125;</code> 前插入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\DeclareRobustCommand*&#123;\IEEEauthorrefmark&#125;[1]&#123;%</span><br><span class="line">    \raisebox&#123;0pt&#125;[0pt][0pt]&#123;\textsuperscript&#123;\footnotesize\ensuremath&#123;#1&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>最终效果：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/1648372756500.png"
                      alt="4"
                ></p>
<h2 id="参考-9">参考</h2>
<blockquote>
<p><a class="link"   href="https://blog.csdn.net/mimomumu/article/details/59111005" >https://blog.csdn.net/mimomumu/article/details/59111005<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-10">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-10">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/%E3%81%8C%E3%81%B0%E3%81%8A%E3%80%82@3%E6%97%A5%E7%9B%AE%E8%A5%BF%E3%82%80-21a-pixiv.net-73436968.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】3日目西む 【P站ID】73436968</div>
]]></content>
      <categories>
        <category>latex</category>
      </categories>
      <tags>
        <tag>latex</tag>
        <tag>IEEE</tag>
      </tags>
  </entry>
  <entry>
    <title>【Linux】配置SSH免密登录</title>
    <url>/2022/04/05/%E3%80%90Linux%E3%80%91%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="简介-7">简介</h2>
<p>每次在本地计算机上通过 SSH 远程连接 Linux 服务器的时候都需要输入密码，非常繁琐，本文是配置 SSH 免密登录的教程。</p>
<h2 id="教程-5">教程</h2>
<ol>
<li class="lvl-3">
<p>在本地通过 RSA 加密算法生成公私钥对</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_test</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>t</code>：指定加密类型</p>
</li>
<li class="lvl-2">
<p><code>b</code>：指定加密字长</p>
</li>
<li class="lvl-2">
<p><code>f</code>：指定保存路径</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_blog</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (C:\Users\87897/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> C:\Users\87897/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> C:\Users\87897/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:uV8DJX7MT9dAGBUdVDtIkidM4ULSCXOyfMK8Z+S4RXY 87897@ZXC-LAPTOP</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 4096]----+</span></span><br><span class="line"><span class="string">|       =oo+++===+|</span></span><br><span class="line"><span class="string">|      + Bo.++o. o|</span></span><br><span class="line"><span class="string">|       * *.E+..o |</span></span><br><span class="line"><span class="string">|        Xoo=   .o|</span></span><br><span class="line"><span class="string">|       oS=o + . o|</span></span><br><span class="line"><span class="string">|        =. o o . |</span></span><br><span class="line"><span class="string">|       ..   o .  |</span></span><br><span class="line"><span class="string">|         . . .   |</span></span><br><span class="line"><span class="string">|          .      |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>从本地拷贝公钥（后缀为 <code>.pub</code> 的文件 ）到 Linux 服务器（SCP 远程文件传输教程：<a href="/2022/03/19/%E6%9C%AC%E5%9C%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/">点击跳转</a>）</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -P 22 ~/.ssh/id_rsa_test.pub user@host:~/.ssh/</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>在远程 Linux 服务器中追加公钥到文件 <code>authorized_keys</code> 中</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat id_rsa_test.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>在本地 ssh 配置文件 <code>~/.ssh/config</code> 中添加如下配置信息</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host host</span><br><span class="line">    HostName host</span><br><span class="line">    User user</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_test</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>Host</code>：远程服务器的 IP 地址</p>
</li>
<li class="lvl-2">
<p><code>HostName</code>：远程服务器的 IP 地址</p>
</li>
<li class="lvl-2">
<p><code>User</code>：远程服务器的用户名称</p>
</li>
<li class="lvl-2">
<p><code>IdentityFile</code>：本地私钥保存路径</p>
</li>
</ul>
<h2 id="注意">注意</h2>
<div class="warning">
<p><strong>警告</strong><br>
远程 Linux 服务器必须开启公钥密码验证和 RSA 加密验证，允许免密登录，并确保加密验证文件正确。</p>
</div>
<ol>
<li class="lvl-3">
<p>首先，查看 SSH 配置文件</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>可以看到公钥密码验证和 RSA 加密验证都是 <code>yes</code>，加密验证文件是 <code>.ssh/authorized_keys</code></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PubkeyAuthentication yes</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>如若不然，请联系管理员修改配置文件</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<h2 id="参考-10">参考</h2>
<blockquote>
<p><a class="link"   href="https://code.visualstudio.com/docs/remote/troubleshooting" >Visual Studio Code 远程开发疑难解答提示和技巧<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-11">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-11">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Linux%E3%80%91%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/%E9%98%B2%E4%BA%BA-pixiv.net-79919440.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】防人 【P站ID】79919440</div>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】创建虚拟环境的三种方式（venv | pipenv | conda）</title>
    <url>/2022/04/16/%E3%80%90Python%E3%80%91%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%88venv-pipenv-conda%EF%BC%89/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/cover/Python_Logo.png"
                      alt="cover" width="100%"
                ></p>
<h2 id="引言-8">引言</h2>
<p>什么是虚拟环境？虚拟环境是一个 Python 环境，其中安装的 Python 解释器、库和脚本与安装在其他虚拟环境中的那些是隔离的，而且（默认情况下）安装在系统 Python 中的任何库（即作为操作系统的一部分安装的库）也是隔离的。</p>
<p>为什么需要虚拟环境？这是由于 pip 的特性决定的，同一个环境下，仅允许安装每个包的一个版本。假设，这里有三个包，分别为：A、B 和 C。A 包依赖于 B 包的 v1.0 版本，而 C 包依赖于 B 包的 v2.0 版本。如果我安装了 v1.0 的 B 包，那么 C 包就无法使用；如果安装了 v2.0 的 B 包，那么 A 包就无法使用。因此，在同一个环境下，由于只能安装一个版本的 B 包，导致 A 包和 C 包无法同时使用。</p>
<p>因此，我们需要创建多个 Python 的虚拟环境来解决上述问题。在环境 1 下安装 v1.0 的 B 包，然后就能使用 A 包，在环境 2 下安装 v2.0 的 B 包，就能使用 C 包。也就说，不同虚拟环境下的包是互不影响的，避免了包冲突问题。</p>
<p>此外，我们推荐每进行一个新的项目开发，就创建一个仅适用于该项目的虚拟 Python 环境。这样有助于包管理，同时还能非常清晰地列出项目开发用到的所有包，生成一键安装清单，方便后期的部署或复现。</p>
<p>本文将介绍三种最常用的创建 Python 虚拟环境的方式，让您轻松掌握创建及使用虚拟环境的方法。</p>
<h2 id="教程-6">教程</h2>
<h3 id="venv">venv</h3>
<p>Python2 版本创建虚拟环境常使用一个名为 virtualenv 的第三方包。从 Python3.3 以后，标准库就内置了一个名为 venv 的模块，我们可以用它来创建虚拟环境，完全替换 virtualenv。</p>
<h4 id="安装-10">安装</h4>
<p>不需要安装，Python3.3 及以上版本的内置标准模块。</p>
<h4 id="用法-4">用法</h4>
<ol>
<li class="lvl-3">
<p>创建环境</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m venv ENV_DIR</span><br></pre></td></tr></table></figure>
<p><code>ENV_DIR</code> 指定存放环境的目录，一般使用 <code>venv</code>，这是一个不成文的规定。</p>
<p>虚拟环境的目录树结构如下（Windows）：</p>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击展开</strong></summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.venv</span><br><span class="line">    ├─pyvenv.cfg</span><br><span class="line">    ├─Include</span><br><span class="line">    ├─Lib</span><br><span class="line">    │  └─site-packages</span><br><span class="line">    │      ├─pip</span><br><span class="line">    │      ├─pip-20.2.3.dist-info</span><br><span class="line">    │      ├─pkg_resources</span><br><span class="line">    │      ├─setuptools-49.2.1.dist-info</span><br><span class="line">    │      ├─easy_install.py</span><br><span class="line">    │      └─__pycache__</span><br><span class="line">    └─Scripts</span><br><span class="line">    │  └─activate</span><br><span class="line">    │  └─activate.bat</span><br><span class="line">    │  └─Activate.ps1</span><br><span class="line">    │  └─deactivate.bat</span><br><span class="line">    │  └─easy_install-3.9.exe</span><br><span class="line">    │  └─easy_install.exe</span><br><span class="line">    │  └─pip.exe</span><br><span class="line">    │  └─pip3.9.exe</span><br><span class="line">    │  └─pip3.exe</span><br><span class="line">    │  └─python.exe</span><br><span class="line">    │  └─pythonw.exe</span><br></pre></td></tr></table></figure>
</details>
<p><code>pyvenv.cfg</code> 是一个配置文件，包含三个参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>home</code>：指向运行命令的 Python 安装目录；</p>
</li>
<li class="lvl-2">
<p><code>include-system-site-packages</code>：是否使用系统 Python 环境中安装的包。默认是 <code>false</code>，即不使用；</p>
</li>
<li class="lvl-2">
<p><code>version</code>：Python 版本号。</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>激活环境</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>Windows</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\ENV_DIR\Scripts\activate</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>Unix/macOS</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ENV_DIR/bin/activate</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>退出环境</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>删除环境</p>
</li>
</ol>
<p>删除整个环境的安装目录即可。</p>
<h3 id="pipenv">pipenv</h3>
<p>pipenv 将包管理工具 pip 和虚拟环境创建工具 virtualenv 有机地结合到了一起，实现了开发环境和生产环境依赖的分离，旨在构建专属于 Python 的开发工作流，达到类似于 npm，yarn 等工具的效果。</p>
<h4 id="安装-11">安装</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure>
<h4 id="用法-5">用法</h4>
<ol>
<li class="lvl-3">
<p>环境管理</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建环境：<code>pipenv install</code></p>
</li>
<li class="lvl-2">
<p>激活环境：<code>pipenv shell</code></p>
</li>
<li class="lvl-2">
<p>退出环境：<code>exit</code></p>
</li>
<li class="lvl-2">
<p>删除环境：<code>pipenv --rm</code></p>
</li>
</ul>
<p>pipenv install 命令会根据系统默认 Python 版本来创建虚拟环境，并生成用于依赖包管理的 <code>Pipfile</code> 和 <code>Pipfile.lock</code> 文件。当你将项目分享给他人的时候，执行 pipenv install 命令会创建一个虚拟环境并自动安装 <code>Pipfile</code> 中指定的依赖包。</p>
<ol start="2">
<li class="lvl-3">
<p>包管理</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>安装包：</p>
<ul class="lvl-2">
<li class="lvl-4">用包名安装并写入 <code>Pipfile</code> 的生产环境：<code>pipenv install requests</code></li>
<li class="lvl-4">用包名安装并写入 <code>Pipfile</code> 的开发环境：<code>pipenv install pytest --dev</code></li>
<li class="lvl-4">安装 <code>Pipfile</code> 中列出的所有生产环境包：<code>pipenv install</code></li>
<li class="lvl-4">安装 <code>Pipfile</code> 中列出的所有开发环境包：<code>pipenv install --dev</code></li>
</ul>
</li>
<li class="lvl-2">
<p>卸载包：</p>
<ul class="lvl-2">
<li class="lvl-4">卸载指定包并从 <code>Pipfile</code> 中移除：<code>pipenv uninstall requests</code></li>
<li class="lvl-4">卸载所有生产环境包(不从<code>Pipfile</code>中移除)：<code>pipenv uninstall --all</code></li>
<li class="lvl-4">卸载所有开发环境包并从 <code>Pipfile</code> 中移除：<code>pipenv uninstall --all-dev</code></li>
</ul>
</li>
</ul>
<ol start="3">
<li class="lvl-3">
<p>配置 pypi 镜像</p>
</li>
</ol>
<p>将 <code>Pipfile</code> 和 <code>Pipfile.lock</code> 中对应的 pypi 源（<a class="link"   href="https://pypi.org/simple%EF%BC%89%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%E5%8C%85%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82" >https://pypi.org/simple）修改为国内镜像源，可以解决包下载速度慢的问题。<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">清华大学：https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="string">阿里云：http://mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line"><span class="string">中国科技大学</span> <span class="string">https://pypi.mirrors.ustc.edu.cn/simple/</span></span><br><span class="line"><span class="string">豆瓣：http://pypi.douban.com/simple/</span></span><br></pre></td></tr></table></figure>
<h3 id="conda">conda</h3>
<p>Anaconda 是一个大型的环境管理系统，支持 Python/R 在内的多种语言。安装 Anaconda 或 Miniconda（精简版） 之后就能使用 conda 命令来创建和管理 Python 环境。</p>
<h4 id="安装-12">安装</h4>
<blockquote>
<p><a class="link"   href="https://blog.csdn.net/qq_42951560/article/details/109035229" >Miniconda软件安装教程（Windows）<i class="fas fa-external-link-alt"></i></a><br>
<a class="link"   href="https://blog.csdn.net/qq_42951560/article/details/109152114" >Miniconda软件安装教程（Linux）<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h4 id="用法-6">用法</h4>
<ol>
<li class="lvl-3">
<p>创建环境</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n ENV_NAME python=3.9</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>激活环境</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate ENV_NAME</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>退出环境</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>删除环境</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda env remove -n ENV_NAME</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>venv：内置模块，小巧轻便，使用灵活；</p>
</li>
<li class="lvl-2">
<p>pipenv：Python 开发专属，定义了一套完整的 Python 开发工作流；</p>
</li>
<li class="lvl-2">
<p>conda：大型的环境管理系统，Python 开发必备软件。</p>
</li>
</ul>
<div class="tips">
<p>conda 可以创建多个不同版本的 Python 环境，而 venv 和 pipenv 只能根据系统中已有 Python 版本创建。</p>
</div>
<h2 id="拓展-4">拓展</h2>
<p>在虚拟环境中可通过 pip 命令来进行管理，常用的包管理命令如下（以 requests 包为例）：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>安装包：<code>pip install requests</code></p>
</li>
<li class="lvl-2">
<p>升级包：<code>pip install --upgrade requests</code></p>
</li>
<li class="lvl-2">
<p>卸载包：<code>pip uninstall requests</code></p>
</li>
</ul>
<p>此外，安装指定版本的包可通过命令 <code>pip install requests==2.18.4</code> 实现。如果有多个包，可将包名及其对应的版本（中间用<code>==</code>连接，不同包之间换行）写入一个名为 <code>requirements.txt</code> 的文件，然后通过如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>同理，因为是在虚拟环境中，所以该环境中的安装的所有包都是开发需要用到的，没有其他项目的包，可以通过如下命令导出所有安装包的清单，方便后续复现或持续开发：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<h2 id="参考-11">参考</h2>
<blockquote>
<p><a class="link"   href="https://docs.python.org/3/library/venv.html" >Python官方文档-&gt;venv <i class="fas fa-external-link-alt"></i></a><br>
<a class="link"   href="https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/" >Python用户指南-&gt;使用 pip 和虚拟环境安装包<i class="fas fa-external-link-alt"></i></a><br>
<a class="link"   href="https://github.com/pypa/pipenv" >pipenv开源地址<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-12">关于</h2>
<details>
<summary>点击查看作者联系方式和微信公众号</summary>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-12">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/anime/%E9%A3%B4%E7%8E%89%E3%82%B3%E3%83%B3-pixiv.net-78140545.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】飴玉コン 【P站ID】78140545</div>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>venv</tag>
        <tag>pipenv</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】图像反转/反色的三种方法（pillow）</title>
    <url>/2022/04/10/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/pillow.png"
                      alt="cover" width="100%"
                ></p>
<h2 id="引言-9">引言</h2>
<p>图像反转（反色）是将图像的灰度值反转，若图像灰度级为 256，则新图的灰度值为 255 减去原图的灰度值。本文介绍了使用 Python 的 pillow 库进行图像反转（反色）的三种方法。</p>
<h2 id="安装-13">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure>
<h2 id="方法">方法</h2>
<h3 id="方法-1🙂">方法 1🙂</h3>
<p>使用 <code>point()</code> 方法对图像所有像素值进行运算，并返回结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_color</span>(<span class="params">fname</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">    im_inverted = im.point(<span class="keyword">lambda</span> _: <span class="number">255</span>-_)</span><br><span class="line">    im_inverted.save(fname.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;_inverted.&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> im_inverted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    invert_color(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="方法-2😁">方法 2😁</h3>
<p>使用嵌套 for 循环遍历图像的每个像素点，并进行取反操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_color</span>(<span class="params">fname</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">    px = im.load()</span><br><span class="line">    w, h = im.size</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(px[i, j]) == <span class="built_in">int</span>:</span><br><span class="line">                px[i, j] = <span class="number">255</span>-px[i, j]</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(px[i, j]) == <span class="number">3</span>:</span><br><span class="line">                px[i, j] = <span class="built_in">tuple</span>([<span class="number">255</span>-i <span class="keyword">for</span> i <span class="keyword">in</span> px[i, j]])</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(px[i, j]) == <span class="number">4</span>:</span><br><span class="line">                px[i, j] = <span class="built_in">tuple</span>([<span class="number">255</span>-i <span class="keyword">for</span> i <span class="keyword">in</span> px[i, j][:<span class="number">3</span>]]+[px[i, j][-<span class="number">1</span>]])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    im.save(fname.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;_inverted.&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> im</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    invert_color(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="方法-3😊">方法 3😊</h3>
<p>直接使用 ImageChops 中定义的反转函数进行图像颜色反转。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageChops</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_color</span>(<span class="params">fname</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">    im_inverted = ImageChops.invert(im)</span><br><span class="line">    im_inverted.save(fname.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;_inverted.&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> im_inverted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    invert_color(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="实验">实验</h2>
<table>
<thead>
<tr>
<th style="text-align:center">原图通道</th>
<th style="text-align:center">原图</th>
<th style="text-align:center">反色</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/test_1_channel.jpg"
                      alt=""
                ></td>
<td style="text-align:center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/test_1_channel_inverted.jpg"
                      alt=""
                ></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/test_3_channel.jpg"
                      alt=""
                ></td>
<td style="text-align:center"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/test_3_channel_inverted.jpg"
                      alt=""
                ></td>
</tr>
</tbody>
</table>
<h2 id="参考-12">参考</h2>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.point" >PIL.Image.Image.point<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/ImageChops.html#PIL.ImageChops.invert" >PIL.ImageChops.invert<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.load" >PIL.Image.Image.load<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://www.cnblogs.com/weixia-blog/p/12833624.html" >图像二值化处理<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://blog.csdn.net/m0_49762339/article/details/112285408" >python 图像处理 Pillow 学习笔记<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
</blockquote>
<h2 id="关于-13">关于</h2>
<details>
<summary>点击查看作者联系方式和微信公众号</summary>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-13">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/test_3_channel.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】森倉円 【P站ID】78693898</div>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>image</tag>
        <tag>python</tag>
        <tag>pillow</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】基于 Sqlite3 的数据库操作（零基础入门教程）</title>
    <url>/2022/04/20/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Sqlite3-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/cover/SQLite_Logo.jpg"
                      alt="cover" width="100%"
                ></p>
<h2 id="引言-10">引言</h2>
<p>SQLite 是一个由 C 语言编写的库，它提供了一个轻量级的基于磁盘的数据库，不需要单独开一个数据库服务器，并允许使用 SQL 语句访问数据库。</p>
<p>判断是否使用 SQLite 的标准：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>数据与应用分离：不适用 SQLite</p>
</li>
<li class="lvl-2">
<p>要求高并发性：不适用 SQLite</p>
</li>
<li class="lvl-2">
<p>大数据：不适用 SQLite</p>
</li>
<li class="lvl-2">
<p>否则，选择 SQLite</p>
</li>
</ul>
<p>SQLite 不是一个 client/server 架构的数据库引擎（如 MySQL、Oracle、PostgreSQL 或 SQL Server 等），它致力于为单个应用程序提供本地存储，强调经济性、效率、可靠性、独立性和简单性，而不追求可伸缩性、并发性、集中性和控制性。</p>
<p>Python3 内置了一个名为 <code>sqlite3</code> 标准模块，提供了 SQLite 数据库操作的一整套接口，本文是利用该模块实现数据库操作的零基础入门教程。</p>
<blockquote>
<p>sqlite3 是以 <a class="link"   href="http://github.com/ghaering/pysqlite" >pysqlite<i class="fas fa-external-link-alt"></i></a> 的名称在外部进行开发，其开发参考了 <a class="link"   href="https://www.python.org/dev/peps/pep-0249" >PEP 249<i class="fas fa-external-link-alt"></i></a> 定义的 <code>Database API Specification 2.0</code>（数据库接口规范 2.0），以及 <a class="link"   href="https://www.sqlite.org/" >SQLite<i class="fas fa-external-link-alt"></i></a> 官网提供的 SQL 语法和数据类型。</p>
</blockquote>
<h2 id="安装-14">安装</h2>
<p><code>sqlite3</code> 是 Python3 的内置标准模块，不用额外安装。</p>
<h2 id="教程-7">教程</h2>
<p>这里简要介绍一下数据库操作的一般流程：</p>
<ol>
<li class="lvl-3">
<p>开启数据库连接</p>
</li>
<li class="lvl-3">
<p>新建游标</p>
</li>
<li class="lvl-3">
<p>调用游标执行 SQL 语句</p>
</li>
<li class="lvl-3">
<p>关闭游标</p>
</li>
<li class="lvl-3">
<p>提交数据库更改（如果抛出异常，则回滚）</p>
</li>
<li class="lvl-3">
<p>关闭数据库连接</p>
</li>
</ol>
<p>最常见的增删改查操作都通过执行 SQL 语句中实现。</p>
<h3 id="创建和关闭数据库连接">创建和关闭数据库连接</h3>
<p>如要使用该模块，首先必须创建一个表示数据库的 <code>Connection</code> 对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<p>如果不存在 <code>demo.db</code> 文件，将自动创建；如果存在，则直接进行连接。</p>
<h3 id="新建表">新建表</h3>
<p>一旦你有了一个 <code>Connection</code>，你可以创建一个 <code>Cursor</code> 对象，并调用它的 <code>execute()</code> 方法来执行 SQL 命令，比如在数据库中新建一个名为 <code>student</code> 的表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    create table student(</span></span><br><span class="line"><span class="string">        id integer primary key autoincrement not null,</span></span><br><span class="line"><span class="string">        name text,</span></span><br><span class="line"><span class="string">        age integer</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<p>如果表已经存在，会抛出 <code>OperationalError</code> 异常。为避免抛出该异常，可以使用 Python 的异常捕捉进行处理，也可以在 SQL 语句中进行表是否存在的判断。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    create table if not exists student(</span></span><br><span class="line"><span class="string">        id integer primary key autoincrement not null,</span></span><br><span class="line"><span class="string">        name text,</span></span><br><span class="line"><span class="string">        age integer</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="插入记录【增】">插入记录【增】</h3>
<p>接下来，让我们向表中插入几条记录用于测试。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>插入一条记录</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">data = (<span class="number">1</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">sql = <span class="string">&#x27;insert into student values (?, ?, ?)&#x27;</span></span><br><span class="line">cursor.execute(sql, data)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>插入多行记录</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">data = [</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&#x27;lily&#x27;</span>, <span class="number">19</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&#x27;mike&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">]</span><br><span class="line">sql = <span class="string">&#x27;insert into student values (?, ?, ?)&#x27;</span></span><br><span class="line">cursor.executemany(sql, data)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<p>通常，你不应该使用 Python 的字符串操作来组合 SQL 语句，因为这样做是不安全的，容易受到 SQL 注入攻击。正确的做法是使用 <code>?</code> 作为占位符，然后将值的元组或元组嵌套的列表作为第二个参数传递给 execute() 或 executemany() 方法。</p>
<h3 id="查询记录【查】">查询记录【查】</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>查询表中所有字段的记录</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;select * from student&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<pre><code>(1, 'john', 18)
(2, 'lily', 19)
(3, 'mike', 20)
</code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>查询表中指定字段的记录</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;select name from student&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<pre><code>('john',)
('lily',)
('mike',)
</code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>根据条件查询表中的记录</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;select * from student where age = 18&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<pre><code>(1, 'john', 18)
</code></pre>
<h3 id="修改记录【改】">修改记录【改】</h3>
<p>例如，将 <code>mike</code> 的 <code>name</code> 修改为 <code>mary</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&quot;update student set name = &#x27;mary&#x27; where name = &#x27;mike&#x27;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="删除记录【删】">删除记录【删】</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>按条件删除表记录</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&quot;delete from student where name = &#x27;lily&#x27;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>清空表中所有记录</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;delete from student&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="删除表">删除表</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;drop table student&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h2 id="附录">附录</h2>
<p>数据库表操作常用的 SQL 命令：</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>新建表</td>
<td>create table [if not exists] <code>TABLE_NAME</code> <code>COLUMN_DEF</code></td>
</tr>
<tr>
<td>清空表中所有记录</td>
<td>delete from <code>TABLE_NAME</code></td>
</tr>
<tr>
<td>按条件清除表记录</td>
<td>delete from <code>TABLE_NAME</code> where <code>EXPR</code></td>
</tr>
<tr>
<td>删除表</td>
<td>drop table [if exists] <code>TABLE_NAME</code></td>
</tr>
<tr>
<td>查看表字段</td>
<td>pragma table_info(<code>TABLE_NAME</code>)</td>
</tr>
<tr>
<td>修改表名称</td>
<td>alter table <code>OLD_TABLE_NAME</code> rename to <code>NEW_TABLE_NAME</code></td>
</tr>
<tr>
<td>添加表字段</td>
<td>alter table <code>TABLE_NAME</code> add <code>NEW_COLUMN_NAME</code> [<code>COLUMN_DEF</code>]</td>
</tr>
<tr>
<td>删除表字段</td>
<td>alter table <code>TABLE_NAME</code> drop <code>COLUMN_NAME</code></td>
</tr>
<tr>
<td>修改字段名</td>
<td>alter table <code>TABLE_NAME</code> rename column <code>OLD_COLUMN_NAME</code> to <code>NEW_COLUMN_NAME</code></td>
</tr>
<tr>
<td>插入表记录</td>
<td>insert into <code>TABLE_NAME</code> [(<code>COLUMN_NAME</code>)] values (<code>EXPR</code>)</td>
</tr>
<tr>
<td>向表中插入查询返回的数据</td>
<td>insert into <code>TABLE_NAME</code> select <code>EXPR</code></td>
</tr>
<tr>
<td>在表末尾插入一条默认数据</td>
<td>insert into <code>TABLE_NAME</code> default values</td>
</tr>
<tr>
<td>更新表记录</td>
<td>update <code>TABLE_NAME</code> set <code>COLUMN1_NAME</code> = <code>EXPR1</code> , <code>COLUMN2_NAME</code> = <code>EXPR2</code> [from <code>TABLE_NAME</code> or <code>SUBQUERY</code>] [where <code>EXPR</code>]</td>
</tr>
<tr>
<td>查询表中所有字段的记录</td>
<td>select * from <code>TABLE_NAME</code> [where <code>EXPR</code>] [group by <code>EXPR</code>] [order by <code>ORDERING-TERM</code>] [limit <code>EXPR</code>]</td>
</tr>
<tr>
<td>查询表中指定字段的记录</td>
<td>select <code>COLUMN1_NAME</code> , <code>COLUMN2_NAME</code> from <code>TABLE_NAME</code></td>
</tr>
</tbody>
</table>
<p>更多关于 SQL 语句的详细信息请参见<a class="link"   href="https://www.sqlite.org/doclist.html" >官方文档<i class="fas fa-external-link-alt"></i></a>。</p>
<h2 id="概念">概念</h2>
<h3 id="数据类型">数据类型</h3>
<p>SQLite 官方定义了如下五种<a class="link"   href="https://www.sqlite.org/datatype3.html" >数据类型<i class="fas fa-external-link-alt"></i></a>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>NULL：空值。</p>
</li>
<li class="lvl-2">
<p>INTEGER：整数。</p>
</li>
<li class="lvl-2">
<p>REAL：小数。</p>
</li>
<li class="lvl-2">
<p>TEXT：文本字符串。</p>
</li>
<li class="lvl-2">
<p>BLOB：二进制对象。</p>
</li>
</ul>
<p>SQLite 没有单独的布尔数据存储类型，布尔值被存储为整数 0 (false) 和 1 (true)。</p>
<p>在 sqlite3 模块中，Python 数据类型和 SQLite 数据类型可以相互转换。</p>
<p>Python 数据类型在 SQLite 中的呈现方式：</p>
<table>
<thead>
<tr>
<th>Python type</th>
<th>SQLite type</th>
</tr>
</thead>
<tbody>
<tr>
<td>None</td>
<td>NULL</td>
</tr>
<tr>
<td>int</td>
<td>INTEGER</td>
</tr>
<tr>
<td>long</td>
<td>INTEGER</td>
</tr>
<tr>
<td>float</td>
<td>REAL</td>
</tr>
<tr>
<td>str (UTF8-encoded)</td>
<td>TEXT</td>
</tr>
<tr>
<td>unicode</td>
<td>TEXT</td>
</tr>
<tr>
<td>buffer</td>
<td>BLOB</td>
</tr>
</tbody>
</table>
<p>SQLite 数据类型在 Python 中按照如下方式转换：</p>
<table>
<thead>
<tr>
<th>SQLite type</th>
<th>Python type</th>
</tr>
</thead>
<tbody>
<tr>
<td>NULL</td>
<td>None</td>
</tr>
<tr>
<td>INTEGER</td>
<td>int or long, depending on size</td>
</tr>
<tr>
<td>REAL</td>
<td>float</td>
</tr>
<tr>
<td>TEXT</td>
<td>depends on text_factory, unicode by default</td>
</tr>
<tr>
<td>BLOB</td>
<td>buffer</td>
</tr>
</tbody>
</table>
<h3 id="字段定义">字段定义</h3>
<p>除数据类型外，定义字段时还有很多其他可选参数：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>primary key：主键。其值能唯一标识表中的每一行。</p>
</li>
<li class="lvl-2">
<p>primary key autoincrement：主键自增。插入数据时无需带上主键的值，因为它可以自动递增赋值。</p>
</li>
<li class="lvl-2">
<p>not null：非空。该字段内不允许出现空值。</p>
</li>
<li class="lvl-2">
<p>unique：唯一。该字段内不允许出现重复值。</p>
</li>
<li class="lvl-2">
<p>default：默认。设置该字段的默认值。</p>
</li>
</ul>
<h2 id="接口">接口</h2>
<h3 id="Connection">Connection</h3>
<p>Connection 对象主要实现了以下方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>.close()：关闭数据库连接。关闭之后，试图对数据库进行的任何操作都将引发 <code>Error</code> 异常。</p>
</li>
<li class="lvl-2">
<p>.commit()：提交所有挂起的任务到数据库。</p>
</li>
<li class="lvl-2">
<p>.rollback()：回滚数据库到挂起任务尚未执行之前。值得注意的是，如果在没有提交更改的情况下就关闭了数据库连接，将会自动执行隐式回滚。</p>
</li>
<li class="lvl-2">
<p>.cursor()：返回一个新的使用该连接的 <code>Cursor</code> 对象。</p>
</li>
</ul>
<h3 id="Cursor">Cursor</h3>
<p>Cursor 对象主要实现了以下属性和方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>属性</p>
<ul class="lvl-2">
<li class="lvl-4">.description：游标描述信息。如果没有有意义的信息，就返回 <code>None</code>。</li>
<li class="lvl-4">.rowcount：执行最后一个 SQL 语句操作的行数。如果没有 SQL 语句执行，返回 <code>-1</code>。</li>
</ul>
</li>
<li class="lvl-2">
<p>方法</p>
<ul class="lvl-2">
<li class="lvl-4">.close()：关闭游标。关闭之后，试图对游标进行的任何操作都将引发 <code>Error</code> 异常。</li>
<li class="lvl-4">.execute(sql [, parameters])：准备并执行 SQL 语句。</li>
<li class="lvl-4">.executemany(sql, seq_of_parameters)：准备并执行 SQL 语句。接受的参数是一个序列。</li>
<li class="lvl-4">.fetchone()：获取查询结果中的一行，返回单个序列。如果查询结果结果是空，返回 <code>None</code>。如果之前执行的 sql 语句没有任何返回结果，抛出 <code>Error</code> 异常。</li>
<li class="lvl-4">.fetchmany([size=cursor.arraysize])：获取多行查询结果，返回一个嵌套的序列，例如，嵌套在列表里面的元组。</li>
<li class="lvl-4">.fetchall()：获取查询结果的所有行，返回一个嵌套的序列。</li>
</ul>
</li>
</ul>
<h2 id="参考-13">参考</h2>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p><a class="link"   href="https://www.sqlite.org/index.html" >SQLite Home Page<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://peps.python.org/pep-0249/" >PEP 249 – Python Database API Specification v2.0<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://pysqlite.readthedocs.io/en/latest/sqlite3.html" >sqlite3 — DB-API 2.0 interface for SQLite databases<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
</blockquote>
<h2 id="关于-14">关于</h2>
<details>
<summary>点击查看作者联系方式和微信公众号</summary>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-14">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/anime/%E9%81%A0%E5%9D%82%E3%81%82%E3%81%95%E3%81%8E-pixiv.net-82092664.jpg"
                      alt="anime" width="100%"
                ></p>
<center><font color="#ccc">【画师】遠坂あさぎ 【P站ID】82092664</font></center>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sqlite</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】将控制台输出保存至文件（loguru）</title>
    <url>/2022/03/01/%E3%80%90Python%E3%80%91%E5%B0%86%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%BF%9D%E5%AD%98%E8%87%B3%E6%96%87%E4%BB%B6%EF%BC%88loguru%EF%BC%89/</url>
    <content><![CDATA[<h2 id="引言-11">引言</h2>
<p>编写 Python 程序代码的时候，我们通常使用内置的 <code>print()</code> 函数实现必要信息在终端控制条的打印输出。但当需要输出的信息过多时，或为便于之后的查找，除直接在控制台输出外，将其保存于本地文件中不失为一个好的选择。今天将大家如何通过第三方库 loguru 来代替 <code>print()</code> 记录日志，实现将控制台输出保存至文件。</p>
<h2 id="简介-8">简介</h2>
<p>loguru 是一个 Python 的第三方库，其功能是记录日志。日志是每个程序的基础，可以简化调试（debug）过程。养成良好的记录日志的习惯，是每个资深程序员的必备素养。</p>
<p>Python 有个内置的日志记录库 <a class="link"   href="https://docs.python.org/3/library/logging.html" >logging<i class="fas fa-external-link-alt"></i></a>，但其配置相当繁琐，导致很多开发者直接使用 <code>print()</code> 替代。loguru 实现了日志记录器的自动化配置，让日志记录变得愉快而强大。</p>
<h2 id="安装-15">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install loguru</span><br></pre></td></tr></table></figure>
<h2 id="用法-7">用法</h2>
<h3 id="基础-2">基础</h3>
<ol>
<li class="lvl-3">
<p>将日志信息输出到控制台</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logger.info(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="number">2022</span>-03-01 <span class="number">20</span>:<span class="number">37</span>:<span class="number">54.968</span> | INFO     | __main__:&lt;module&gt;:<span class="number">1</span> - hello world</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>将日志信息输出到控制台的同时保存至本地文件</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logger.add(<span class="string">&#x27;out.log&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logger.info(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="number">2022</span>-03-01 <span class="number">20</span>:<span class="number">42</span>:<span class="number">22.011</span> | INFO     | __main__:&lt;module&gt;:<span class="number">1</span> - hello world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.log&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(f.read())</span><br><span class="line">...</span><br><span class="line"><span class="number">2022</span>-03-01 <span class="number">20</span>:<span class="number">42</span>:<span class="number">22.011</span> | INFO     | __main__:&lt;module&gt;:<span class="number">1</span> - hello world</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="进阶-2">进阶</h3>
<p>如果感觉输出的日志信息格式比较丑，可以通过以下方式更改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logger.remove()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logger.add(sys.stdout, <span class="built_in">format</span>=<span class="string">&#x27;&#123;time&#125; &#123;level&#125; &#123;message&#125;&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logger.info(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="number">2022</span>-03-01T21:<span class="number">26</span>:<span class="number">46.850506</span>+0800 INFO hello world</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logger.remove()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logger.add(sys.stdout, <span class="built_in">format</span>=<span class="string">&#x27;&#123;time&#125; &#123;message&#125;&#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logger.info(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="number">2022</span>-03-01T21:<span class="number">28</span>:<span class="number">43.093011</span>+0800 hello world</span><br></pre></td></tr></table></figure>
<h2 id="拓展-5">拓展</h2>
<p>这里分享一下笔者常用的日志记录方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">logger.remove()</span><br><span class="line">logger.add(sys.stdout, level=<span class="string">&#x27;INFO&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;&#123;message&#125;&#x27;</span>)</span><br><span class="line">logger.add(<span class="string">&#x27;output.log&#x27;</span>, level=<span class="string">&#x27;INFO&#x27;</span>, <span class="built_in">format</span>=<span class="string">&#x27;&#123;message&#125;&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="参考-14">参考</h2>
<blockquote>
<p><a class="link"   href="https://github.com/Delgan/loguru" >https://github.com/Delgan/loguru<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>print</tag>
        <tag>loggru</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】基于 Pillow 的图像处理（零基础入门教程）</title>
    <url>/2022/04/14/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/Pillow_Logo.png"
                      alt="cover" width="100%"
                ></p>
<h2 id="引言-12">引言</h2>
<p>Python Imaging Library（简称：PIL）是一个基于 Python 的图像处理库，这个库提供了广泛的文件格式支持、高效的内部表示和相当强大的图像处理能力。旨在快速访问几种基本像素格式存储的数据，为通用图像处理工具提供坚实的基础。本文是 Pillow 的零基础入门教程，让你轻松学会用 Pillow 处理图像的方法。</p>
<h2 id="安装-16">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure>
<h2 id="教程-8">教程</h2>
<h3 id="使用-Image-类">使用 Image 类</h3>
<p>Pillow 中最重要的类就是 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image" >Image<i class="fas fa-external-link-alt"></i></a> 类。通过这个类，你可以从文件中加载图像，处理图像，或从头创建图像。</p>
<p>使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.open" >open()<i class="fas fa-external-link-alt"></i></a> 函数从文件中加载图像。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>)</span><br><span class="line">im</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_6_0.png"
                      alt="png"
                ></p>
<p>如果加载成功，会返回一个 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image" >Image<i class="fas fa-external-link-alt"></i></a> 对象；如果图像无法打开，则会抛出 <a class="link"   href="https://docs.python.org/3/library/exceptions.html#OSError" >OSError<i class="fas fa-external-link-alt"></i></a> 异常。现在让我们打印类实例的属性来看看图像的信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;format: <span class="subst">&#123;im.<span class="built_in">format</span>&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;size: <span class="subst">&#123;im.size&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mode: <span class="subst">&#123;im.mode&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>format: JPEG
size: (128, 128)
mode: RGB
</code></pre>
<ul class="lvl-0">
<li class="lvl-2">
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.format" >format<i class="fas fa-external-link-alt"></i></a>: 图像格式。标识图像来源。</p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.size" >size<i class="fas fa-external-link-alt"></i></a>: 图像大小。是一个二元组，包含了图像的宽和高。</p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.mode" >mode<i class="fas fa-external-link-alt"></i></a>: 图像模式。定义了图像中波段的数量和名称，以及像素类型和深度。常用模式有：<code>l</code> -&gt; 灰度图像；<code>RGB</code> -&gt; 真彩色图像；<code>CMYK</code> -&gt; 预印图像。</p>
</li>
</ul>
<p>一旦有了 Image 类的实例，你就可以使用该类定义的方法来操作图像。例如，让我们显示刚才加载的图像。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im.show()</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.show" >show()<i class="fas fa-external-link-alt"></i></a> 方法首先将图像保存到一个临时文件中，然后调用系统默认打开图像的程序来加载这个临时文件。</p>
<h3 id="读取和保存图像">读取和保存图像</h3>
<p>Pillow 库支持读取多种图像格式。请使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#module-PIL.Image" >Image<i class="fas fa-external-link-alt"></i></a> 模块的 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.open" >open()<i class="fas fa-external-link-alt"></i></a> 函数从磁盘读取文件。读取的时候不必指定图像格式，Pillow 库会根据文件的内容自动确定。</p>
<p>请使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image" >Image<i class="fas fa-external-link-alt"></i></a> 类的 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.save" >save()<i class="fas fa-external-link-alt"></i></a> 方法来保存图像。保存图像时，文件后缀非常重要，因为这个库会根据你指定的文件拓展名来决定使用哪种存储格式。</p>
<h4 id="将其他格式的图像转换为-JPEG-格式">将其他格式的图像转换为 JPEG 格式</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.png&#x27;</span></span><br><span class="line">im_png = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_png.save(<span class="string">f&#x27;<span class="subst">&#123;fname.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]&#125;</span>.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="创建-JPEG-缩略图">创建 JPEG 缩略图</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">thumbnail_size = (<span class="number">64</span>, <span class="number">64</span>) <span class="comment"># 指定缩略图的大小</span></span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line"><span class="keyword">if</span> thumbnail_size:</span><br><span class="line">    im.thumbnail(thumbnail_size)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    im.thumbnail((im.width//<span class="number">2</span>, im.height//<span class="number">2</span>))</span><br><span class="line">im</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_19_0.png"
                      alt="png"
                ></p>
<h3 id="裁剪、粘贴及合并图像">裁剪、粘贴及合并图像</h3>
<h4 id="裁剪图像">裁剪图像</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">box = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">region = im.crop(box)</span><br><span class="line">region</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_22_0.png"
                      alt="png"
                ></p>
<p>Pillow 定义图像左上角坐标为 (0, 0)，<a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.crop" >crop()<i class="fas fa-external-link-alt"></i></a> 方法接受一个四元组参数，对应裁剪的坐标 (左, 上, 右, 下)。例如，(0, 0, 64, 64) 表示裁剪矩形左上角的坐标是 (0, 0)，右下角的坐标是 (64, 64)。那么，最终裁剪的子图大小就是 (64-0, 64-0)。</p>
<h4 id="粘贴图像">粘贴图像</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">region = region.transpose(Image.Transpose.ROTATE_180) <span class="comment"># 将图像旋转180°</span></span><br><span class="line">box = (<span class="number">64</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">128</span>) <span class="comment"># 指定粘贴覆盖的区域</span></span><br><span class="line">im.paste(region, box) <span class="comment"># 粘贴图像</span></span><br><span class="line">im</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_25_0.png"
                      alt="png"
                ></p>
<p>使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.paste" >paste()<i class="fas fa-external-link-alt"></i></a> 方法粘贴图像。贴图的大小必须和给定粘贴区域的大小一致，且不能超出给定底图的区域。</p>
<h4 id="合并图片">合并图片</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">size = (<span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">im_1 = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, size, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">im_2 = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, size, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">im_3 = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, size, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">im_3.paste(im_1, (<span class="number">0</span>, size[<span class="number">1</span>]//<span class="number">3</span>))</span><br><span class="line">im_3.paste(im_2, (<span class="number">0</span>, size[<span class="number">1</span>]//<span class="number">3</span>*<span class="number">2</span>))</span><br><span class="line">im_3</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_28_0.png"
                      alt="png"
                ></p>
<h4 id="划分和合并波段">划分和合并波段</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">r, g, b = im.split()</span><br><span class="line">rgb = Image.merge(<span class="string">&#x27;RGB&#x27;</span>, (r, g, b))</span><br><span class="line">bgr = Image.merge(<span class="string">&#x27;RGB&#x27;</span>, (b, g, r))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [r, g, b, rgb, bgr]</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">5</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;rgb&#x27;</span>, <span class="string">&#x27;bgr&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_30_0.png"
                      alt="png"
                ></p>
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.split" >split()<i class="fas fa-external-link-alt"></i></a> 方法用于划分图像波段。对于单波段图像，返回它本身。</p>
<h3 id="几何变换">几何变换</h3>
<h4 id="缩放和旋转图像">缩放和旋转图像</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">im = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">128</span>, <span class="number">128</span>), <span class="string">&#x27;cyan&#x27;</span>)</span><br><span class="line">im_resied = im.resize((<span class="number">64</span>, <span class="number">64</span>))</span><br><span class="line">im_rotated = im.rotate(<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, im_resied, im_rotated]</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;resized&#x27;</span>, <span class="string">&#x27;rotated&#x27;</span>][i])</span><br><span class="line">    <span class="comment"># plt.axis(&#x27;off&#x27;) # 为了对比 resize 前后图片的大小，我们这里就不隐藏坐标轴了</span></span><br><span class="line">    plt.imshow(j, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_34_0.png"
                      alt="png"
                ></p>
<p>使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.resize" >resize()<i class="fas fa-external-link-alt"></i></a> 方法缩放图像，该方法接受一个二元组，其含义为图像的宽高；使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.rotate" >rotate()<i class="fas fa-external-link-alt"></i></a> 方法旋转图像，接受一个整数，其含义为逆时针旋转的角度。</p>
<h4 id="翻转图像">翻转图像</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_h_flip = im.transpose(Image.Transpose.FLIP_LEFT_RIGHT)</span><br><span class="line">im_v_flip = im.transpose(Image.Transpose.FLIP_TOP_BOTTOM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, im_h_flip, im_v_flip]</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;flip horizontally&#x27;</span>, <span class="string">&#x27;flip vertically&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_37_0.png"
                      alt="png"
                ></p>
<p>使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.transpose" >transpose()<i class="fas fa-external-link-alt"></i></a> 方法可以实现图像的水平翻转和垂直翻转。</p>
<h3 id="颜色变换">颜色变换</h3>
<p>Pillow 库允许使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert" >convert()<i class="fas fa-external-link-alt"></i></a> 方法在不同的像素表示之间转换图像。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_L = im.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, im_L]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original_RGB&#x27;</span>, <span class="string">&#x27;converted_Gray&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_41_0.png"
                      alt="png"
                ></p>
<p>该库支持每个格式与 <code>L</code> 和 <code>RGB</code> 的相互转换，但如何和其他格式进行转换，一般采用 RGB 做中间媒介。</p>
<h3 id="图像增强">图像增强</h3>
<p>Pillow 库提供了大量的的用于图像增强的方法和模块。</p>
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/ImageFilter.html" >ImageFilter<i class="fas fa-external-link-alt"></i></a> 模块中封装了很多用于图像滤波的类，包括高斯模糊，边缘增强，细节滤波等等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  ImageFilter</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_out = im.<span class="built_in">filter</span>(ImageFilter.DETAIL) <span class="comment"># 细节滤波，使图像中的细节更加明显</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, im_out]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;after detail filtering&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_46_0.png"
                      alt="png"
                ></p>
<h4 id="像素点操作">像素点操作</h4>
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.point" >point()<i class="fas fa-external-link-alt"></i></a> 方法用于批量转换图像像素点。该方法接受一个 lambda 函数作为参数，图像中所有像素点都根据该函数进行处理。例如，下方这个例子就是通过 point() 方法对图像的对比度进行增强。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_out = im.point(<span class="keyword">lambda</span> _: _*<span class="number">1.25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, im_out]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;after contrast enhanced&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_49_0.png"
                      alt="png"
                ></p>
<h4 id="高级图像增强">高级图像增强</h4>
<p>要想获得更高级的图像增强，你可以使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/ImageEnhance.html#module-PIL.ImageEnhance" >ImageEnhance<i class="fas fa-external-link-alt"></i></a> 模块中定义的类。通过那些类，你可以快速地对图像的亮度、对比度、色彩平衡以及锐化程度进行调节。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageEnhance</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">enh = ImageEnhance.Brightness(im).enhance(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, enh]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;100% more brightness&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_52_0.png"
                      alt="png"
                ></p>
<h3 id="图像序列">图像序列</h3>
<p>Pillow 库也包含对图像序列（动画格式）的一些基本支持。支持的序列格式文件包括：GIF、TIFF 和 FLI 等等。</p>
<h4 id="读取序列">读取序列</h4>
<p>当加载序列图像时，默认加载的是第一帧。你可以使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.seek" >seek()<i class="fas fa-external-link-alt"></i></a> 和 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.tell" >tell()<i class="fas fa-external-link-alt"></i></a> 方法访问不同的帧。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/digit.gif&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_list = [im.copy()]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        im.seek(im.tell()+<span class="number">1</span>)</span><br><span class="line">        im_list.append(im.copy())</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title(<span class="built_in">str</span>(i+<span class="number">1</span>))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_57_0.png"
                      alt="png"
                ></p>
<h4 id="迭代序列">迭代序列</h4>
<p>除使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.seek" >seek()<i class="fas fa-external-link-alt"></i></a> 方法读取图像序列外，<a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/ImageSequence.html" >ImageSequence<i class="fas fa-external-link-alt"></i></a> 模块还提供了 for 循环迭代遍历图像序列的方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageSequence</span><br><span class="line">fname = <span class="string">&#x27;images/test/digit.gif&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_list = []</span><br><span class="line"><span class="keyword">for</span> frame <span class="keyword">in</span> ImageSequence.Iterator(im):</span><br><span class="line">    im_list.append(frame.copy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title(<span class="built_in">str</span>(i+<span class="number">1</span>))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_60_0.png"
                      alt="png"
                ></p>
<p>此外，你也可以通过 Image 模块定义的属性 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.n_frames" >n_frames<i class="fas fa-external-link-alt"></i></a> 来控制 for 循环的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/digit.gif&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(im.n_frames):</span><br><span class="line">    im.seek(i)</span><br><span class="line">    im_list.append(im.copy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title(<span class="built_in">str</span>(i+<span class="number">1</span>))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_62_0.png"
                      alt="png"
                ></p>
<h3 id="PostScript-打印">PostScript 打印</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, PSDraw</span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(<span class="string">&quot;images/test/hopper.jpg&quot;</span>) <span class="keyword">as</span> im:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.ps&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="comment"># 创建文档</span></span><br><span class="line">        ps = PSDraw.PSDraw(fp)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始文档</span></span><br><span class="line">        ps.begin_document(<span class="string">&quot;hopper&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入图片</span></span><br><span class="line">        ps.image(box, im, <span class="number">75</span>)</span><br><span class="line">        ps.rectangle((<span class="number">1</span> * <span class="number">72</span>, <span class="number">2</span> * <span class="number">72</span>, <span class="number">7</span> * <span class="number">72</span>, <span class="number">10</span> * <span class="number">72</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入标题</span></span><br><span class="line">        ps.setfont(<span class="string">&quot;HelveticaNarrow-Bold&quot;</span>, <span class="number">36</span>)</span><br><span class="line">        ps.text((<span class="number">3</span> * <span class="number">72</span>, <span class="number">4</span> * <span class="number">72</span>), <span class="string">&quot;hopper&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 结束文档</span></span><br><span class="line">        ps.end_document()</span><br></pre></td></tr></table></figure>
<h3 id="更多读取图片的方式">更多读取图片的方式</h3>
<p>我们通常使用 Image.open(filename) 的方式来打开一张图片。其实，Image.open() 还可以作为上下文管理器。如果一切顺利，返回一个 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image" >PIL.Image.Image<i class="fas fa-external-link-alt"></i></a> 对象，否则抛出 <a class="link"   href="https://docs.python.org/3/library/exceptions.html#OSError" >OSError<i class="fas fa-external-link-alt"></i></a> 异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>) <span class="keyword">as</span> im:</span><br><span class="line">    im.show()</span><br></pre></td></tr></table></figure>
<h4 id="从打开的文件中读取">从打开的文件中读取</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    im = Image.<span class="built_in">open</span>(fp)</span><br><span class="line">    im.show()</span><br></pre></td></tr></table></figure>
<h4 id="从-tar-存档中读取">从 tar 存档中读取</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, TarIO</span><br><span class="line">fp = TarIO.TarIO(<span class="string">&#x27;images/test/hopper.tar&#x27;</span>, <span class="string">&quot;hopper.jpg&quot;</span>)</span><br><span class="line">im = Image.<span class="built_in">open</span>(fp)</span><br><span class="line">im</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_71_0.png"
                      alt="png"
                ></p>
<h4 id="批量处理">批量处理</h4>
<p>例如，将所有 PNG 格式的图片都转换成低质量的 JPEG 格式保存在工作目录中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress_image</span>(<span class="params">source_path, dest_path</span>):</span></span><br><span class="line">    <span class="keyword">with</span> Image.<span class="built_in">open</span>(source_path) <span class="keyword">as</span> img:</span><br><span class="line">        <span class="keyword">if</span> img.mode != <span class="string">&quot;RGB&quot;</span>:</span><br><span class="line">            img = img.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        img.save(dest_path, <span class="string">&quot;JPEG&quot;</span>, optimize=<span class="literal">True</span>, quality=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> glob.glob(<span class="string">&quot;*.png&quot;</span>):</span><br><span class="line">        compress_image(path, path[:-<span class="number">4</span>] + <span class="string">&quot;.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="控制解码器">控制解码器</h3>
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.draft" >draft()<i class="fas fa-external-link-alt"></i></a> 方法允许操作一个打开但尚未加载的图像，使其尽可能与给定模式和大小匹配，这是通过重新配置图像解码器来实现的。但仅适用于 JPEG 和 MPO 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(fname) <span class="keyword">as</span> im:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;original =&quot;</span>, im.mode, im.size)</span><br><span class="line"></span><br><span class="line">    im.draft(<span class="string">&quot;L&quot;</span>, (<span class="number">64</span>, <span class="number">64</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;draft =&quot;</span>, im.mode, im.size)</span><br><span class="line"></span><br><span class="line">    im.show()</span><br></pre></td></tr></table></figure>
<pre><code>original = RGB (128, 128)
draft = L (64, 64)
</code></pre>
<h2 id="概念-2">概念</h2>
<h3 id="波段">波段</h3>
<p>一幅图像可能由一个或多个波段组成，只要它们具有相同的尺寸和深度。例如，PNG 图像可能有 R、G、B 和 A 四个波段，分别表示红色、绿色、蓝色和 alpha 透明值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(im.getbands())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(im.getdata(<span class="number">0</span>))[:<span class="number">10</span>]) <span class="comment"># 数据太多，这里只展示前10个像素点的值</span></span><br><span class="line">r, g, b = im.split()</span><br><span class="line">r = im.getchannel(<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">r</span><br></pre></td></tr></table></figure>
<pre><code>('R', 'G', 'B')
[24, 18, 16, 22, 25, 23, 19, 17, 28, 29]
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_81_1.png"
                      alt="png"
                ></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.getbands" >Image.getbands()<i class="fas fa-external-link-alt"></i></a>：获取图像中所有波段的名称，并以元组的形式返回。</p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.getdata" >Image.getdata(band=None)<i class="fas fa-external-link-alt"></i></a>：将此图像的内容作为包含像素值的序列对象返回。序列对象是扁平的，即第一行的值紧跟在第 0 行之后，依此类推。<code>band</code> 参数表示波段的索引，默认是 <code>None</code>，返回所有波段。</p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.split" >Image.split()<i class="fas fa-external-link-alt"></i></a>：将图像分割为单独的波段。</p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.getchannel" >Image.getchannel(channel)<i class="fas fa-external-link-alt"></i></a>：返回图像的单个通道。<code>channel</code> 参数可接受一个整型的索引值，或大写的通道名称。</p>
</li>
</ul>
<h3 id="模式">模式</h3>
<p>图像模式 <a class="link"   href="https://pillow.readthedocs.io/en/stable/handbook/concepts.html#modes" >mode<i class="fas fa-external-link-alt"></i></a> 是一个字符串，它定义图像中像素的类型和深度。每个像素使用位深度的全部范围，例如：1 位像素的范围是 0-1，8 位像素的范围是 0-255，以此类推。当前 Pillow 支持以下标准模式：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>1</code>：1 位，黑白，每字节存储 1 个像素</p>
</li>
<li class="lvl-2">
<p><code>L</code>：8 位，黑白</p>
</li>
<li class="lvl-2">
<p><code>P</code>：8 位，使用调色板映射到任何其他模式</p>
</li>
<li class="lvl-2">
<p><code>RGB</code>：3x8 位，真彩色</p>
</li>
<li class="lvl-2">
<p><code>RGBA</code>：4x8 位，带透明遮罩的真彩色</p>
</li>
<li class="lvl-2">
<p><code>CMYK</code>：4x8 位，印刷色彩（cyan，magenta，yellow，black）</p>
</li>
<li class="lvl-2">
<p>……</p>
</li>
</ul>
<p>你可以通过 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.mode" >mode<i class="fas fa-external-link-alt"></i></a> 属性读取图像的模式。这是一个包含上述值之一的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(im.mode)</span><br><span class="line">r = im.getchannel(<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.mode)</span><br></pre></td></tr></table></figure>
<pre><code>RGB
L
</code></pre>
<h3 id="大小">大小</h3>
<p>你可以通过 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.size" >size<i class="fas fa-external-link-alt"></i></a> 属性读取图像大小。这是一个二元组，包含以像素位单位的水平和垂直大小，即图像的宽和高。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>)</span><br><span class="line">im.size</span><br></pre></td></tr></table></figure>
<pre><code>(128, 128)
</code></pre>
<h3 id="坐标系">坐标系</h3>
<p>Pillow 使用笛卡尔坐标系，左上角坐标为 (0, 0)。坐标通常作为 2 元组传递给类或函数。矩形表示为 4 元组，前两个元素是左上角点的坐标，后两个元素代表右下角点的坐标。</p>
<h3 id="调色板">调色板</h3>
<p>调色板模式（p）使用调色板为每个像素定义实际颜色。</p>
<h3 id="滤波器">滤波器</h3>
<p>对于可能将多个输入像素映射到单个输出像素的几何操作，Pillow 提供了多种不同的重采样滤波器。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>PIL.Image.NEAREST：最邻近采样</p>
</li>
<li class="lvl-2">
<p>PIL.Image.BILINEAR：双线性插值</p>
</li>
<li class="lvl-2">
<p>PIL.Image.HAMMING：汉明采样</p>
</li>
<li class="lvl-2">
<p>PIL.Image.BICUBIC：双三插值</p>
</li>
<li class="lvl-2">
<p>PIL.Image.LANCZOS：余弦滤波</p>
</li>
</ul>
<h2 id="参考-15">参考</h2>
<blockquote>
<p><a class="link"   href="https://pillow.readthedocs.io/en/stable/index.html" >Pillow 官方文档<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-15">关于</h2>
<details>
<summary>点击查看作者联系方式和微信公众号</summary>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-15">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/Yomi-pixiv.net-82757552.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】Yomi 【P站ID】8275755</div>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pillow</tag>
        <tag>image processing</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】快速创建一个简易 HTTP 服务器（http.server）</title>
    <url>/2022/04/16/%E3%80%90Python%E3%80%91%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93-HTTP-%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88http.server%EF%BC%89/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/cover/Python_Logo.png"
                      alt="cover" width="100%"
                ></p>
<h2 id="引言-13">引言</h2>
<p><code>http.server</code> 是 <code>socketserver.TCPServer</code> 的子类，它在 HTTP 套接字上创建和监听，并将请求分派给处理程序。本文是关于如何使用 Python 的 <code>http.server</code> 模块快速地搭建一个简易 HTTP 服务器的教程。</p>
<h2 id="安装-17">安装</h2>
<p>Python3 内置标准模块，无需安装。（在之前的 Python2 版本名称是 <code>SimpleHTTPServer</code>）</p>
<h2 id="教程-9">教程</h2>
<h3 id="用命令行创建">用命令行创建</h3>
<div class="success">
<p>http.server 支持以 Python 解释器的 -m 参数直接调用。</p>
</div>
<p>通过执行如下命令创建一个最简单的 HTTP 服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure>
<p>服务器默认监听端口是 8000，支持自定义端口号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m http.server 9000</span><br></pre></td></tr></table></figure>
<p>服务器默认绑定到所有接口，可以通过 <code>-b/--bind</code> 指定地址，如本地主机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m http.server --<span class="built_in">bind</span> 127.0.0.1</span><br></pre></td></tr></table></figure>
<p>服务器默认工作目录为当前目录，可通过 <code>-d/--directory</code> 参数指定工作目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m http.server --directory /tmp/</span><br></pre></td></tr></table></figure>
<p>此外，可以通过传递参数 <code>--cgi</code> 启用 <a class="link"   href="https://baike.baidu.com/item/CGI/607810" >CGI<i class="fas fa-external-link-alt"></i></a> 请求处理程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m http.server --cgi</span><br></pre></td></tr></table></figure>
<h3 id="编写代码创建">编写代码创建</h3>
<div class="tips">
<p>http.server 也支持在代码中调用，导入对应的类和函数即可。</p>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> SimpleHTTPRequestHandler</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> CGIHTTPRequestHandler</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> ThreadingHTTPServer</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DualStackServer</span>(<span class="params">ThreadingHTTPServer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_bind</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># suppress exception when protocol is IPv4</span></span><br><span class="line">        <span class="keyword">with</span> contextlib.suppress(Exception):</span><br><span class="line">            self.socket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_V6ONLY, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().server_bind()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">server_class=DualStackServer,</span></span></span><br><span class="line"><span class="params"><span class="function">        handler_class=SimpleHTTPRequestHandler,</span></span></span><br><span class="line"><span class="params"><span class="function">        port=<span class="number">8000</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        bind=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        cgi=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        directory=os.getcwd(<span class="params"></span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run an HTTP server on port 8000 (or the port argument).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        server_class (_type_, optional): Class of server. Defaults to DualStackServer.</span></span><br><span class="line"><span class="string">        handler_class (_type_, optional): Class of handler. Defaults to SimpleHTTPRequestHandler.</span></span><br><span class="line"><span class="string">        port (int, optional): Specify alternate port. Defaults to 8000.</span></span><br><span class="line"><span class="string">        bind (str, optional): Specify alternate bind address. Defaults to &#x27;127.0.0.1&#x27;.</span></span><br><span class="line"><span class="string">        cgi (bool, optional): Run as CGI Server. Defaults to False.</span></span><br><span class="line"><span class="string">        directory (_type_, optional): Specify alternative directory. Defaults to os.getcwd().</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cgi:</span><br><span class="line">        handler_class = partial(CGIHTTPRequestHandler, directory=directory)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        handler_class = partial(SimpleHTTPRequestHandler, directory=directory)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> server_class((bind, port), handler_class) <span class="keyword">as</span> httpd:</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">f&quot;Serving HTTP on <span class="subst">&#123;bind&#125;</span> port <span class="subst">&#123;port&#125;</span> &quot;</span></span><br><span class="line">            <span class="string">f&quot;(http://<span class="subst">&#123;bind&#125;</span>:<span class="subst">&#123;port&#125;</span>/) ...&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            httpd.serve_forever()</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\nKeyboard interrupt received, exiting.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run(port=<span class="number">8000</span>, bind=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>server_class</code>：服务器类</p>
</li>
<li class="lvl-2">
<p><code>handler_class</code>：请求处理类</p>
</li>
<li class="lvl-2">
<p><code>port</code>：端口</p>
</li>
<li class="lvl-2">
<p><code>bind</code>：IP</p>
</li>
<li class="lvl-2">
<p><code>cgi</code>：是否启用 CGI 请求处理程序</p>
</li>
<li class="lvl-2">
<p><code>directory</code>：工作目录</p>
</li>
</ul>
<h2 id="实例">实例</h2>
<p>既然我们已经知道了 http.server 能够快速地创建一个 HTTP 服务器，那么它能应用到哪些项目场景？</p>
<ol>
<li class="lvl-3">
<p>小型 web 项目在局域网内的预览</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>项目目录</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">web:.</span><br><span class="line">├─index.html</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>index.html</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>切换到目录 <code>cd web</code>，执行命令 <code>python -m http.server</code>，浏览器地址栏输入 <code>localhost:8000</code>，显示：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>
<div class="tips">
<p>对于局域网的其他用户，可通过你的主机IP+端口号访问，如你的主机IP是192.168.0.1，那么将网址 192.168.0.1:8000 发送给你的同事或同学，他们也可以看到 index.html 文件渲染的内容。</p>
</div>
<ol start="2">
<li class="lvl-3">
<p>在本地浏览器访问远程服务器的端口映射</p>
</li>
</ol>
<p>如果通过 VSCode 连接远程服务器，使用 http.server 开启一个端口后，会自动映射到本地，这样在本地浏览器就能查看和下载远程服务器资源。（除 VSCode 外，其他工具应该也可以实现远程与本地的端口映射）</p>
<h2 id="注意-2">注意</h2>
<div class="warning">
<p>http.server 只实现了最基本的安全审查，请不要用于生产环境。</p>
</div>
<h2 id="参考-16">参考</h2>
<blockquote>
<p><a class="link"   href="https://docs.python.org/3/library/http.server.html" >http.server 官方文档<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-16">关于</h2>
<details>
<summary>点击查看作者联系方式和微信公众号</summary>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-16">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/anime/%E3%83%95%E3%82%AB%E3%83%92%E3%83%AC_pixiv.net_78142008.jpg"
                      alt="cover" width="100%"
                ></p>
<center><font style="color: #ccc">【画师】フカヒレ 【P站ID】78142008</font></center>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>http.server</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】执行系统命令</title>
    <url>/2022/04/15/%E3%80%90Python%E3%80%91%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Python%E3%80%91%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/Python_Logo.png"
                      alt="cover" width="100%"
                ></p>
<h2 id="引言-14">引言</h2>
<p>Python 编程中可能会需要调用系统命令。本文以一段测试网络连通性的代码来演示如何执行系统命令，并获取输出结果。</p>
<h2 id="教程-10">教程</h2>
<h3 id="os-system😐">os.system😐</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">ip</span>):</span></span><br><span class="line">    os.system(<span class="string">f&#x27;ping <span class="subst">&#123;ip&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ping(<span class="built_in">input</span>(<span class="string">&#x27;please enter the ip to ping: &#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>执行上述代码，输入 <code>baidu.com</code> 并回车，控制台就会打印 <code>ping</code> 结果。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Python%E3%80%91%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/vscode.png"
                      alt="vscode"
                ></p>
<hr>
<p><code>os.system</code> 调用标准 C 函数来实现命令在子进程中执行。它会将命令执行的任何输出重定向到解释器（我们这里是 Python 解释器）的标准输出流。其返回值是进程的退出码，反映进程的退出状态，在 Windows 和 Unix 系统上会有所不同。实测是 Windows 系统上的退出码是 0，表示命令成功执行并关闭进程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">&#x27;pwd&#x27;</span>) </span><br><span class="line">/c/Users/<span class="number">87897</span>/Desktop</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="os-popen😊">os.popen😊</h3>
<p><code>os.system</code> 函数返回值是进程退出码，无法获取命令执行输出结果。而 <code>os.popen</code> 通过管道的方式连接到执行进程，可灵活地获得命令执行的输出。其返回值是一个连接到管道的打开文件对象，可以根据模式是 <code>r</code> (默认值) 还是 <code>w</code> 来读取或写入。</p>
<hr>
<p>根据 os.popen 的特性，我们可以将上述代码简单变动一下：不在控制台打印 ping 结果，而是将其保存在一个名为 <code>ping.log</code> 的日志文件中，方便后续的 debug 或审查。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">ip</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ping.log&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fw:</span><br><span class="line">        <span class="keyword">with</span> os.popen(<span class="string">f&#x27;ping <span class="subst">&#123;ip&#125;</span>&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fr:</span><br><span class="line">            fw.write(fr.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ping(<span class="built_in">input</span>(<span class="string">&#x27;please enter the ip to ping: &#x27;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="subprocess😁">subprocess😁</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">ip</span>):</span></span><br><span class="line">    p = subprocess.run(</span><br><span class="line">        <span class="string">f&#x27;ping <span class="subst">&#123;ip&#125;</span>&#x27;</span>,</span><br><span class="line">        capture_output=<span class="literal">True</span>,</span><br><span class="line">        text=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> p.stdout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(ping(<span class="built_in">input</span>(<span class="string">&#x27;please enter the ip to ping: &#x27;</span>)))</span><br></pre></td></tr></table></figure>
<p>官方开发 <code>subprocess</code> 模块就是为了替换 <code>os.system</code> 和 <code>os.popen</code>，因此更推荐使用 <code>subprocess</code>。通过 <code>subprocess.run</code> 函数开一个子进程来执行系统命令。如果指定 <code>capture_output=True</code>，将返回一个 <code>CompletedProcess</code> 的类实例，该类的 <code>stdout</code> 属性可查看命令的输出结果。</p>
<h2 id="提示-3">提示</h2>
<p>如果想让一行执行多条关联命令，比如：先 <code>cd</code> 到一个目录，然后在该目录下新建文件夹，可以用 <code>&amp;</code> 符号将多条命令连接起来，实例代码如下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    os.system(<span class="string">&#x27;cd test &amp; mkdir main&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    func()</span><br></pre></td></tr></table></figure>
<p>如果多条命令没有依赖关系的话，直接多调用几次函数，然后从上到下顺序执行。</p>
<hr>
<p>如果执行的命令的时候需要进行人机交互（例如 SSH 远程连接服务器时需要输入密码），可以考虑使用 pexpect 库，这是一个 Python 第三方库，用来启动一个子进程，并对其进行自动化控制。其常规用法如下：</p>
<ol>
<li class="lvl-3">
<p>使用 <code>spawn</code> 方法来执行程序</p>
</li>
<li class="lvl-3">
<p>使用 <code>expect </code>方法等待程序打印输入提示关键字</p>
</li>
<li class="lvl-3">
<p>使用 <code>send/sendline</code> 方法发送字符串到程序</p>
</li>
</ol>
<p>但该库目前仅支持 Unix 系统，对 Windows 系统的支持非常有限，请根据需求选择。</p>
<h2 id="注意-3">注意</h2>
<p>上述所有执行系统命令的方式都有被注入恶意脚本的风险。因此，在实际应用场景下，要设置过滤策略，进行代码漏洞排查。</p>
<hr>
<p>例如，下方的代码就在 <code>ping</code> 的同时添加了一条删除整个 <code>test</code> 文件夹的命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">ip</span>):</span></span><br><span class="line">    os.system(<span class="string">f&#x27;ping <span class="subst">&#123;ip&#125;</span> &amp; rm -rf test/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ping(<span class="built_in">input</span>(<span class="string">&#x27;please enter the ip to ping: &#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>如果把 <code>rm -rf test/</code> 改为 <code>rm -rf /</code>，那就是删除整个系统文件了，所以一定要慎用！</p>
<h2 id="参考-17">参考</h2>
<blockquote>
<p><a class="link"   href="https://docs.python.org/3/library/os.html#os.system" >os.system 官方文档<i class="fas fa-external-link-alt"></i></a><br>
<a class="link"   href="https://docs.python.org/3/library/os.html#os.popen" >os.popen 官方文档<i class="fas fa-external-link-alt"></i></a><br>
<a class="link"   href="https://docs.python.org/3/library/subprocess.html" >subprocess 官方文档<i class="fas fa-external-link-alt"></i></a><br>
<a class="link"   href="https://blog.csdn.net/qq_26139045/article/details/104583222" >Python学习之OS库的system函数<i class="fas fa-external-link-alt"></i></a><br>
<a class="link"   href="https://zhuanlan.zhihu.com/p/339070615" >Python模块Pexpect详解<i class="fas fa-external-link-alt"></i></a><br>
<a class="link"   href="https://www.cnblogs.com/linwenbin/p/10944152.html" >python pexpect模块的使用<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-17">关于</h2>
<details>
<summary>点击查看作者联系方式和微信公众号</summary>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-17">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Python%E3%80%91%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/saraki%EF%BC%A0%E3%81%8A%E4%BB%95%E4%BA%8B%E5%8B%9F%E9%9B%86%E4%B8%AD-pixiv.net-79898386.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】saraki 【P站ID】79898386</div>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>os</tag>
        <tag>subprocess</tag>
        <tag>pexpect</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】提取 MNIST 数据集中的图片到本地</title>
    <url>/2022/01/18/%E3%80%90Python%E3%80%91%E6%8F%90%E5%8F%96-MNIST-%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<h2 id="引言-Introduction-5">引言 | Introduction</h2>
<p><a class="link"   href="http://yann.lecun.com/exdb/mnist/" >MNIST<i class="fas fa-external-link-alt"></i></a> 数据集是最经典的一个机器学习的数据集，常被视为图像分类问题的入门级数据。虽然 Python 的很多第三方包都对其进行了封装，但对于模型训练来说，我们常用的还是本地的数据。今天教大家如何提取 MNIST 数据到本地。</p>
<h2 id="安装-Install-3">安装 | Install</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install torchvision==0.11.2 tqdm==4.54.1</span><br></pre></td></tr></table></figure>
<h2 id="方法-Method">方法 | Method</h2>
<p>我们利用 <code>torchvision</code> 包封装的 MNIST 数据集来提取图片到本地。MNIST 数据集是一个典型的多分类数据集，其中存放的是 7 万张手写数字的灰度图片（6 万训练和 1 万测试），每张灰度图片的大小是 28×28。共有 10 类标签，分别对应数字 0-9。</p>
<p>一般来说，我们回将整个数据集按照 8:1:1 的比例（或其他比例）划分为 3 个子集：训练集，验证集和测试集。MNIST 官方只划分了两个子集，笔者自认为不太合理，故提取到本地时没有单独的创建 train 和 test 子文件夹来存放图片，不过在图片名称前加了 train 和 test 字样，以标识该图片是从哪个子数据集中获取的。</p>
<p>下方给出了具体的实现代码。您需要安装两个第三方 Python 包：torchvision 和 tqdm，然后给定数据在本地保存的文件夹路径，运行代码即可。</p>
<h2 id="代码-Code">代码 | Code</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mnist_export</span>(<span class="params">root: <span class="built_in">str</span> = <span class="string">&#x27;./data/minst&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Export MNIST data to a local folder using multi-threading.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        root (str, optional): Path to local folder. Defaults to &#x27;./data/minst&#x27;.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        os.makedirs(os.path.join(root, <span class="string">f&#x27;./<span class="subst">&#123;i&#125;</span>&#x27;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">    split_list = [<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;test&#x27;</span>]</span><br><span class="line">    data = &#123;</span><br><span class="line">        split: datasets.MNIST(</span><br><span class="line">            root=<span class="string">&#x27;./tmp&#x27;</span>,</span><br><span class="line">            train=split == <span class="string">&#x27;train&#x27;</span>,</span><br><span class="line">            download=<span class="literal">True</span></span><br><span class="line">        ) <span class="keyword">for</span> split <span class="keyword">in</span> split_list</span><br><span class="line">    &#125;</span><br><span class="line">    total = <span class="built_in">sum</span>([<span class="built_in">len</span>(data[split]) <span class="keyword">for</span> split <span class="keyword">in</span> split_list])</span><br><span class="line">    <span class="keyword">with</span> tqdm(total=total) <span class="keyword">as</span> pbar:</span><br><span class="line">        <span class="keyword">with</span> ThreadPoolExecutor() <span class="keyword">as</span> tp:</span><br><span class="line">            <span class="keyword">for</span> split <span class="keyword">in</span> split_list:</span><br><span class="line">                <span class="keyword">for</span> index, (image, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(data[split]):</span><br><span class="line">                    tmp = os.path.join(root, <span class="string">f&#x27;<span class="subst">&#123;label&#125;</span>/<span class="subst">&#123;split&#125;</span>_<span class="subst">&#123;index&#125;</span>.png&#x27;</span>)</span><br><span class="line">                    tp.submit(image.save, tmp).add_done_callback(</span><br><span class="line">                        <span class="keyword">lambda</span> func: pbar.update()</span><br><span class="line">                    )</span><br><span class="line">    shutil.rmtree(<span class="string">&#x27;./tmp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mnist_export(<span class="string">&#x27;./data/minst&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="参考-References">参考 | References</h2>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p><a class="link"   href="https://docs.python.org/3/library/os.html" >https://docs.python.org/3/library/os.html<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://docs.python.org/3/library/shutil.html#shutil.rmtree" >https://docs.python.org/3/library/shutil.html#shutil.rmtree<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://tqdm.github.io/" >https://tqdm.github.io/<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://pytorch.org/vision/stable/datasets.html#mnist" >https://pytorch.org/vision/stable/datasets.html#mnist<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p><a class="link"   href="https://docs.python.org/3/library/concurrent.futures.html" >https://docs.python.org/3/library/concurrent.futures.html<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
</blockquote>
<h2 id="下载-Download">下载 | Download</h2>
<blockquote>
<p><a class="link"   href="https://fastly.jsdelivr.net/gh/XavierJiezou/pytorch-lstm-examples@main/data/mnist.7z" >https://fastly.jsdelivr.net/gh/XavierJiezou/pytorch-lstm-examples@main/data/mnist.7z<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>mnist</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】遍历文件夹下的所有文件（glob）</title>
    <url>/2022/04/03/%E3%80%90Python%E3%80%91%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%88glob%EF%BC%89/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%88glob%EF%BC%89/Python-Logo.png"
                      alt="cover"
                ></p>
<h2 id="引言-15">引言</h2>
<p>若文件夹下没有子文件夹，则遍历其下文件的最好方法是 <code>os.listdir()</code>。但如果文件夹下有子文件夹，并且还想用正则匹配的话，使用 Python 内置标准模块 <code>glob</code> 是最好的选择。</p>
<h2 id="安装-18">安装</h2>
<p>不需要安装，Python 内置标准模块。</p>
<h2 id="用法-8">用法</h2>
<p>glob 模块可根据 Unix 终端所用规则找出所有匹配特定模式的路径名，但会按<strong>不确定</strong>的顺序返回结果。此外，glob 还支持三种正则匹配模式：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>*</code>：匹配 0 个或多个字符</p>
</li>
<li class="lvl-2">
<p><code>?</code>：匹配单个字符</p>
</li>
<li class="lvl-2">
<p><code>[]</code>：匹配指定范围内的字符，如 [0-9] 匹配数字，[a-z] 匹配字母</p>
</li>
</ul>
<hr>
<p><strong>测试样例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root:.</span><br><span class="line">│  1.gif</span><br><span class="line">│  2.txt</span><br><span class="line">│  cart.gif</span><br><span class="line">└──sub</span><br><span class="line">        3.txt</span><br><span class="line">        4.gif</span><br></pre></td></tr></table></figure>
<p><strong>实战代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 遍历 root 目录</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/*&#x27;</span>)  </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>, <span class="string">&#x27;root\\cart.gif&#x27;</span>, <span class="string">&#x27;root\\sub&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下的所有文件（不含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/*.*&#x27;</span>)                        </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>, <span class="string">&#x27;root\\cart.gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下的所有文件（包含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/**/*.*&#x27;</span>, recursive=<span class="literal">True</span>)     </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>, <span class="string">&#x27;root\\cart.gif&#x27;</span>, <span class="string">&#x27;root\\sub\\3.txt&#x27;</span>, <span class="string">&#x27;root\\sub\\4.gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下的所有 .gif 后缀的文件（不含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/*.gif&#x27;</span>)    </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\cart.gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下的所有 .gif 后缀的文件（包含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/**/*.gif&#x27;</span>, recursive=<span class="literal">True</span>) </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\cart.gif&#x27;</span>, <span class="string">&#x27;root\\sub\\4.gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下以数字命名的所有文件（不含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/[0-9].*&#x27;</span>)   </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下以数字命名的所有文件（包含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/**/[0-9].*&#x27;</span>, recursive=<span class="literal">True</span>) </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>, <span class="string">&#x27;root\\sub\\3.txt&#x27;</span>, <span class="string">&#x27;root\\sub\\4.gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下文件名为单个字符的所有文件（不含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/?.*&#x27;</span>)  </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下文件名为单个字符的所有文件（包含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/**/?.*&#x27;</span>, recursive=<span class="literal">True</span>) </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>, <span class="string">&#x27;root\\sub\\3.txt&#x27;</span>, <span class="string">&#x27;root\\sub\\4.gif&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="注意-4">注意</h2>
<div class="warning">
<p><strong>警告</strong><br>
glob.glob() 返回结果（列表类型）的顺序是不确定的。想要确定的返回顺序，可以使用 sorted() 或 .sort() 进一步排序处理。</p>
</div>
<h2 id="参考-18">参考</h2>
<blockquote>
<p><a class="link"   href="https://docs.python.org/zh-cn/3/library/glob.html" >https://docs.python.org/zh-cn/3/library/glob.html<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-18">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-18">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%88glob%EF%BC%89/%E3%81%97%E3%81%8D%E3%81%AA%E3%81%97%E3%82%85%E3%83%BC%E3%81%84%E3%81%A1-pixiv.net-71253216.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】しきなしゅーいち 【P站ID】71253216</div>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>glob</tag>
      </tags>
  </entry>
  <entry>
    <title>【Squoosh】谷歌开源在线图片压缩工具</title>
    <url>/2022/03/04/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/Squoosh%20Logo.png"
                      alt="cover"
                ></p>
<h2 id="简介-9">简介</h2>
<p><a class="link"   href="https://squoosh.app/" >Squoosh<i class="fas fa-external-link-alt"></i></a>是一个图像压缩 web 应用程序，通过多种格式减少图像大小。其功能特性如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>压缩：较小的图像意味着更快的加载时间。Squoosh 可以减少文件大小并保持高质量。</p>
</li>
<li class="lvl-2">
<p>简易：操作简单。打开图像，设置压缩参数，检查压缩前后图像的差异，最后保存即可。</p>
</li>
<li class="lvl-2">
<p>安全：没有隐私泄露的问题。图像不会被发送到服务器，其压缩过程是在本地浏览器进行的。</p>
</li>
</ul>
<h2 id="使用-2">使用</h2>
<h3 id="squoosh-app（在线压缩）">squoosh.app（在线压缩）</h3>
<ol>
<li class="lvl-3">
<p>打开<a class="link"   href="https://squoosh.app/" >Squoosh<i class="fas fa-external-link-alt"></i></a>官网。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/1646398184591.png"
                      alt="image"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>点击中间带加号的图标从本地选择待压缩的图像（或直接将本地图像拖拽到该位置）。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/1646398595072.png"
                      alt="image"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>窗口右下角设置压缩选项，左右拖动正中间的双三角按钮可对比压缩前后的画质，如果觉得压缩后的大小还合适，而且图片质量也能接受，下载即可。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/1646399813389.png"
                      alt="image"
                ></p>
<hr>
<table>
<thead>
<tr>
<th>压缩前</th>
<th>压缩后</th>
</tr>
</thead>
<tbody>
<tr>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/rimuu-pixiv.net-84845691.png"
                      alt="压缩前"
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/rimuu-pixiv.net-84845691.jpg"
                      alt="压缩后"
                ></td>
</tr>
</tbody>
</table>
<h3 id="Squoosh-CLI（离线压缩）">Squoosh CLI（离线压缩）</h3>
<blockquote>
<p>如果有很多图片需要批量压缩的话，就不建议一张一张地上传到网站上进行处理了，这样太没效率了，推荐使用 Squoosh CLI 工具进行批压缩。</p>
<p>Squoosh CLI 可以通过命令行的方式运行 Squoosh web 应用程序上的所有编解码器。它使用工作池来并行处理图像，可以将同一个编解码器应用与多张图像。</p>
<p>Squoosh CLI 虽然不是目前最快的图像压缩工具，当然也不打算成为，但是它的速度足以同时压缩很多张图像。</p>
</blockquote>
<h4 id="安装-19">安装</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g @squoosh/cli</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx @squoosh/cli &lt;options...&gt;</span><br></pre></td></tr></table></figure>
<h4 id="用法-9">用法</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: squoosh-cli [options] &lt;files...&gt;</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                                          output the version number</span><br><span class="line">  -d, --output-dir &lt;dir&gt;                                 Output directory (default: &quot;.&quot;)</span><br><span class="line">  -s, --suffix &lt;suffix&gt;                                  Append suffix to output files (default: &quot;&quot;)</span><br><span class="line">  --max-optimizer-rounds &lt;rounds&gt;                        Maximum number of compressions to use for auto optimizations (default: &quot;6&quot;)</span><br><span class="line">  --optimizer-butteraugli-target &lt;butteraugli distance&gt;  Target Butteraugli distance for auto optimizer (default: &quot;1.4&quot;)</span><br><span class="line">  --resize [config]                                      Resize the image before compressing</span><br><span class="line">  --quant [config]                                       Reduce the number of colors used (aka. paletting)</span><br><span class="line">  --rotate [config]                                      Rotate image</span><br><span class="line">  --mozjpeg [config]                                     Use MozJPEG to generate a .jpg file with the given configuration</span><br><span class="line">  --webp [config]                                        Use WebP to generate a .webp file with the given configuration</span><br><span class="line">  --avif [config]                                        Use AVIF to generate a .avif file with the given configuration</span><br><span class="line">  --jxl [config]                                         Use JPEG-XL to generate a .jxl file with the given configuration</span><br><span class="line">  --wp2 [config]                                         Use WebP2 to generate a .wp2 file with the given configuration</span><br><span class="line">  --oxipng [config]                                      Use OxiPNG to generate a .png file with the given configuration</span><br><span class="line">  -h, --help                                             display help for command</span><br></pre></td></tr></table></figure>
<h4 id="示例-2">示例</h4>
<ol>
<li class="lvl-3">
<p>单图压缩</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">squoosh-cli --webp auto .\test.png</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>--webp</code>：选择编解码器类型为 webp</p>
</li>
<li class="lvl-2">
<p><code>auto</code>：编解码器的优化参数，auto 是自动优化的意思</p>
</li>
<li class="lvl-2">
<p><code>.\test.png</code>：待压缩的图片</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/1646447598093.png"
                      alt="image"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>批量压缩</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">squoosh-cli --webp auto .\logo\ -d .\output\</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>.\logo\</code>：待压缩的所有图片存放的文件夹</p>
</li>
<li class="lvl-2">
<p><code>-d</code>：指定压缩后图片的存放文件夹</p>
</li>
<li class="lvl-2">
<p><code>.\output\</code>：压缩后图片的存放文件夹</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/1646448210557.png"
                      alt="image"
                ></p>
<p>除使用 <code>auto</code> 参数自动配置编解码器的参数外，也可手动指定参数。不知道如何指定？Squoosh.app 其实直接提供了复制命令行的按钮，只需要先调整好参数，然后按下这个按钮，就可以了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/1646448485335.png"
                      alt="image"
                ></p>
<h2 id="关于-19">关于</h2>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【Squoosh】谷歌开源在线图片压缩工具/Mauve-pixiv.net-82756421.jpg"
                      width="100%"
                >
<div align="center" style="color: #ccc">【画师】Mauve 【P站ID】82756421</div>
]]></content>
      <categories>
        <category>application</category>
      </categories>
      <tags>
        <tag>image</tag>
        <tag>google</tag>
        <tag>squosh</tag>
        <tag>compression</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vscode】快速生成用于排版效果测试的随机文本</title>
    <url>/2022/03/20/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="引言-16">引言</h2>
<p>Vscode 中编写 HTML 时，输入 <code>lorem</code> 可自动生成“乱数假文”，即乱序的并没有实际含义的文本，但可提高排版测试的效率。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/1.gif"
                      alt="图1 Vscode 自带 Lorem"
                ></p>
<p>但 Vscode 自带的 <code>lorem</code> 仅支持 HTML 文件，不支持其它格式的文件，比如 Markdown 等。</p>
<p>因此，这里推荐 Vscode 中两款用于生成“乱数假文”的插件，一个用于英文，另一个是中文的。</p>
<h2 id="插件-2">插件</h2>
<h3 id="Lorem-ipsum">Lorem ipsum</h3>
<p>拓展中心搜索该插件名称并安装。<kbd>Ctrl+Shift+P</kbd> 调出控制台。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Lorem Ipsum: Insert a line（插入一行）</p>
</li>
<li class="lvl-2">
<p>Lorem Ipsum: Insert a paragraph（插入一段）</p>
</li>
<li class="lvl-2">
<p>Lorem Ipsum: Insert multiple paragraphs（插入多段）</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/1.gif"
                      alt="图2 English Lorem"
                ></p>
<h3 id="Chinese-Lorem">Chinese Lorem</h3>
<p>拓展中心搜索该插件名称并安装。<kbd>Ctrl+Shift+P</kbd> 调出控制台。</p>
<p>输入 <code>Insert Lorem</code> 后选择汉字字符总长度即可插入汉字的乱数假文。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/1.gif"
                      alt="图3 Chinese Lorem"
                ></p>
<h2 id="关于-20">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-19">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/%E3%81%B5%E3%81%87%E3%81%82%E3%82%8A%E3%81%83%E3%81%82%E3%81%84%EF%BC%A0%E5%9C%9F%E6%9B%9C%E5%8D%97%E3%83%8A41a-pixiv.net-74663991.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】土曜南ナ41a 【P站ID】74663991</div>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>lorem</tag>
      </tags>
  </entry>
  <entry>
    <title>【Windows】DNS优选（挑选最合适的DNS服务器）</title>
    <url>/2022/03/19/%E3%80%90Windows%E3%80%91DNS%E4%BC%98%E9%80%89%E6%8F%90%E9%AB%98%E4%B8%8A%E7%BD%91%E9%80%9F%E5%BA%A6%EF%BC%88%E6%8C%91%E9%80%89%E6%9C%80%E5%90%88%E9%80%82%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id="引言-17">引言</h2>
<p>笔者在之前的文章<a href="/%E8%AF%A6%E8%A7%A3DNS%E6%9C%8D%E5%8A%A1%E3%80%81DNS%E8%A7%A3%E6%9E%90%E3%80%81DNS%E5%8A%AB%E6%8C%81%E5%92%8C%E6%B1%A1%E6%9F%93/">详解DNS服务、DNS解析、DNS劫持和污染</a>中已经详细介绍过 DNS 了，今天给大家带来一款免费的 DNS 优选工具（仅适用 Windows），帮助大家提高上网速度，拒绝 DNS 劫持，获得更佳的上网体验。</p>
<h2 id="下载-4">下载</h2>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>官网地址：<a class="link"   href="https://www.lanzoux.com/DNS" >点击下载<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p>备用地址：<a class="link"   href="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91DNS%E4%BC%98%E9%80%89%E6%8F%90%E9%AB%98%E4%B8%8A%E7%BD%91%E9%80%9F%E5%BA%A6%EF%BC%88%E6%8C%91%E9%80%89%E6%9C%80%E5%90%88%E9%80%82%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/DNS%E4%BC%98%E9%80%89.exe" >点击下载<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
</blockquote>
<h2 id="用法-10">用法</h2>
<ol>
<li class="lvl-3">
<p>下载软件后，鼠标右击以<strong>管理员</strong>身份运行</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91DNS%E4%BC%98%E9%80%89%E6%8F%90%E9%AB%98%E4%B8%8A%E7%BD%91%E9%80%9F%E5%BA%A6%EF%BC%88%E6%8C%91%E9%80%89%E6%9C%80%E5%90%88%E9%80%82%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/1647692107520.png"
                      alt="图1 以管理员身份运行软件"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>如果插的网线，网络连接就选<strong>以太网</strong>；如果连接的 <strong>WIFI</strong>，网络连接就选 <strong>WLAN</strong>。然后<strong>点击更新 DNS 列表</strong>，更新完成后点击 <strong>DNS 测试</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91DNS%E4%BC%98%E9%80%89%E6%8F%90%E9%AB%98%E4%B8%8A%E7%BD%91%E9%80%9F%E5%BA%A6%EF%BC%88%E6%8C%91%E9%80%89%E6%9C%80%E5%90%88%E9%80%82%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/1647692238773.png"
                      alt="图2 DNS 测速"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>这里可以看到，对于笔者的电脑，阿里 DNS 延迟是最低的，右击<strong>将此 DNS 设置为系统 DNS</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91DNS%E4%BC%98%E9%80%89%E6%8F%90%E9%AB%98%E4%B8%8A%E7%BD%91%E9%80%9F%E5%BA%A6%EF%BC%88%E6%8C%91%E9%80%89%E6%9C%80%E5%90%88%E9%80%82%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/1647692372349.png"
                      alt="图3 选择最佳 DNS"
                ></p>
<ol start="4">
<li class="lvl-3">
<p>确定更换系统 DNS</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91DNS%E4%BC%98%E9%80%89%E6%8F%90%E9%AB%98%E4%B8%8A%E7%BD%91%E9%80%9F%E5%BA%A6%EF%BC%88%E6%8C%91%E9%80%89%E6%9C%80%E5%90%88%E9%80%82%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/1647692408243.png"
                      alt="图4 确定设置 DNS"
                ></p>
<ol start="5">
<li class="lvl-3">
<p>确定刷新网卡信息</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91DNS%E4%BC%98%E9%80%89%E6%8F%90%E9%AB%98%E4%B8%8A%E7%BD%91%E9%80%9F%E5%BA%A6%EF%BC%88%E6%8C%91%E9%80%89%E6%9C%80%E5%90%88%E9%80%82%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/1647692426482.png"
                      alt="图5 刷新网卡信息"
                ></p>
<h2 id="参考-19">参考</h2>
<blockquote>
<p><a class="link"   href="https://www.52pojie.cn/thread-976081-1-1.html" >[原创工具] DNS优选(挑选最合适的DNS服务器,拒绝DNS劫持)<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-21">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-20">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91DNS%E4%BC%98%E9%80%89%E6%8F%90%E9%AB%98%E4%B8%8A%E7%BD%91%E9%80%9F%E5%BA%A6%EF%BC%88%E6%8C%91%E9%80%89%E6%9C%80%E5%90%88%E9%80%82%E7%9A%84DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/%E3%81%9F%E3%82%84-pixiv.net-73700933.jpg"
                      alt="anime"
                ></p>
<div align="center" style="color: #ccc">【画师】たや 【P站ID】73700933</div>
]]></content>
      <categories>
        <category>application</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>application</tag>
        <tag>network</tag>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>【Windows】合并分区教程（解决C盘空间不足）</title>
    <url>/2022/03/21/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/Windows_Logo.jpg"
                      alt="logo"
                ></p>
<h2 id="引言-18">引言</h2>
<p>不知道你有没有遇到过 C 盘空间不足，经常需要清理的情况。即使你不将软件和数据放到 C 盘，随着 Windows 系统的更新，C 盘存放的东西也会越来越多。今天，笔者给大家带来 Windows 磁盘合并分区的教程，让你不再为 C 盘的空见不足而烦恼。</p>
<h2 id="教程-11">教程</h2>
<h3 id="通过磁盘管理合并分区">通过磁盘管理合并分区</h3>
<div class="warning">
<p><strong>警告</strong><br>
该方法有限制条件：要求待合并的分区必须相邻。</p>
</div>
<ol>
<li class="lvl-3">
<p><kbd>WIN+R</kbd> 打开运行，输入 <code>diskmgmt.msc</code> 点击<strong>确定</strong>，打开<strong>磁盘管理</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647838040533.png"
                      alt="1_1"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>可以看到我这里有 3 个磁盘卷：卷 C，卷 D，以及两者之间的一个卷（恢复分区）</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647838122371.png"
                      alt="1_2"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>我这里想将 D 盘合并到 C 盘，那么先要删除 D 盘对应的卷</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647838353409.png"
                      alt="1_3"
                ></p>
<ol start="4">
<li class="lvl-3">
<p>删除卷会格式化 D 盘，因此请先备份重要的文件</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647838443621.png"
                      alt="1_4"
                ></p>
<ol start="5">
<li class="lvl-3">
<p>删除卷后该卷就变成了一个待分配的可用空间</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647838758165.png"
                      alt="1_5"
                ></p>
<ol start="6">
<li class="lvl-3">
<p>鼠标右击 C 盘选择<strong>拓展卷</strong>，添加上一步删除的卷即可完成分区的合并</p>
</li>
</ol>
<div class="warning">
<p><strong>警告</strong><br>
但是，我这里 C 盘和 D 盘并不相邻，中间有个恢复分区挡着，因此就无法合并了，需要利用第三方工具，如分区助手，下面是<a class="link"   href="https://www.disktool.cn/" >分区助手<i class="fas fa-external-link-alt"></i></a>合并分区的教程。</p>
</div>
<h3 id="通过分区助手合并分区">通过分区助手合并分区</h3>
<ol>
<li class="lvl-3">
<p>鼠标右击 D 盘选择<strong>删除分区</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647840036883.png"
                      alt="2_1"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>点击<strong>确定</strong>（默认输出分区而不删除数据，当然如果你不需要这些数据或者已经备份，那可以直接删掉）</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647840097711.png"
                      alt="2_2"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>右击 C 盘，选择<strong>合并分区</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647840182347.png"
                      alt="2_3"
                ></p>
<ol start="4">
<li class="lvl-3">
<p>勾选<strong>未分配空间</strong>，点击<strong>确定</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647840250702.png"
                      alt="2_4"
                ></p>
<ol start="5">
<li class="lvl-3">
<p>点击左上角的<strong>提交</strong>，点击<strong>执行</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647840977415.png"
                      alt="2_5"
                ></p>
<ol start="6">
<li class="lvl-3">
<p>执行完成，点击<strong>确定</strong><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647841622904.png"
                      alt="2_6"
                ></p>
</li>
</ol>
<h2 id="注意-5">注意</h2>
<div class="warning">
<p><strong>警告</strong><br>
只有同一磁盘的分区才能合并，不同磁盘的分区不能合并。例如，磁盘 0 里面的多个子分区是可以合并的，但是磁盘 0 不能与磁盘 1 合并。</p>
</div>
<p>笔者电脑是 128G 的固态硬盘加上 1T 的机械硬盘，系统安装到固态硬盘，这样使用起来会更快。但是 128G 太小了，即使我尽可能地将所有的软件都安装到机械硬盘，随着系统更新，固态硬盘也会经常爆满。</p>
<p>于是，我想着能不能用分区助手将机械硬盘合并到固态硬盘分区里，格式化机械硬盘并准备合并到固态硬盘的时候，却发现合并不了，因为是完全不同的两个磁盘。笔者算是替大家踩坑了，吃了没常识的亏。</p>
<p>后来，我了解到我电脑有两个硬盘插槽，一个是 <code>m.2</code> 接口的，一个是 <code>sata</code> 接口的。m.2 接口插的是 128 GB 的固态硬盘，sata 接口插的是 1T 的机械硬盘。128G 太小了不够用，合并分区的方法行不通，只能买一块更大容量的固态硬盘替换。花了 500 大洋买了 1T 的固态硬盘，拆机装上之后，再也不用担心 C 盘爆满问题了。</p>
<h2 id="拓展-6">拓展</h2>
<p>这里再简单拓展一下电脑知识。电脑的这五个硬件至关重要：CPU，内存条，磁盘，显卡以及显示器。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>CPU：电脑最核心的硬件，决定单个程序运行的速度。CPU越好，你的 QQ 就运行越快。</p>
</li>
<li class="lvl-2">
<p>内存条：内存越大，同时运行多个程序才不卡。</p>
</li>
<li class="lvl-2">
<p>磁盘：数据的存储离不开磁盘。QQ 消息的历史纪录都需要保存在磁盘里面。</p>
</li>
<li class="lvl-2">
<p>显卡：控制屏幕显示。好的显卡可以让你玩大型游戏时不掉帧。</p>
</li>
<li class="lvl-2">
<p>显示器：高分辨率和高色域的显示器看起来更舒服。</p>
</li>
</ul>
<p>如果你感觉你的电脑很卡，那么最常规的方案就是加装内存条和固态硬盘，在不换电脑（CPU）的前提下，这是最经济的选择。</p>
<h2 id="关于-22">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-21">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/%E5%8C%97%E5%BD%A9%E3%81%82%E3%81%84%EF%BC%A0%E3%81%8A%E4%BB%95%E4%BA%8B%E5%8B%9F%E9%9B%86%E4%B8%AD-pixiv.net-73436361.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】北彩あい 【P站ID】73436361</div>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>disk</tag>
      </tags>
  </entry>
  <entry>
    <title>【Windows】回收站添加快捷键B</title>
    <url>/2022/03/16/%E3%80%90Windows%E3%80%91%E5%9B%9E%E6%94%B6%E7%AB%99%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AEB/</url>
    <content><![CDATA[<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【Windows】回收站添加快捷键B/1647413641922.png"
                      width="100%"
                >
<h2 id="引言-19">引言</h2>
<p>win7 的回收站绑定的有快捷键 B，鼠标右击回收站并按下键盘上的 B，即可快速清空回收站，而 win10 或 win11 等取消了这一快捷键。上一篇文章中，已经教会了大家<a href="/2022/03/15/%E3%80%90Windows%E3%80%91%E7%BB%99%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE/">如何给右键菜单添加快捷键</a>。今天，我们在此教程的基础上教大家如何给回收站添加快捷键 B。</p>
<h2 id="准备">准备</h2>
<blockquote>
<p>请先阅读之前发的这篇文章：<a href="/2022/03/15/%E3%80%90Windows%E3%80%91%E7%BB%99%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE/">【Windows】给右键菜单添加快捷键</a></p>
</blockquote>
<h2 id="教程-12">教程</h2>
<ol>
<li class="lvl-3">
<p>打开<strong>Windows 右键菜单管理程序</strong>，点击<strong>回收站-&gt;清空回收站-&gt;⚙-&gt;详细信息-&gt;注册表位置</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%9B%9E%E6%94%B6%E7%AB%99%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AEB/1647413207853.png"
                      alt="图1 windows 右键菜单管理"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>在<strong>默认-&gt;数据</strong>清空回收站后面添加<code>(&amp;B)</code></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%9B%9E%E6%94%B6%E7%AB%99%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AEB/1647413367613.png"
                      alt="图2 修改默认数据"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>重命名<code>MUIVerb</code>为<code>MUIVerb-backup</code></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%9B%9E%E6%94%B6%E7%AB%99%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AEB/1647413472006.png"
                      alt="图3 重命名 MUIVerb"
                ></p>
<ol start="4">
<li class="lvl-3">
<p>返回桌面，鼠标右击回收站图标即可看到新添加的快捷键B，并且可以正常使用</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%9B%9E%E6%94%B6%E7%AB%99%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AEB/1647413641922.png"
                      alt="图4 快捷键添加完成"
                ></p>
<h2 id="关于-23">关于</h2>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【Windows】回收站添加快捷键B/胡麻乃りお-pixiv.net-78179646.jpg"
                      width="100%"
                >
<div align="center" style="color: #ccc">【画师】胡麻乃りお 【P站ID】78179646</div>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>recycle</tag>
        <tag>shortcut</tag>
      </tags>
  </entry>
  <entry>
    <title>【Windows】给右键菜单添加快捷键</title>
    <url>/2022/03/15/%E3%80%90Windows%E3%80%91%E7%BB%99%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<img  src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【Windows】给右键菜单添加快捷键/ContextMenuManager_Logo.png" width="100%" 
                     lazyload
                     src="/images/loading.svg"
                     data-src="封面"
                     
                >
<h2 id="引言-20">引言</h2>
<p>右键菜单是鼠标右击桌面、文件、文件夹、目录以及回收站等出现的菜单选项。</p>
<p>例如，我们在 Windows 系统的桌面右击时会出现以下菜单选项：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E7%BB%99%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE/1647328099126.png"
                      alt="图1 桌面右击菜单"
                ></p>
<p>此时，我们直接用鼠标左键点击刷新即可实现桌面的刷新。</p>
<p>同样，我们使用快捷键 E 也可以刷新，会比鼠标左击更快。</p>
<p>但是，我们也发现部分菜单选项，如 <code>Git GUI Here</code> 和 <code>通过 Code 打开</code> 等没有对应的快捷键。</p>
<p>今天，笔者教大家如何为这些菜单选项设置快捷键，以提升工作效率。</p>
<h2 id="准备-2">准备</h2>
<p>开始之前，我们需要先下载一个 Windows 右键菜单管理程序：<a class="link"   href="https://gitee.com/BluePointLilac/ContextMenuManager/releases" >ContextMenuManager<i class="fas fa-external-link-alt"></i></a>。</p>
<p>注意：程序分为<code>.NET3.5</code>版和<code>.NET4.0</code>版。win7 自带.NET3.5, win8、win8.1、win10 自带.NET4.0 以上版本。</p>
<p>其主要功能如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>启用或禁用文件、文件夹、新建、发送到、打开方式、自定义文件格式、IE 浏览器、WinX 等右键菜单项目</p>
</li>
<li class="lvl-2">
<p>对上述场景右键菜单项目进行修改名称、修改图标、导航注册表位置、导航文件位置、永久删除等操作</p>
</li>
<li class="lvl-2">
<p>对上述场景右键菜单自定义添加项目，自定义菜单命令</p>
</li>
</ul>
<p>接下来会以<code>目录-&gt;通过 Code 打开</code>为例展示如何添加快捷键。</p>
<h2 id="教程-13">教程</h2>
<ol>
<li class="lvl-3">
<p>首先我们可以看到<code>目录-&gt;通过 Code 打开</code>是没有快捷键的（意味着只能用鼠标左键点击）</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E7%BB%99%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE/1647329029556.png"
                      alt="图2 目录-&gt;通过 Code 打开没有快捷键"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>打开<code>Window 右键管理软件</code>，点击<code>目录-&gt;通过 Code 打开-&gt;⚙-&gt;详细信息-&gt;注册表位置</code></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E7%BB%99%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE/1647329172163.png"
                      alt="图2 目录-&gt;通过 Code 打开-&gt;⚙-&gt;详细信息-&gt;注册表位置"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>在<code>默认</code>数据<code>通过 Code 打开</code>后面添加 <code>(&amp;F)</code>，点击<strong>确定</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E7%BB%99%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE/1647329331870.png"
                      alt="图3 修改默认数据"
                ></p>
<ol start="4">
<li class="lvl-3">
<p>右键菜单快捷键添加完成，并且可以正常使用（即达到和鼠标左键点击一样的效果）</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E7%BB%99%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE/1647329479976.png"
                      alt="图4 右键菜单快捷键添加完成"
                ></p>
<h2 id="参考-20">参考</h2>
<blockquote>
<p><a class="link"   href="https://www.cnblogs.com/jhxxb/p/13451569.html" >https://www.cnblogs.com/jhxxb/p/13451569.html<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="关于-24">关于</h2>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【Windows】给右键菜单添加快捷键/shnva-pixiv.net-83471857.jpg"
                      width="100%"
                >
<div align="center" style="color: #ccc">【画师】shnva 【P站ID】83471857</div>]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>application</tag>
        <tag>contextmenumanager</tag>
      </tags>
  </entry>
  <entry>
    <title>【原创工具 | ys-dl】原神官方社区COS与同人图自动抓取（基于 Python 动态爬虫实现）</title>
    <url>/2022/05/18/%E3%80%90%E5%8E%9F%E5%88%9B%E5%B7%A5%E5%85%B7-ys-dl%E3%80%91%E5%8E%9F%E7%A5%9E%E5%AE%98%E6%96%B9%E7%A4%BE%E5%8C%BACOS%E4%B8%8E%E5%90%8C%E4%BA%BA%E5%9B%BE%E8%87%AA%E5%8A%A8%E6%8A%93%E5%8F%96%EF%BC%88%E5%9F%BA%E4%BA%8E-Python-%E5%8A%A8%E6%80%81%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
    <content><![CDATA[<p align="center">
    <img  alt="logo" 
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【原创工具-ys-dl】原神官方社区COS与同人图自动抓取（基于-Python-动态爬虫实现）/logo.ico"
                      
                >
    <h1 align="center">原神下载器</h1>
    <p align="center">一个可以从<a class="link"   href="https://bbs.mihoyo.com/ys/" >原神社区<i class="fas fa-external-link-alt"></i></a>自动抓取图片的命令行工具。
    </p>
</p>
<p align="center">
    <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/github/workflow/status/XavierJiezou/ys-dl/Release"
                      alt="GitHub Workflow Status"
                >
    <a
        href="https://www.codacy.com/gh/XavierJiezou/ys-dl/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=XavierJiezou/ys-dl&amp;utm_campaign=Badge_Grade">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://app.codacy.com/project/badge/Grade/c2f85c8d6b8a4892b40059703f087eab"
                      alt="Codacy Badge"
                >
    </a>
    <a href="https://codecov.io/gh/XavierJiezou/ys-dl">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://codecov.io/gh/XavierJiezou/ys-dl/branch/main/graph/badge.svg?token=QpCLcUGoYx"
                      alt="codecov"
                >
    </a>
    <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/pypi/pyversions/ys-dl"
                      alt="PyPI - Python Version"
                >
    <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/pypi/dm/ys-dl"
                      alt="PyPI - Downloads"
                >
    <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/pypi/v/ys-dl"
                      alt="PyPI"
                >
    <a href="https://github.com/XavierJiezou/ys-dl/stargazers">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/github/stars/XavierJiezou/ys-dl"
                      alt="GitHub stars"
                >
    </a>
    <a href="https://github.com/XavierJiezou/ys-dl/network">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/github/forks/XavierJiezou/ys-dl"
                      alt="GitHub forks"
                >
    </a>
    <a href="https://github.com/XavierJiezou/ys-dl/issues">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/github/issues/XavierJiezou/ys-dl"
                      alt="GitHub issues"
                >
    </a>
    <a href="https://github.com/XavierJiezou/ys-dl/blob/main/LICENSE">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img.shields.io/github/license/XavierJiezou/ys-dl"
                      alt="GitHub license"
                >
    </a>
    <br />
    <a href="https://www.python.org/">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ForTheBadge.com/images/badges/made-with-python.svg"
                      alt="forthebadge made-with-python"
                >
    </a>
        <a href="https://github.com/XavierJiezou">
        <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://ForTheBadge.com/images/badges/built-with-love.svg"
                      alt="ForTheBadge built-with-love"
                >
        </a>
    </p>
  <p align="center">
    <a href="#演示">观看演示</a>
    •
    <a class="link"   href="https://github.com/xavierjiezou/ys-dl/issues/new" >报告错误<i class="fas fa-external-link-alt"></i></a>
    •
    <a class="link"   href="https://github.com/xavierjiezou/ys-dl/issues/new" >功能需求<i class="fas fa-external-link-alt"></i></a>
  </p>
  <p align="center">
    <a href="/docs/README.en.md">English </a>
    •
    <a href="/docs/README.cn.md">简体中文</a>
  </p>
</p>
<p align="center">喜欢这个项目吗？请考虑捐赠<a href="https://paypal.me/xavierjiezou?country.x=C2&locale.x=zh_XC">（<a class="link"   href="https://fastly.jsdelivr.net/gh/XavierJiezou/ys-dl@main/image/wechat.jpg" >微信<i class="fas fa-external-link-alt"></i></a> | <a class="link"   href="https://fastly.jsdelivr.net/gh/XavierJiezou/ys-dl@main/image/alipay.jpg" >支付宝<i class="fas fa-external-link-alt"></i></a>）</a>，以帮助它改善！
<hr>
<h2 id="引言-21">引言</h2>
<p>这是笔者基于 Python 开发的第二个开源工具了。本工具参考 <code>youtube-dl</code>（一个开源的 youtube 视频下载器）的命名方式，取名为 <code>ys-dl</code>，全称 <code>Yuanshen-Downloader</code>，译为原神下载器。</p>
<h2 id="简介-10">简介</h2>
<p>本工具可以从原神<a class="link"   href="https://bbs.mihoyo.com/ys/" >官方社区<i class="fas fa-external-link-alt"></i></a>（米游社）实现自动化COS 与同人图抓取与下载，适用于原神玩家与广大二次元爱好者。话不多说，直接上图。</p>
<h2 id="演示">演示</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90%E5%8E%9F%E5%88%9B%E5%B7%A5%E5%85%B7-ys-dl%E3%80%91%E5%8E%9F%E7%A5%9E%E5%AE%98%E6%96%B9%E7%A4%BE%E5%8C%BACOS%E4%B8%8E%E5%90%8C%E4%BA%BA%E5%9B%BE%E8%87%AA%E5%8A%A8%E6%8A%93%E5%8F%96%EF%BC%88%E5%9F%BA%E4%BA%8E-Python-%E5%8A%A8%E6%80%81%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%EF%BC%89/demo.png"
                      alt="demo"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90%E5%8E%9F%E5%88%9B%E5%B7%A5%E5%85%B7-ys-dl%E3%80%91%E5%8E%9F%E7%A5%9E%E5%AE%98%E6%96%B9%E7%A4%BE%E5%8C%BACOS%E4%B8%8E%E5%90%8C%E4%BA%BA%E5%9B%BE%E8%87%AA%E5%8A%A8%E6%8A%93%E5%8F%96%EF%BC%88%E5%9F%BA%E4%BA%8E-Python-%E5%8A%A8%E6%80%81%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%EF%BC%89/show.png"
                      alt="show"
                ></p>
<h2 id="安装-20">安装</h2>
<ol>
<li class="lvl-3">
<p>本程序基于 Python 开发，目前还没有打包为桌面应用程序，因此您的电脑需要安装有 Python 环境。【支持 3.7 及以上版本】</p>
</li>
<li class="lvl-3">
<p>使用 pip 包管理工具执行命令 <code>pip install ys-dl</code> 完成程序安装。</p>
</li>
<li class="lvl-3">
<p>本程序依赖于动态爬虫库 Selenium，因此还需要您下载并安装浏览器驱动（目前仅支持 Google Chrome 浏览器）【下载地址：<a class="link"   href="https://chromedriver.chromium.org/downloads" >点击跳转<i class="fas fa-external-link-alt"></i></a> | 安装方式：放到 Python 安装目录下或者是需要执行 <code>ys-dl</code> 命令的地方】</p>
</li>
</ol>
<h2 id="提示-4">提示</h2>
<p>下载 的 Chrome WebDriver 版本一定要和安装的谷歌浏览器的版本对应喔~~当然，保证大版本对应即可，小版本无需严格对应。非开发者且有强烈使用意愿的可以添加笔者博客主页的微信，笔者可以亲自帮你配置运行环境。</p>
<h2 id="申明">申明</h2>
<p>本程序是非常友好的爬虫程序，每下载一张图片都会强制休眠一小段时间，然后再进行下一张图片的下载。因此，正常使用并不会给原神社区的官方服务器施加多大压力。</p>
<h2 id="关于-25">关于</h2>
<details>
<summary>点击查看作者联系方式和微信公众号</summary>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>image</tag>
        <tag>python</tag>
        <tag>yuanshen</tag>
        <tag>mihoyo</tag>
        <tag>downloader</tag>
        <tag>game</tag>
        <tag>cos</tag>
      </tags>
  </entry>
  <entry>
    <title>【建站指南】解决个人网站图片加载缓慢的问题</title>
    <url>/2022/03/06/%E3%80%90%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%E3%80%91%E8%A7%A3%E5%86%B3%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><mark>2022年3月25日更新重大警告：Gitee 官方不让做图床了，开启的有防盗链机制。千万不要再使用 Gitee 做图床了，不然图片全部会失效。特别是想搭建个人博客的小伙伴，不要用 Gitee，使用其他图床或云存储等。</mark></p>
<h2 id="项目场景">项目场景</h2>
<p>最近笔者用 hexo 框架搭建了一个静态博客，方便发布博文和日常随笔。发文章自然少不了插入图片，因此在专门 GitHub 建了一个仓库作为图床来管理图片。</p>
<h2 id="问题描述">问题描述</h2>
<p>但 GitHub 在国内的访问速度很慢，这里可以考虑加上 <code>jsdelivr</code> 提供的免费 <code>CDN</code> 加速服务，笔者亲测加上后会有所提升，但大图的加载速度仍然很慢。</p>
<h2 id="原因分析">原因分析</h2>
<p>GitHub 的服务器在国外，所以在 GitHub 仓库中存储的图片的访问速度才会很慢。</p>
<h2 id="解决方案">解决方案</h2>
<p>找一家国内的代码托管平台作为我们的免费图床来替换 GitHub，这里自然就想到了<a class="link"   href="https://gitee.com/" >Gitee<i class="fas fa-external-link-alt"></i></a>。首先在 Gitee 里面新建一个仓库作为我们网站的图床，这个仓库里面只存图片，然后根据 Gitee 提供的图片 url 即可在线访问了。</p>
<h2 id="速度对比">速度对比</h2>
<h3 id="定性分析">定性分析</h3>
<p>这里分别给出同一张托管在不同平台的图片的链接，点击跳转即可感受到加载速度。</p>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>GitHub：<a class="link"   href="https://raw.githubusercontent.com/XavierJiezou/picx-image-hosting/main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/Mauve-pixiv.net-82756421.jpg" >点击跳转<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p>jsdelivr CDN：<a class="link"   href="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/Mauve-pixiv.net-82756421.jpg" >点击跳转<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p>Gitee：<a class="link"   href="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Squoosh%E3%80%91%E8%B0%B7%E6%AD%8C%E5%BC%80%E6%BA%90%E5%9C%A8%E7%BA%BF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/Mauve-pixiv.net-82756421.jpg" >点击跳转<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
</blockquote>
<h3 id="定量分析">定量分析</h3>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>GitHub 图片托管网站地址：<code>raw.githubusercontent.com</code></p>
</li>
<li class="lvl-2">
<p>jsdelivr CDN 网站地址：<code>fastly.jsdelivr.net</code></p>
</li>
<li class="lvl-2">
<p>Gitee 图片托管网站地址：<code>gitee.com</code></p>
</li>
</ul>
</blockquote>
<p>分别使用站长工具对上述网站地址进行对比测试，其结果如下：</p>
<blockquote>
<p>GitHub VS jsdelivr：<a class="link"   href="https://tool.chinaz.com/speedcom/raw.githubusercontent.com-fastly.jsdelivr.net" >在线报告<i class="fas fa-external-link-alt"></i></a><br>
jsdelivr VS Gitee：<a class="link"   href="https://tool.chinaz.com/speedcom/fastly.jsdelivr.net-gitee.com" >在线报告<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%E3%80%91%E8%A7%A3%E5%86%B3%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1646540402066.png"
                      alt="图1"
                ></p>
<center>图1 GitHub VS jsdelivr</center>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%E3%80%91%E8%A7%A3%E5%86%B3%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/1646540678798.png"
                      alt="图2"
                ></p>
<center>图2 jsdelivr VS Gitee</center>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>gitee</tag>
        <tag>image host</tag>
        <tag>jsdivr cdn</tag>
      </tags>
  </entry>
  <entry>
    <title>固态硬盘信息查验和速度测试</title>
    <url>/2022/03/28/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="引言-22">引言</h2>
<p>今天，笔者新购入的 1T 固态硬盘到货了。检查一下是否是全新的，容量是否达标，速度是否和商家描述的差不多，顺便出一期教程分享给大家。</p>
<h2 id="准备-3">准备</h2>
<p>我们需要用到两款软件，分别是 CrystalDiskInfo 和 CrystalDiskMark，前者用来查看硬盘信息和使用状况，后者用于对硬盘进行性能（速度）测试。（下载地址：<a class="link"   href="https://crystalmark.info/" >https://crystalmark.info/<i class="fas fa-external-link-alt"></i></a>）</p>
<div class="tips">
<p><strong>提示</strong><br>
两个软件都是同一个作者开发的，有标准版和萌妹子版可供选择，对于喜欢二次元的同学推荐入手萌妹子版，都是免费的，只不过萌妹子版的安装包体积会大很多。</p>
</div>
<h2 id="教程-14">教程</h2>
<p>分别测试电脑原装的已经用了很久的 128G 固态硬盘和 1T 机械硬盘，以及新买的 1T 固态硬盘的性能，对比结果如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>128G SSD</th>
<th>1T HHD</th>
<th>1T SSD</th>
</tr>
</thead>
<tbody>
<tr>
<td>硬盘信息</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/128g-ssd-info.png"
                      alt="128g-ssd-info"
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/1t-hhd-info.png"
                      alt="1t-hhd-info"
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/1t-ssd-info.png"
                      alt="1t-ssd-info"
                ></td>
</tr>
<tr>
<td>速度测试</td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/128g-ssd-speed.png"
                      alt="128g-ssd-speed"
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/1t-hhd-speed.png"
                      alt="1t-hhd-speed"
                ></td>
<td><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/1t-ssd-speed.png"
                      alt="1t-ssd-speed"
                ></td>
</tr>
</tbody>
</table>
<p>对于新买的固态硬盘，商家给出的连续读写速度如下，和我们测试结果相差不大，说明这个硬盘没什么问题。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/good.jpg"
                      alt="good"
                ></p>
<h2 id="参考-21">参考</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/ref-1.jpg"
                      alt="ref1"
                ><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/ref-2.jpg"
                      alt="ref2"
                ></p>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-DNOGGypEszSJLwwe" src="https://player.bilibili.com/player.html?bvid=BV1yZ4y1D72e&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-DNOGGypEszSJLwwe").style.height=document.getElementById("mmedia-DNOGGypEszSJLwwe").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-DNOGGypEszSJLwwe").style.height=document.getElementById("mmedia-DNOGGypEszSJLwwe").scrollWidth*0.76+"px";
    }; </script>
<h2 id="关于-26">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-22">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/%E8%97%A4%E5%8E%9F-pixiv.net-80545109.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】藤原 【P站ID】80545109</div>
]]></content>
      <categories>
        <category>application</category>
      </categories>
      <tags>
        <tag>application</tag>
        <tag>ssd</tag>
      </tags>
  </entry>
  <entry>
    <title>好用且免费的GitHub加速工具汇总</title>
    <url>/2022/03/14/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/好用且免费的GitHub加速工具汇总/GitHub-Logo.png"
                      width="100%"
                >
<h2 id="引言-23">引言</h2>
<p>由于 DNS 污染和其它原因导致国内 GitHub 访问速度缓慢，有时甚至无法访问。常见的问题有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>浏览 GitHub 仓库时图片加载缓慢或无法加载</p>
</li>
<li class="lvl-2">
<p>克隆仓库代码缓慢或无法克隆（git clone）</p>
</li>
<li class="lvl-2">
<p>向仓库提交代码缓慢或无法提交（git push）</p>
</li>
</ul>
<p>基于此，本文汇总了目前网上好用且免费的五款 GitHub 加速工具并分享给大家。</p>
<h2 id="工具">工具</h2>
<h3 id="网易-UU-加速器">网易 UU 加速器</h3>
<h4 id="简介-11">简介</h4>
<p>这个软件想必很多玩游戏的小伙伴都听说过或用过。除游戏加速外，它还支持加速 GitHub，只不过加速 GitHub 的功能现在与<strong>学术资源</strong>加速合并了。</p>
<h4 id="功能">功能</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>github 直连，git push，git pull 加速</p>
</li>
<li class="lvl-2">
<p>学术资源加速（Sci-Hub，IEEE，TED，arXiv，Kaggle，ScienceDirect，Skype……）</p>
</li>
<li class="lvl-2">
<p>网游加速</p>
</li>
</ul>
<h4 id="用法-11">用法</h4>
<ol>
<li class="lvl-3">
<p>去<a class="link"   href="https://uu.163.com/" >官网<i class="fas fa-external-link-alt"></i></a>下载软件安装包</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/1648277881532.png"
                      alt="1_1"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>安装之后打开，注册账号登录，搜索框输入<strong>学术资源</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/1648277962000.png"
                      alt="1_2"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>可以看到加速之后的延迟是非常低的，快去试试访问 GitHub 吧</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/1648278008225.png"
                      alt="1_3"
                ></p>
<h3 id="Steam">Steam++</h3>
<h4 id="简介-12">简介</h4>
<p>从名字就知道，这款软件是专门用来加速 Steam 游戏的，但除此之外，还能加速很多在国内访问受限的服务。例如微软的 GitHub，微软应用商店和微软 onedrive 云盘，Pixiv 插画网站，Imgur 图床等等。</p>
<h4 id="功能-2">功能</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>本地加速：使 Steam 社区、 Github 、谷歌验证码等国内难以访问的网页正常访问。功能类似 steamcommunit302 ，使用 Titanium-Web-Proxy 开源项目进行本地反代。</p>
</li>
<li class="lvl-2">
<p>脚本配置：通过加速服务拦截网络请求将一些 JS 脚本注入在网页中，提供类似网页插件的功能。</p>
</li>
<li class="lvl-2">
<p>账号切换：一键切换已在当前 PC 上登录过的 Steam 账号，与管理家庭共享库排序等功能。</p>
</li>
<li class="lvl-2">
<p>本地令牌：让您的手机令牌统一保存在电脑中，目前仅支持 Steam 令牌，后续会开发支持更多的令牌种类与云同步令牌。</p>
</li>
<li class="lvl-2">
<p>库存管理：您直接管理到 Steam 游戏库存，不仅能够下载老版本的 Steam 游戏，也能够对 Steam 游戏成就进行直接管理，支持解锁成就以及反解锁成就。</p>
</li>
<li class="lvl-2">
<p>自动挂卡：集成 ArchiSteamFarm 在应用内提供 挂机掉落 Steam 集换式卡牌 等功能。</p>
</li>
</ul>
<h4 id="用法-12">用法</h4>
<ol>
<li class="lvl-3">
<p>从<a class="link"   href="http://steampp.net/" >官网<i class="fas fa-external-link-alt"></i></a>下载软件安装包</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/1648278490989.png"
                      alt="2_1"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>选择需要加速的服务，并选择<strong>一键加速</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/1648278551243.png"
                      alt="2_2"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>推荐使用 Hosts 代理模式，如果该代理模式下没有加速效果，可以切换到系统代理</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/1648278843454.png"
                      alt="2_3"
                ></p>
<h3 id="dev-sidecar">dev-sidecar</h3>
<h4 id="简介-13">简介</h4>
<p>dev-sidecar：开发者边车，意为为开发者打辅助的边车工具。通过本地代理的方式将 https 请求代理到国内的加速通道上。</p>
<h4 id="功能-3">功能</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>github 直连加速 (通过修改 sni 实现)</p>
</li>
<li class="lvl-2">
<p>release、source、zip 下载加速</p>
</li>
<li class="lvl-2">
<p>clone 加速</p>
</li>
<li class="lvl-2">
<p>头像加速</p>
</li>
<li class="lvl-2">
<p>解决 readme 中图片引用无法加载的问题</p>
</li>
<li class="lvl-2">
<p><a class="link"   href="http://gist.github.com" >gist.github.com<i class="fas fa-external-link-alt"></i></a> 加速</p>
</li>
<li class="lvl-2">
<p>解决 git push 偶尔失败需要输入账号密码的问题</p>
</li>
<li class="lvl-2">
<p>raw/blame 加速</p>
</li>
</ul>
<blockquote>
<p>以上部分功能通过 <code>X.I.U</code> 的油猴脚本实现， 以下是仓库和脚本下载链接，大家可以安装体验。</p>
<ul class="lvl-1">
<li class="lvl-2"><a class="link"   href="https://blog.csdn.net/qq_42951560/article/details/109233301" >油猴安装教程<i class="fas fa-external-link-alt"></i></a></li>
<li class="lvl-2"><a class="link"   href="https://greasyfork.org/scripts/412245" >脚本下载地址<i class="fas fa-external-link-alt"></i></a></li>
<li class="lvl-2"><a class="link"   href="https://github.com/XIU2/UserScript" >开源仓库地址<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</blockquote>
<h4 id="用法-13">用法</h4>
<ol>
<li class="lvl-3">
<p>去作者的<a class="link"   href="https://gitee.com/docmirror/dev-sidecar/releases" >Gitee 软件发布页面<i class="fas fa-external-link-alt"></i></a>根据自己电脑的操作系统下载合适的安装包</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/1647266223134.png"
                      alt="download"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>下载完成后进行安装，首次打开软件请务必按照如下教程安装证书</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/1647266325213.png"
                      alt="cert"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>打开代理服务和系统代理即可愉快地访问 GitHub</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/1647494992212.png"
                      alt="proxy"
                ></p>
<h4 id="提示-5">提示</h4>
<ol>
<li class="lvl-3">
<p>如果 GitHub 提交或拉取代码很慢，请打开 Git.exe 代理</p>
</li>
<li class="lvl-3">
<p>如果电脑安装有 Node.js 软件，可以开启 NPM 加速</p>
</li>
<li class="lvl-3">
<p>如果电脑安装有 Python 软件，可以开启 pip 加速</p>
</li>
</ol>
<h3 id="FastGitHub">FastGitHub</h3>
<h4 id="简介-14">简介</h4>
<p>FastGitHub 和 dev-sidecar 类似，功能也基本一致，点击运行即可实现 GitHub 加速，没什么复杂的界面和配置。</p>
<h4 id="功能-4">功能</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>GitHub 加速访问、用户头像加速</p>
</li>
<li class="lvl-2">
<p>releases 上传和下载加速</p>
</li>
<li class="lvl-2">
<p>git-clone、git-pull、git-push 等加速</p>
</li>
</ul>
<h4 id="用法-14">用法</h4>
<ol>
<li class="lvl-3">
<p>去作者的 <a class="link"   href="https://github.com/dotnetcore/FastGithub/releases/" >GitHub 软件发布页<i class="fas fa-external-link-alt"></i></a>下载适合自己操作系统的软件</p>
</li>
<li class="lvl-3">
<p>对于 Windows 64 系统，直接点击 <code>FastGithub.UI.exe</code> 即可运行</p>
</li>
<li class="lvl-3">
<p>接下来就可以自由地访问和使用 GitHub 了</p>
</li>
<li class="lvl-3">
<p>其它系统的用法请参考<a class="link"   href="https://github.com/dotnetcore/FastGithub" >官方文档<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ol>
<h3 id="jsdelivr">jsdelivr</h3>
<h4 id="简介-15">简介</h4>
<p><a class="link"   href="https://www.jsdelivr.com/" >jsdelivr<i class="fas fa-external-link-alt"></i></a> 是一个免费开源的公共 CDN 服务，可加速 GitHub 静态资源访问。</p>
<h4 id="功能-5">功能</h4>
<p>适用于 GitHub 仓库中单个文件（例如图像）的加速访问，而对于推送代码到 GitHub 或从 GitHub 拉取代码没有没有支持。</p>
<h4 id="用法-15">用法</h4>
<p>其具体用法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://fastly.jsdelivr.net/gh/user/repo@version/file</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>user</code>：是 GitHub 用户名</p>
</li>
<li class="lvl-2">
<p><code>repo</code>：是 GitHub 仓库名</p>
</li>
<li class="lvl-2">
<p><code>version</code>：仓库分支（如果省略，则默认是最新分支）</p>
</li>
<li class="lvl-2">
<p><code>file</code>：文件目录</p>
</li>
</ul>
<p>例如我这里有一张 GitHub 的图片：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/blob/main/post/【Squoosh】谷歌开源在线图片压缩工具/Mauve-pixiv.net-82756421.jpg</span><br></pre></td></tr></table></figure>
<p>将 <code>raw.githubusercontent.com</code> 改为 <code>fastly.jsdelivr.net</code>，即可实现加速访问：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【Squoosh】谷歌开源在线图片压缩工具/Mauve-pixiv.net-82756421.jpg</span><br></pre></td></tr></table></figure>
<p>除单个文件外，也可以加速目录的访问：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【Squoosh】谷歌开源在线图片压缩工具/</span><br></pre></td></tr></table></figure>
<p>不过需要注意：jsdelivr 地址目录后面必须加<code>/</code>，不加将报错无法访问。</p>
<h4 id="注意-6">注意</h4>
<p>jsdelivr 本质上是一种 CDN 服务，只能加速 GitHub 静态文件的访问，对于从 GitHub 克隆/拉取代码或向 GitHub 提交代码没有加速效果。</p>
<h2 id="参考-22">参考</h2>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-XndKONTcCEMtKqWK" src="https://player.bilibili.com/player.html?bvid=BV1kf4y1h7mM&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-XndKONTcCEMtKqWK").style.height=document.getElementById("mmedia-XndKONTcCEMtKqWK").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-XndKONTcCEMtKqWK").style.height=document.getElementById("mmedia-XndKONTcCEMtKqWK").scrollWidth*0.76+"px";
    }; </script>
<h2 id="关于-27">关于</h2>
<table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
<h2 id="插画-23">插画</h2>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/好用且免费的GitHub加速工具汇总/ミカ ピカゾ_日曜西A58ab-pixiv.net-74502133.jpg"
                      width="100%"
                >
<div align="center" style="color: #ccc">【画师】Mauve 【P站ID】82756421</div>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>jsdelivr</tag>
        <tag>dev-sidecar</tag>
        <tag>fastgithub</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一款免费开源的GIF动图软件（录制，编辑，压缩）</title>
    <url>/2022/03/21/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/ScreenToGif_Logo.png"
                      alt="cover" width="100%"
                ></p>
<h2 id="引言-24">引言</h2>
<p>今天给大家推荐一款免费开源的，集录制，编辑，压缩于一体的 GIF 处理软件：<a class="link"   href="https://www.screentogif.com/" >ScreenToGif<i class="fas fa-external-link-alt"></i></a>。</p>
<h2 id="简介-16">简介</h2>
<p>ScreenToGif 是 GitHub 上的一个开源工具，该工具可以录制屏幕上任一选定的区域，录制完成后，你可以编辑和保存动画作为一个 gif，apng，video，psd 或 png 图像。</p>
<h2 id="下载-5">下载</h2>
<blockquote>
<p>官方下载地址：<a class="link"   href="https://github.com/NickeManarin/ScreenToGif/releases" >点击跳转<i class="fas fa-external-link-alt"></i></a>（无法访问或下载缓慢？请使用 <a href="/2022/03/14/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/">GitHub 加速工具</a>）</p>
</blockquote>
<h2 id="用法-16">用法</h2>
<ol>
<li class="lvl-3">
<p>安装完成后打开软件，点击录像机</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/1647829789009.png"
                      alt="图1"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>选择一个区域，窗口或屏幕，点击录制</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/1647830064777.png"
                      alt="图2"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>录制完成后可批量编辑图片帧，包括添加水印，大小调节，添加字幕等</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/1647830196076.png"
                      alt="图3"
                ></p>
<ol start="4">
<li class="lvl-3">
<p>可选择包括图片，视频在内的多种导出格式，并且提供神经网络算法在内的多种编码器</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/1647830390355.png"
                      alt="图4"
                ></p>
<h2 id="关于-28">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-24">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/Dangmyo-pixiv.net-75233788.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】Dangmyo 【P站ID】75233788</div>
]]></content>
      <categories>
        <category>application</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>application</tag>
        <tag>screentogif</tag>
        <tag>gif</tag>
      </tags>
  </entry>
  <entry>
    <title>数据预处理：标准化与正则化的作用及区别</title>
    <url>/2022/03/02/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%EF%BC%9A%E6%A0%87%E5%87%86%E5%8C%96%E4%B8%8E%E6%AD%A3%E5%88%99%E5%8C%96%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="引言-25">引言</h2>
<p>数据标准化和正则化是数据挖掘和机器学习的常用术语，本文简要阐述标准化和正则化的作用及区别，以便更好的从数据中发现和学习知识。</p>
<h2 id="方法-2">方法</h2>
<p>标准化和正则化都是数据预处理过程中常用的方法，对于数据的进一步分析和处理具有重要意义。</p>
<h3 id="数据标准化">数据标准化</h3>
<p>数据标准化是将样本的属性缩放到某个指定的范围。</p>
<p>标准化的作用或意义是什么？</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>某些算法要求样本具有零均值和单位方差</p>
</li>
<li class="lvl-2">
<p>需要消除样本不同属性具有不同量级时的影响</p>
<ul class="lvl-2">
<li class="lvl-4">数量级的差异将导致量级较大的属性占据主导地位</li>
<li class="lvl-4">数量级的差异将导致迭代收敛速度减慢</li>
<li class="lvl-4">依赖于样本距离的算法对于数据的数量级非常敏感</li>
</ul>
</li>
</ul>
<p>标准化常用的两种方法是：min-max标准化（归一化） 和 z-score标准化（规范化）。</p>
<p><strong>min-max标准化（归一化）</strong>：对于每个属性，设 <code>minA</code> 和 <code>maxA</code> 分别为属性 A 的最小值和最大值，将 A 的一个原始值 <code>x</code> 通过 <code>min-max</code> 标准化映射成在区间 <code>[0, 1]</code> 的值 <code>x'</code>，其公式为：</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.738ex" xmlns="http://www.w3.org/2000/svg" width="20.696ex" height="4.887ex" role="img" focusable="false" viewBox="0 -1392 9147.5 2160"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(605,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(1127.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2183,0)"><g data-mml-node="mrow" transform="translate(1298.5,676)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2672.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3017.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3617.4,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1979,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(2951.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3951.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4829.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5174.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5774.4,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g><rect width="6724.4" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
<p><strong>z-score标准化（规范化）</strong>：基于原始数据的均值（mean）和标准差（standard deviation，简记为 std）进行数据的标准化。将 A 的一个原始值 <code>x</code> 使用z-score标准化到 <code>x'</code>。z-score标准化方法适用于属性 A 的最大值和最小值未知的情况，或有超出取值范围的离群数据的情况，其公式为：</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="15.589ex" height="4.425ex" role="img" focusable="false" viewBox="0 -1259 6890.5 1956"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(605,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(1127.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2183,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2672.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3138.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(3667.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mrow" transform="translate(1678.7,-686)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><rect width="4467.4" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
<h3 id="数据正则化">数据正则化</h3>
<p>数据正则化是将样本的某个范数（如<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.528ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1117.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(714,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container>范数）缩放到单位1。正则的过程是针对单个样本的，将每个样本缩放到单位范数。通常使用二次型（如点积）或者其他核方法计算两个样本之间的相似性。首先对样本求<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex" xmlns="http://www.w3.org/2000/svg" width="2.533ex" height="2.195ex" role="img" focusable="false" viewBox="0 -683 1119.7 970.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(714,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></g></g></svg></mjx-container>范数，然后对该样本的每个属性值除以该样本的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex" xmlns="http://www.w3.org/2000/svg" width="2.533ex" height="2.195ex" role="img" focusable="false" viewBox="0 -683 1119.7 970.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(714,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></g></g></svg></mjx-container>范数。</p>
<h2 id="参考-23">参考</h2>
<p>内容节选自海豚大数据实验室。若想进一步了解可参阅<a class="link" href="https://zhuanlan.zhihu.com/p/138563350">这篇<i class="fas fa-external-link-alt"></i></a>文章。</p>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>normalization</tag>
        <tag>standardization</tag>
        <tag>regularization</tag>
      </tags>
  </entry>
  <entry>
    <title>本地计算机与远程服务器之间的文件传输</title>
    <url>/2022/03/19/%E6%9C%AC%E5%9C%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<h2 id="引言-26">引言</h2>
<p>本地计算机与远程服务器常常需要进行文件传输，如将本地计算机中的文件<strong>上传</strong>到远程服务器，或从远程服务器<strong>下载</strong>文件到本地计算机。本文主要介绍包含 <strong>FTP</strong>，<strong>SFTP</strong> 和 <strong>SCP</strong> 在内的三种常用的文件传输方式，直接通过命令行操作，无需安装任何软件。</p>
<h2 id="简介-17">简介</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>FTP（File Transfer Protocol）：文件传输协议，基于互联网实现文件传输。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
</li>
<li class="lvl-2">
<p>SFTP（SSH File Transfer Protocol）：SSH 文件传输协议，也称安全文件传输协议，通过 SSH 建立的安全连接来实现加密文件传输。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
</li>
<li class="lvl-2">
<p>SCP（Secure Copy）：通过 SSH 建立的安全连接实现本地机与远程机或两台远程机之间的文件传输。<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p>
</li>
</ul>
<h2 id="用法-17">用法</h2>
<div class="tips">
<p><strong>提示</strong><br>
SFTP 与 FTP 有着几乎一样的语法和功能，故这里只展示 SFTP 的用法。</p>
</div>
<h3 id="SFTP">SFTP</h3>
<p>SFTP 比 FTP 更加安全可靠，因此更推荐在实际应用场景中使用。</p>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看 SFTP 命令详解</strong></summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp&gt; <span class="built_in">help</span></span><br><span class="line">Available commands:</span><br><span class="line"><span class="built_in">bye</span>                                Quit sftp</span><br><span class="line"><span class="built_in">cd</span> path                            Change remote directory to <span class="string">&#x27;path&#x27;</span></span><br><span class="line">chgrp [-h] grp path                Change group of file <span class="string">&#x27;path&#x27;</span> to <span class="string">&#x27;grp&#x27;</span></span><br><span class="line">chmod [-h] mode path               Change permissions of file <span class="string">&#x27;path&#x27;</span> to <span class="string">&#x27;mode&#x27;</span></span><br><span class="line">chown [-h] own path                Change owner of file <span class="string">&#x27;path&#x27;</span> to <span class="string">&#x27;own&#x27;</span></span><br><span class="line">df [-hi] [path]                    Display statistics <span class="keyword">for</span> current directory or</span><br><span class="line">                                   filesystem containing <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="built_in">exit</span>                               Quit sftp</span><br><span class="line">get [-afpR] remote [<span class="built_in">local</span>]         Download file</span><br><span class="line"><span class="built_in">help</span>                               Display this <span class="built_in">help</span> text</span><br><span class="line">lcd path                           Change <span class="built_in">local</span> directory to <span class="string">&#x27;path&#x27;</span></span><br><span class="line">lls [ls-options [path]]            Display <span class="built_in">local</span> directory listing</span><br><span class="line">lmkdir path                        Create <span class="built_in">local</span> directory</span><br><span class="line">ln [-s] oldpath newpath            Link remote file (-s <span class="keyword">for</span> symlink)</span><br><span class="line">lpwd                               Print <span class="built_in">local</span> working directory</span><br><span class="line">ls [-1afhlnrSt] [path]             Display remote directory listing</span><br><span class="line">lumask <span class="built_in">umask</span>                       Set <span class="built_in">local</span> <span class="built_in">umask</span> to <span class="string">&#x27;umask&#x27;</span></span><br><span class="line">mkdir path                         Create remote directory</span><br><span class="line">progress                           Toggle display of progress meter</span><br><span class="line">put [-afpR] <span class="built_in">local</span> [remote]         Upload file</span><br><span class="line"><span class="built_in">pwd</span>                                Display remote working directory</span><br><span class="line">quit                               Quit sftp</span><br><span class="line">reget [-fpR] remote [<span class="built_in">local</span>]        Resume download file</span><br><span class="line">rename oldpath newpath             Rename remote file</span><br><span class="line">reput [-fpR] <span class="built_in">local</span> [remote]        Resume upload file</span><br><span class="line">rm path                            Delete remote file</span><br><span class="line">rmdir path                         Remove remote directory</span><br><span class="line">symlink oldpath newpath            Symlink remote file</span><br><span class="line">version                            Show SFTP version</span><br><span class="line">!<span class="built_in">command</span>                           Execute <span class="string">&#x27;command&#x27;</span> <span class="keyword">in</span> <span class="built_in">local</span> shell</span><br><span class="line">!                                  Escape to <span class="built_in">local</span> shell</span><br><span class="line">?                                  Synonym <span class="keyword">for</span> <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
</details>
<h4 id="建立连接">建立连接</h4>
<p>在本地计算机输入以下命令即可连接到远程服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp -P 22 user@host</span><br></pre></td></tr></table></figure>
<p><code>-P</code>：指定 SSH 远程连接的端口号。默认是 22。</p>
<p>执行以上命令后，会要求你输入密码，验证通过后即可进行 SFTP 命令行交互界面。</p>
<h4 id="文件传输">文件传输</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>本地计算机上传文件到远程服务器：<code>put filename</code></p>
</li>
<li class="lvl-2">
<p>远程服务器下载文件到本地计算机：<code>get filename</code></p>
</li>
</ul>
<h4 id="目录传输">目录传输</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>本地计算机上传文件到远程服务器：<code>put -r LocalDirectory RemoteDirectory</code></p>
</li>
<li class="lvl-2">
<p>远程服务器下载文件到本地计算机：<code>get -r RemoteDirectory LocalDirectory</code></p>
</li>
</ul>
<h3 id="SCP">SCP</h3>
<p>SCP 程序的语法类似 Linux 系统中 <code>cp</code>（copy），一般使用默认端口 <code>22</code>，这和 SSH 实现的默认端口一致。</p>
<h4 id="文件传输-2">文件传输</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>本地计算机上传文件到远程服务器：<code>scp SourceFile user@host:directory/TargetFile</code></p>
</li>
<li class="lvl-2">
<p>远程服务器下载文件到本地计算机：<code>scp user@host:directory/SourceFile TargetFile</code></p>
</li>
</ul>
<h4 id="目录传输-2">目录传输</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>本地计算机上传文件夹到远程服务器：<code>scp -r SourceFolder user@host:directory/TargetFolder</code></p>
</li>
<li class="lvl-2">
<p>远程服务器下载文件夹到本地计算机：<code>scp -r user@host:directory/SourceFolder TargetFolder</code></p>
</li>
</ul>
<h4 id="指定端口">指定端口</h4>
<p>若远程服务器使用非默认端口 22，可通过 <code>-P</code> 参数指定端口号。例如，从远程服务器下载文件到本地计算机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -P 5678 user@host:directory/SourceFile TargetFile</span><br></pre></td></tr></table></figure>
<h4 id="温馨提示">温馨提示</h4>
<p>SCP 也支持两台远程服务器之间的文件传输。例如，将远程服务器 A 的文件发送到远程服务器 B：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp userA@hostA:directory/SourceFile userB@hostB:directory/TargetFile</span><br></pre></td></tr></table></figure>
<h2 id="关于-29">关于</h2>
<details>
<summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table>
<thead>
<tr>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"
                      alt="qq"
                ></th>
<th><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"
                      alt="wx"
                ></th>
</tr>
</thead>
</table>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"
                      alt="wechat-official-account"
                ></p>
</details>
<h2 id="插画-25">插画</h2>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%9C%AC%E5%9C%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/%E8%97%A4%E5%8E%9F-pixiv.net-63529251.jpg"
                      alt="anime" width="100%"
                ></p>
<div align="center" style="color: #ccc">【画师】藤原 【P站ID】63529251</div>
<h2 id="参考-24">参考</h2>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-TbPawOeIxAcsiWzE" src="https://player.bilibili.com/player.html?bvid=BV1wf4y127LV&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-TbPawOeIxAcsiWzE").style.height=document.getElementById("mmedia-TbPawOeIxAcsiWzE").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-TbPawOeIxAcsiWzE").style.height=document.getElementById("mmedia-TbPawOeIxAcsiWzE").scrollWidth*0.76+"px";
    }; </script>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-XGkrAyMHhTjKoFTg" src="https://player.bilibili.com/player.html?bvid=BV1mQ4y1A78E&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-XGkrAyMHhTjKoFTg").style.height=document.getElementById("mmedia-XGkrAyMHhTjKoFTg").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-XGkrAyMHhTjKoFTg").style.height=document.getElementById("mmedia-XGkrAyMHhTjKoFTg").scrollWidth*0.76+"px";
    }; </script>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a class="link"   href="https://baike.baidu.com/item/FTP/13839" >FTP-百度百科<i class="fas fa-external-link-alt"></i></a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a class="link"   href="https://baike.baidu.com/item/SSH%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/2974699" >SFTP-百度百科<i class="fas fa-external-link-alt"></i></a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a class="link"   href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A4%8D%E5%88%B6" >SCP-维基百科<i class="fas fa-external-link-alt"></i></a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>linux</tag>
        <tag>ftp</tag>
        <tag>sftp</tag>
        <tag>scp</tag>
      </tags>
  </entry>
  <entry>
    <title>详解DNS服务、DNS解析、DNS劫持和污染</title>
    <url>/2022/03/14/%E8%AF%A6%E8%A7%A3DNS%E6%9C%8D%E5%8A%A1%E3%80%81DNS%E8%A7%A3%E6%9E%90%E3%80%81DNS%E5%8A%AB%E6%8C%81%E5%92%8C%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<h2 id="简介-18">简介</h2>
<p>DNS（全称：Domain Name System，中文：域名系统）是互联网的一项服务。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p>
<h2 id="前言">前言</h2>
<p>要想弄清楚 DNS，必须先将域名和 IP 搞清楚。域名是什么？IP 又是什么？以百度的网站为例，域名就是 <code>www.baidu.com</code>，我们都很熟悉了，但想必很少人知道百度的 IP。打开浏览器的审查元素，可以看到百度的 IP 是 <code>220.181.38.149:443</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%AF%A6%E8%A7%A3DNS%E6%9C%8D%E5%8A%A1%E3%80%81DNS%E8%A7%A3%E6%9E%90%E3%80%81DNS%E5%8A%AB%E6%8C%81%E5%92%8C%E6%B1%A1%E6%9F%93/1647244008259.png"
                      alt="图1 百度域名及其对应的IP"
                ></p>
<p>其实我们浏览的网页是 IP 地址对应的远程服务器响应给我们的内容，我们之所以能直接通过域名访问网页，是因为有一个 DNS 服务器，它负责帮我们解析域名对应的 IP。浏览器地址栏输入<code>www.baidu.com</code>的时候，DNS 服务器给我们返回其对应的 IP 地址，然后就能正常使用百度的服务了。当然，你也可以直接输入 IP 地址访问网页，如果您能记住那么多 IP 地址的话。</p>
<h2 id="详解">详解</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>DNS 服务：互联网服务的一种，通过建立域名和 IP 的映射关系，使互联网访问更简单。</p>
</li>
<li class="lvl-2">
<p>DNS 解析：通常由 DNS 服务器来完成，将域名解析为 IP 地址，从而开始网页的访问。</p>
</li>
<li class="lvl-2">
<p>DNS 劫持：DNS 服务器中记录的域名和 IP 映射关系被人为地修改，导致无法进入正确的网页。如浏览器输入百度的域名，可能不进入 <code>220.181.38.149:443</code>对应的主机，而是访问到了其它博彩或钓鱼网站。通常这种情况也容易解决，换一个权威 DNS 服务商即可，比如百度、阿里、腾讯等等。</p>
</li>
<li class="lvl-2">
<p>DNS 污染：DNS 污染是在链路上有其他的设备会应答回复错误的 DNS 数据包，导致查询结果是错误的 IP 地址。DNS 污染其实也是 DNS 劫持的一种。国内 GitHub 访问缓慢其实就和 DNS 污染有一定的关系，GitHub 的加速分发域名遭到了 DNS 污染，导致无法连接其加速分发服务器，使得国内访问速度缓慢。</p>
</li>
</ul>
<h2 id="参考-25">参考</h2>
<p>[1] <a class="link"   href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F" >https://zh.wikipedia.org/wiki/域名系统<i class="fas fa-external-link-alt"></i></a><br>
[2] <a class="link"   href="https://github.com/chenxuhua/issues-blog/issues/3" >https://github.com/chenxuhua/issues-blog/issues/3<i class="fas fa-external-link-alt"></i></a></p>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-EvkUZkJPkqlFlJgk" src="https://player.bilibili.com/player.html?bvid=BV1Rp4y1a7xQ&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-EvkUZkJPkqlFlJgk").style.height=document.getElementById("mmedia-EvkUZkJPkqlFlJgk").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-EvkUZkJPkqlFlJgk").style.height=document.getElementById("mmedia-EvkUZkJPkqlFlJgk").scrollWidth*0.76+"px";
    }; </script>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>高性能平台作业调度系统使用手册</title>
    <url>/2022/04/08/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h2 id="平台简介">平台简介</h2>
<p>高性能平台由 1 个管理节点、1 个登录节点、16 个计算节点、 4 个 GPU 节点组成，可用存储空间为 110 TB 并部署并行文件系统。各节点配置信息如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">节点类型</th>
<th style="text-align:center">CPU</th>
<th style="text-align:center">内存（GB）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">管理节点</td>
<td style="text-align:center">2 颗 Intel® Xeon® Silver</br>4208 CPU @ 2.10GHz 共 16 核</td>
<td style="text-align:center">192</td>
</tr>
<tr>
<td style="text-align:center">登录节点</td>
<td style="text-align:center">2 颗 Intel® Xeon® Silver</br>4208 CPU @ 2.10GHz 共 16 核</td>
<td style="text-align:center">192</td>
</tr>
<tr>
<td style="text-align:center">计算节点</td>
<td style="text-align:center">2 颗 Intel® Xeon® Gold</br>6242 CPU @ 2.80GHz 共 32 核</td>
<td style="text-align:center">192</td>
</tr>
<tr>
<td style="text-align:center">GPU 节点</td>
<td style="text-align:center">2 颗 Intel® Xeon® Gold</br>6242 CPU @ 2.80GHz 共 32 核</td>
<td style="text-align:center">192</td>
</tr>
</tbody>
</table>
<h2 id="使用方式">使用方式</h2>
<h3 id="命令行使用方式">命令行使用方式</h3>
<h4 id="登录方式">登录方式</h4>
<p>使用系统自带终端并配合 SSH 命令即可登录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh user@host -p 22</span><br></pre></td></tr></table></figure>
<p>普通用户登录成功后直接进入登录节点 <code>ln01</code>。</p>
<div class="tips">
<p><strong>提示</strong><br>
推荐使用第三方工具，如 <a class="link"   href="https://code.visualstudio.com/Download" >VSCode<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://www.xshell.com/zh/xshell-download/" >Xshell<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" >PuTTY<i class="fas fa-external-link-alt"></i></a> 等进行登录。</p>
</div>
<h4 id="数据传输">数据传输</h4>
<p>可使用 SCP，SFTP 等以命令行的方式传输数据。（详细教程：<a href="/2022/03/19/%E6%9C%AC%E5%9C%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/">点击查看</a>）</p>
<div class="tips">
<p><strong>提示</strong><br>
推荐使用第三方工具，如 <a class="link"   href="https://blog.csdn.net/qq_42951560/article/details/116243914" >FileZilla<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://blog.csdn.net/qq_42951560/article/details/116227677" >WinSCP<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://www.xshell.com/xftp-download/" >Xftp<i class="fas fa-external-link-alt"></i></a> 等传输数据。</p>
</div>
<h4 id="作业调度">作业调度</h4>
<h5 id="提交作业">提交作业</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jsub -q &lt;队列名&gt; -n &lt;CPU数&gt; [-J &lt;作业名&gt; -o output.%J -e error.%J] ./commandline</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>-q</code>：指定该作业运行时使用的队列。先提交的作业先执行，后提交的作业排队等待执行。队列由管理员分配，可使用命令 <code>jqueues -u $USER</code> 查看自己可用的队列。CPU 串行作业请使用队列 <code>normal</code>，CPU 并行作业请使用队列 <code>para</code>，GPU 作业请使用队列 <code>qgpu</code>，MATLAB 作业请使用队列 <code>matlab</code>；</p>
</li>
<li class="lvl-2">
<p><code>-n</code>：指定该作业所需的 CPU 核数；</p>
</li>
<li class="lvl-2">
<p><code>-J</code>：指定作业名。方便辨识；</p>
</li>
<li class="lvl-2">
<p><code>-o</code>：指定输出结果文件。<code>-o output.%J</code> 表示将作业的输出结果输出重定向到 <code>output.&lt;作业号&gt;</code>；</p>
</li>
<li class="lvl-2">
<p><code>-e</code>：指定错误日志文件。<code>-e error.%J</code> 表示将作业的错误日志重定向到 <code>output.&lt;作业号&gt;</code>。</p>
</li>
</ul>
<p>除上述以命令行的方式提交作业外，还支持 shell 脚本提交模式，但必须按照以下格式提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#JSUB -q normal</span></span><br><span class="line"><span class="comment">#JSUB -n 1</span></span><br><span class="line"><span class="comment">#JSUB -e error.%J</span></span><br><span class="line"><span class="comment">#JSUB -o output.%J</span></span><br><span class="line"><span class="comment">#JSUB -J my_job</span></span><br><span class="line">python test.py</span><br></pre></td></tr></table></figure>
<p>然后提交脚本：<code>jsub &lt; run.sh</code></p>
<h5 id="查看作业">查看作业</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jjobs [[-a] [-l] &lt;作业号&gt;]</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>jjobs</code>：不使用参数，查看目前正在排队或运行的作业；</p>
</li>
<li class="lvl-2">
<p><code>jjobs -a</code>：查看所有作业，除正在排队或运行的作业外，还包括最近完成的作业；</p>
</li>
<li class="lvl-2">
<p><code>jjobs &lt;作业号&gt;</code>：查看指定作业的状态；</p>
</li>
<li class="lvl-2">
<p><code>jjobs -l &lt;作业号&gt;</code>：查看指定作业的详细信息。</p>
</li>
</ul>
<h5 id="终止作业">终止作业</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jctrl <span class="built_in">kill</span> &lt;作业号&gt;</span><br></pre></td></tr></table></figure>
<h4 id="预置软件">预置软件</h4>
<p>为方便用户使用，省去安装麻烦，服务器预置了部分常用软件，可使用 <code>module</code> 命令动态地加载和移除。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>显示所有可用模块</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module avail</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>动态加载指定模块</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module load intel/compilervars</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>列出所有加载模块</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module list</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>动态移除指定模块</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module rm intel/compilervars</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>动态移除所有模块</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module purge</span><br></pre></td></tr></table></figure>
<h3 id="网页端使用方式">网页端使用方式</h3>
<h4 id="登录方式-2">登录方式</h4>
<ol>
<li class="lvl-3">
<p>浏览器地址栏输入<strong>24 服务器的 IP 地址</strong>进入平台</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649472778315.png"
                      alt="1"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>输入分配的用户名和密码进行登录，登录进去的主页如下</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649472835693.png"
                      alt="2"
                ></p>
<h4 id="数据传输-2">数据传输</h4>
<ol>
<li class="lvl-3">
<p>在本地计算机上安装 FileClient 软件（下载地址：<a class="link"   href="https://ghgxj.lanzouu.com/icfk9033wati" >Windows<i class="fas fa-external-link-alt"></i></a>）</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649474876189.png"
                      alt="1"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>登录平台，进入<strong>我的数据</strong>界面</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649474950617.png"
                      alt="2"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>点击<strong>上传</strong>按钮即可打开 FileClient，轻松拖拽即可实现本地机与远程机的数据传输</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649475076974.png"
                      alt="3"
                ></p>
<h4 id="作业调度-2">作业调度</h4>
<h5 id="提交作业-2">提交作业</h5>
<div class="warning">
<p><strong>警告</strong><br>
网页端只能提交 Matlab 和 CPU 串行作业，GPU 和 CPU 并行作业请以命令行的方式提交。</p>
</div>
<h6 id="提交-Matlab-作业">提交 Matlab 作业</h6>
<p>这里以 <code>test.m</code> 为例，演示如何提交 Matlab 作业，其内容如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fprintf(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">% 打印 hello world</span></span><br></pre></td></tr></table></figure>
<hr>
<ol>
<li class="lvl-3">
<p>登录平台，点击<strong>仿真计算-&gt;Matlab</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649481362872.png"
                      alt="1"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>指定作业名，选择要执行的 <code>.m</code> 文件，点击<strong>确定</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649481455524.png"
                      alt="2"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>从上一步直接跳转到了<strong>我的作业</strong>界面，稍等几秒即可看到输出的 <code>matlab.log</code></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649481913972.png"
                      alt="3"
                ></p>
<ol start="4">
<li class="lvl-3">
<p>双击查看 <code>matlab.log</code>，已经正确打印出 <code>hello world</code> 了</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649482066784.png"
                      alt="4"
                ></p>
<ol start="5">
<li class="lvl-3">
<p>此外，你也可以在 <code>ouput.&lt;作业号&gt;</code> 文件中看到输出结果</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649482199097.png"
                      alt="5"
                ></p>
<h6 id="提交-CPU-串行作业">提交 CPU 串行作业</h6>
<p>这里以 <code>test.py</code> 为例，演示如何提交 CPU 串行作业，其内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>此外，还需创建一个执行的脚本文件，这里为 <code>run.sh</code>，其内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python test.py</span><br></pre></td></tr></table></figure>
<hr>
<ol>
<li class="lvl-3">
<p>登录平台，点击<strong>仿真计算-&gt;通用计算</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649485357192.png"
                      alt="1"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>可执行文件选择 <code>run.sh</code>，其他计算文件选择 <code>test.py</code>，点击确定</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649485487096.png"
                      alt="2"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>从上一步直接跳转到了<strong>我的作业</strong>界面，稍等几秒即可看到输出的 <code>output.&lt;作业号&gt;</code></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649485626708.png"
                      alt="3"
                ></p>
<ol start="4">
<li class="lvl-3">
<p>双击查看 <code>output.&lt;作业号&gt;</code>，已经正确打印出 <code>hello world</code> 了</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649485702846.png"
                      alt="4"
                ></p>
<h5 id="查看作业-2">查看作业</h5>
<ol>
<li class="lvl-3">
<p>登录平台，点击<strong>我的作业</strong></p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649486035939.png"
                      alt="1"
                ></p>
<ol start="2">
<li class="lvl-3">
<p>我的作业界面以表格的方式列出了所有作业的信息，包括作业号，队列，状态，执行节点，以及运行时长……</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649486110168.png"
                      alt="2"
                ></p>
<ol start="3">
<li class="lvl-3">
<p>点击作业号超链接，可查看作业数据，作业详情和作业历史</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649486214123.png"
                      alt="3"
                ></p>
<h5 id="终止作业-2">终止作业</h5>
<p>点击正在运行的作业，单击终止按钮即可强制关闭作业。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649486489970.png"
                      alt="1"
                ></p>
<h4 id="数据管理">数据管理</h4>
<p>在我的数据界面中可直接管理用户数据，其包括用户家目录，作业数据区和共享数据区。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649486765096.png"
                      alt="1"
                ></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>用户家目录：用户个人文件存放的目录；</p>
</li>
<li class="lvl-2">
<p>作业数据区：作业提交数据和输出结果；</p>
</li>
<li class="lvl-2">
<p>共享数据区：方便用户之间的文件共享。</p>
</li>
</ul>
<h2 id="温馨提示-2">温馨提示</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>推荐以命令行的方式提交作业，网页端用起来不如命令行方便，且无法提交 GPU 和 CPU 并行作业；</p>
</li>
<li class="lvl-2">
<p>非必要情况，请勿在登录节点直接执行程序，否则会造成登录节点卡顿，影响自己和他人使用服务器；</p>
</li>
<li class="lvl-2">
<p>每次登录都要输入密码，很麻烦？服务器已允许公钥密码的 SSH 免密登录，配置教程请参考<a href="/2022/04/05/%E3%80%90Linux%E3%80%91%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/">这篇</a>文章。</p>
</li>
</ul>
<h2 id="常见问题">常见问题</h2>
<ol>
<li class="lvl-3">
<p>如何使用 Conda 下的 Python 环境执行代码？</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>（1）使用命令 <code>conda activate &lt;ENV_NAME&gt;</code> 切入 Conda 环境；</p>
</li>
<li class="lvl-2">
<p>（2）使用命令 <code>which python</code> 查看该环境下 Python 编译器路径；</p>
</li>
<li class="lvl-2">
<p>（3）将上一步路径中的 <code>~</code> 换成绝对路径（可使用命令 <code>pwd</code> 获得）；</p>
</li>
<li class="lvl-2">
<p>（4）提交作业的时候指定上一步获得的 Python 编译器的路径。</p>
</li>
</ul>
<hr>
<p>举个例子：我在 Conda 里面创建了一个名为 <code>torch</code> 的 Python 环境（并在里面安装了 GPU 版的 PyTorch）。现在，想要使用这个环境来执行我的 Python 代码。</p>
<hr>
<p>① 首先，切入该环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) [xxx@ln01 ~]$ conda activate torch</span><br><span class="line">(torch) [xxx@ln01 ~]$ <span class="built_in">which</span> python</span><br><span class="line">~/.conda/envs/torch/bin/python</span><br><span class="line">(torch) [xxx@ln01 ~]$ <span class="built_in">pwd</span></span><br><span class="line">/gpfs/home/xxx</span><br></pre></td></tr></table></figure>
<p>② 然后，这里想要执行的代码文件是 <code>test.py</code>，里面的内容如下（测试 CUDA 加速是否可用）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure>
<p>③ 接着，为了将执行这个文件，我写了一个作业提交脚本 <code>run.sh</code>。（因为是 GPU 作业，队列需选 <code>ggpu</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#JSUB -q ggpu</span></span><br><span class="line"><span class="comment">#JSUB -e error.%J</span></span><br><span class="line"><span class="comment">#JSUB -o output.%J</span></span><br><span class="line"><span class="comment">#JSUB -J my_torch_job</span></span><br><span class="line">/gpfs/home/xxx/.conda/envs/torch/bin/python test.py</span><br></pre></td></tr></table></figure>
<p>④ 最后，使用命令<code>jsub &lt; run.sh</code> 提交作业，查看 <code>output.&lt;作业号&gt;</code>，输出为 <code>True</code>，说明 GPU 可用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Successfully completed.</span><br><span class="line"></span><br><span class="line">Resource usage summary:</span><br><span class="line"></span><br><span class="line">    Max Memory :                 5 MB</span><br><span class="line">    Max Processes  :               1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The output (<span class="keyword">if</span> any) follows:</span><br><span class="line"></span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>提交作业时如何指定节点？</p>
</li>
</ol>
<p>jsub 命令搭配 <code>-m &lt;节点名称&gt;</code> 参数在提交作业时可以指定节点。服务器共有 CPU 节点 16 个，编号依次为 <code>computer01, ..., computer16</code>，共有 GPU 节点 4 个，编号依次为 <code>gpu01, ..., gpu04</code>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>提交 CPU 作业时指定节点：<code>jsub -q normal -m computer01 -o out -e err pwd</code></p>
</li>
<li class="lvl-2">
<p>提交 GPU 作业时指定节点：<code>jsub -q qgpu -m gpu01 -o out -e err nvidia-smi</code></p>
</li>
</ul>
<h2 id="关于我们">关于我们</h2>
<p>高性能平台仅限校内人士使用，任何其他问题请微信（微信号：XavierJiezou）或<a class="link"   href="mailto:878972272@qq.com" >邮件<i class="fas fa-external-link-alt"></i></a>联系，亦可在下方评论区直接留言。</p>
]]></content>
      <categories>
        <category>qhdx</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>qhdx</tag>
        <tag>jsub</tag>
      </tags>
  </entry>
  <entry>
    <title>高性能平台PyTorch(GPU)环境配置</title>
    <url>/2022/03/03/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0PyTorch(GPU)%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="引言-27">引言</h2>
<p>高性能平台集成了智算管理平台，共包含以下节点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>1 个管理节点</p>
</li>
<li class="lvl-2">
<p>1 个登录节点</p>
</li>
<li class="lvl-2">
<p>16 个 CPU 节点</p>
</li>
<li class="lvl-2">
<p>4 个 GPU 节点</p>
</li>
</ul>
<p>每个 GPU 节点都包含如下两张 Tesla T4 显卡：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 418.67       Driver Version: 418.67       CUDA Version: 10.1     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  Tesla T4            On   | 00000000:2F:00.0 Off |                    0 |</span><br><span class="line">| N/A   77C    P8    22W /  70W |     22MiB / 15079MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   1  Tesla T4            On   | 00000000:86:00.0 Off |                    0 |</span><br><span class="line">| N/A   57C    P8    11W /  70W |     10MiB / 15079MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br></pre></td></tr></table></figure>
<h2 id="安装-21">安装</h2>
<p>使用管理员分配的账号进入登录节点，打开终端执行以下命令即可安装 PyTorch(GPU) 环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n torch python=3.8</span><br><span class="line">conda activate torch</span><br><span class="line">conda install pytorch==1.7.1 torchvision==0.8.2 torchaudio==0.7.2 cudatoolkit=10.1 -c pytorch</span><br></pre></td></tr></table></figure>
<h2 id="校验">校验</h2>
<ol>
<li class="lvl-3">
<p>使用系统管理员分配的账号登录，在用户目录下新建 <code>test.py</code></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>在用户目录下新建 <code>run.sh</code>（请将 <code>xxx</code> 替换为您的用户名）</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#JSUB -q qgpu</span></span><br><span class="line"><span class="comment">#JSUB -m gpu01</span></span><br><span class="line"><span class="comment">#JSUB -n 1</span></span><br><span class="line"><span class="comment">#JSUB -e err</span></span><br><span class="line"><span class="comment">#JSUB -o out</span></span><br><span class="line"><span class="comment">#JSUB -J 校验GPU是否可用（-m参数可指定GPU节点）</span></span><br><span class="line">/gpfs/home/xxx/.conda/envs/torch/bin/python test.py</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>提交作业查看 GPU 是否可用</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jsub &lt; run.sh</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>等待作业执行完成后，使用 <code>cat out</code> 命令查看作业输出，如果最后一行是 <code>True</code> 说明 GPU 可用</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Successfully completed.</span><br><span class="line"></span><br><span class="line">Resource usage summary:</span><br><span class="line"></span><br><span class="line">    CPU time   :            0.01 sec.</span><br><span class="line">    Max Memory :                 6 MB</span><br><span class="line">    Max Processes  :               1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The output (<span class="keyword">if</span> any) follows:</span><br><span class="line"></span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<h2 id="关于-30">关于</h2>
<p>高性能平台仅限校内人士使用，任何其他问题请微信（微信号：XavierJiezou）或<a class="link"   href="mailto:878972272@qq.com" >邮件<i class="fas fa-external-link-alt"></i></a>联系，亦可在下方评论区直接留言。</p>
]]></content>
      <categories>
        <category>qhdx</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>qhdx</tag>
        <tag>pytorch</tag>
        <tag>gpu</tag>
      </tags>
  </entry>
  <entry>
    <title>Paper Reading: DeepMask</title>
    <url>/2022/01/11/Paper-Reading-DeepMask/en/</url>
    <content><![CDATA[<p>English | <a href="/2022/01/11/Paper-Reading-DeepMask/zh/">简体中文</a></p>
<p><a class="link"   href="https://arxiv.org/abs/1911.03607" >Deep Mask<i class="fas fa-external-link-alt"></i></a>: an algorithm for cloud and cloud shadow detection in optical satellite remote sensing images using deep residual network</p>
<hr>
<h2 id="Abstract">Abstract</h2>
<p>DeepMask utilizes ResNet, a deep convolutional neural network, for <strong>pixel-level</strong> cloud mask generation.</p>
<p>The algorithm is trained and evaluated on the <strong>Landsat 8 Cloud Cover Assessment Validation Dataset</strong> distributed across 8 different land types.</p>
<p>Compared with <strong>CFMask</strong>, the most widely used cloud detection algorithm, land-type-specific DeepMask models achieve higher accuracy across all land types. The average accuracy is <strong>93.56%</strong>, compared with <strong>83.36%</strong> from CFMask.</p>
<p>Compared with other CNN-based cloud mask algorithm, DeepMask benefits from the <strong>parsimonious architecture</strong> and the residual connection of ResNet. It is compatible with input of any size and shape.</p>
<h2 id="Introduction">Introduction</h2>
<p>Studies have found that mean annual global cloud coverage is estimated to be between <strong>58%</strong> and <strong>66%</strong>.</p>
<p>Manual labeling of cloud and cloud shadow pixels are <strong>expensive</strong> in terms of time and human resources.</p>
<p>Many cloud mask algorithms have been proposed to tackle this problem. These cloud mask algorithms can be divided into two major categories: <strong>multi-temporal</strong> algorithms and <strong>single-date</strong> algorithms.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Multi-temporal</p>
<ul class="lvl-2">
<li class="lvl-4">Utilize temporal and statistical information to detect cloud pixels.</li>
<li class="lvl-4">Computationally expensive: need to process large volume of time series data.</li>
<li class="lvl-4">Challenging to use: due to the requirement of a clear-sky reference image.</li>
</ul>
</li>
<li class="lvl-2">
<p>Single-date</p>
<ul class="lvl-2">
<li class="lvl-4">Threshold-based: physical rules or geometric relationship.</li>
<li class="lvl-4">Machine learning: fully-connected neural networks, fuzzy models, and svm.</li>
<li class="lvl-4">Deep learning: super-pixel + CNN, semantic segmentation networks, and CNN + RNN (optical information + temporal information).</li>
</ul>
</li>
</ul>
<p>CFMask is a multi-stage algorithm that uses a pre-defined set of threshold tests to label pixels, which has the best overall performance on those existing cloud mask algorithms. It further refines cloud mask using statistics. It predicts cloud shadow using cloud height and satellite sensor projection. The CFMask algorithm is currently the most widely used cloud mask algorithm, and it is the default cloud mask algorithm used by Landsat missions.</p>
<p>CFMask’s weaknesses:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>CFMask tends to confuse clouds with bright targets such as building tops, beaches, snow/ice, sand dunes, and salt lakes.</p>
</li>
<li class="lvl-2">
<p>Optically thin clouds have a high probability of being omitted by the CFMask algorithm.</p>
</li>
</ul>
<p>Human experts analyze not only the spectral band values of each individual pixel, but also the shape and texture of the local region. This level of context and geospatial information is what CFMask and the other threshold-based approaches lack.</p>
<p>We evaluate our algorithm on the Landsat 8 CCA dataset, because of its comprehensive human label for cloud and cloud shadow mask and its extensive coverage of different land cover types.</p>
<p>To understand the contribution of different spectral bands to the cloud mask performance, we also conduct ablation experiments that use a subset of the spectral bands as input.</p>
<h2 id="Materials-and-Methods">Materials and Methods</h2>
<h3 id="Landsat-8-Cloud-Cover-Assessment-Validation-Dataset">Landsat 8 Cloud Cover Assessment Validation Dataset</h3>
<blockquote>
<p>Landsat 8 Cloud Cover Assessment Validation Data: <a class="link"   href="https://landsat.usgs.gov/landsat-8-cloud-cover-assessment-validation-data" >download<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Data-Preparation">Data Preparation</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ADeepMask/1642405451463.png"
                      alt="image"
                ></p>
<p align="center">Figure 1: Data preparation flowchart</p>
<p>We cast the cloud mask prediction as a binary classification problem. All pixels are divided into 2 classes: clear (ground) pixels and cloud/shadow pixels. We choose not to separate cloud and shadow pixels due to the high <strong>imbalance</strong> between cloud and shadow classes. The entire data preprocessing pipeline is summarized in Figure 1.</p>
<h3 id="Convolutional-Neural-Network-and-ResNet">Convolutional Neural Network and ResNet</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>CNN</p>
<ul class="lvl-2">
<li class="lvl-4">Be powerful at capturing local features.</li>
<li class="lvl-4">It has significantly fewer parameters to learn than a fully connected neural network.</li>
</ul>
</li>
<li class="lvl-2">
<p>ResNet</p>
<ul class="lvl-2">
<li class="lvl-4">Residual learning: skip connections.</li>
<li class="lvl-4">ResNets can have much larger depth without the burden of the vanishing or exploding gradient problem.</li>
</ul>
</li>
</ul>
<h3 id="The-DeepMask-Algorithm">The DeepMask Algorithm</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ADeepMask/1642406854978.png"
                      alt="image"
                ></p>
<p>Figure 2: DeepMask algorithm is a unified pipeline, consisting of the local region extractor (module A) and the ResNet backbone (module B). A zoomed-in view (module C) of a typical residual block is also given.</p>
<h3 id="Experiment-Design">Experiment Design</h3>
<h4 id="Land-type-specific-Experiments">Land-type-specific Experiments</h4>
<p>In land-type-specific experiments, we train a model for each land cover type and evaluate its performance on images of that specific land type.</p>
<p>For example, barren has 12 scene images. One scene image is left out as the test image, and all other 11 images are used for training and validation.</p>
<h4 id="All-land-type-Experiments">All-land-type Experiments</h4>
<p>Different from the land-type-specific experiments, all-land-type models are trained using a sample of images from all the land cover types, and then tested on a set of reserved test images. During the training stage, for each land type, we randomly reserve one image as the test image and use all other images for training and validation.</p>
<h4 id="Ablation-Experiments">Ablation Experiments</h4>
<p>To analyze the contribution of individual spectral band to cloud and shadow detection accuracy, we also perform ablation experiments on the spectral bands.</p>
<h3 id="Evaluation-Metrics">Evaluation Metrics</h3>
<p>Following the tradition in the cloud mask and machine learning literatures, we select overall accuracy, precision, recall, F1 score, Area Under the Receiver Operating Characteristic Curve (AUROC), and Average Precision (AP) as our evaluation metrics.</p>
<h2 id="Results">Results</h2>
<h3 id="Quantitative-Results">Quantitative Results</h3>
<h4 id="Land-type-specific-Experiments-2">Land-type-specific Experiments</h4>
<p>Table 2: Land-type-specific model test performance averaged across all land types</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ADeepMask/1642408375990.png"
                      alt="image"
                ></p>
<p>Table 3: Land-type-specific DeepMask test performance by land type</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ADeepMask/1642408738605.png"
                      alt="image"
                ></p>
<p>Table 4: Land-type-specific CFMask test performance by land type</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ADeepMask/1642408755270.png"
                      alt="image"
                ></p>
<h4 id="All-land-type-and-Ablation-Experiments">All-land-type and Ablation Experiments</h4>
<p>Table 5: All land type model test performance and ablation experiments</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ADeepMask/1642408938610.png"
                      alt="image"
                ></p>
<h3 id="Qualitative-Results">Qualitative Results</h3>
<p>Figure 3: Example visualization of raw RGB image (1st row), ground truth labels (2nd row), CFMask results (3rd row), and DeepMask results (last row), for four land types: snow (1st column), water (2nd column), wetland (3rd column) and urban (last column). For ground truth label, CFMask results and DeepMask results, gray color denotes clear pixels, and white color denotes cloud/shadow pixels.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ADeepMask/1642409810718.png"
                      alt="image"
                ></p>
<p>Figure 4: Example visualization of raw image (RGB), ground truth labels, CFMask results, and DeepMask results, for four land types: crops, forest, barren and shrubland. For ground truth label, CFMask results and DeepMask results, gray color denotes clear pixels, and white color denotes cloud/shadow pixels.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9ADeepMask/1642409844936.png"
                      alt="image"
                ></p>
<h2 id="Discussion">Discussion</h2>
<h2 id="Conclusion">Conclusion</h2>
<h2 id="Acknowledgment">Acknowledgment</h2>
<h2 id="References">References</h2>
<h2 id="Appendix">Appendix</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>pervasive</strong>: a. 普遍的, 流行的, 到处蔓延的, 到处渗透的</p>
</li>
</ul>
<blockquote>
<p><strong>Example</strong>: Detecting and masking cloud and cloud shadow from satellite remote sensing images is a pervasive problem in the remote sensing community.</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>harness: n. 马具, 挽具状带子, 甲胄 vt. 给…上挽具, 驾驭, 披上甲胄, 利用…以产生动力</p>
</li>
<li class="lvl-2">
<p><strong>parsimonious</strong>: a. 过度节俭的, 吝啬小气的</p>
</li>
<li class="lvl-2">
<p><strong>compatible</strong>: a. 能共处的, 可并立的, 适合的 [计] 相容的; 兼容的</p>
</li>
<li class="lvl-2">
<p>occlusion: n. 闭塞, 咬合, 包藏 [化] 包藏</p>
</li>
<li class="lvl-2">
<p>contamination: n. 污染, 污物 [化] 污染; 沾污</p>
</li>
<li class="lvl-2">
<p>ablation experiment: <a class="link"   href="https://blog.csdn.net/gaolijing_/article/details/105626733" >消融实验<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li class="lvl-2">
<p>biome: n. 生物群落区</p>
</li>
<li class="lvl-2">
<p>altitude: n. 高度, 海拔, 高处 [电] 高度</p>
</li>
<li class="lvl-2">
<p>heterogeneity: n. 异种, 异质, 不同成分 [化] 不均匀性; 多相性</p>
</li>
<li class="lvl-2">
<p>atmospheric correction: 大气矫正</p>
</li>
<li class="lvl-2">
<p>land type classification: 土地类型分类</p>
</li>
<li class="lvl-2">
<p>tackle: n. 工具, 复滑车, 滑车, 装备, 扭倒 vt. 固定, 处理, 抓住 vi. 扭倒</p>
</li>
<li class="lvl-2">
<p><strong>contaminated</strong>: a. 受污染的；弄脏的</p>
</li>
<li class="lvl-2">
<p>derive: vt. 得自 vi. 起源</p>
</li>
<li class="lvl-2">
<p>with the renaissance of computer vision: 随着计算机视觉的复兴</p>
</li>
<li class="lvl-2">
<p>comprehensive: a. 广泛的, 有理解力的, 综合的 [经] 广泛的, 综合的, 全面的</p>
</li>
<li class="lvl-2">
<p>backbone: n. 脊椎, 志气, 骨干, 支柱 [计] 主干网, 主干网点</p>
</li>
<li class="lvl-2">
<p>pre-processing or post-processing: 预处理或后处理</p>
</li>
<li class="lvl-2">
<p>convention: n. 大会, 协定, 惯例, 约定 [计] 约定</p>
</li>
</ul>
<blockquote>
<p><strong>Example</strong>: We compare our performance against CFMask, following the convention of most cloud mask papers.</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>fraction: n. 小部分, 破片, 分数 [医] 部分, 成分, 分散</p>
</li>
<li class="lvl-2">
<p>annotate: v. 作注解, 注释 [计] 注释</p>
</li>
<li class="lvl-2">
<p>slight: n. 轻蔑, 怠慢 a. 轻微的, 纤细的, 脆弱的, 苗条的 vt. 轻视, 忽略, 怠慢</p>
</li>
<li class="lvl-2">
<p>intersection: n. 交集, 十字路口, 交叉点 [计] 逻辑乘; 与</p>
</li>
<li class="lvl-2">
<p>cast: n. 演员阵容, 投掷, 铸件, 预测, 特性 vt. 投, 掷, 抛, 脱落, 铸, 使弯曲, 计算 vi. 投, 计算, 浇铸成型</p>
</li>
<li class="lvl-2">
</li>
</ul>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>deepmask</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读：DeepMask</title>
    <url>/2022/01/11/Paper-Reading-DeepMask/zh/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> skimage.metrics <span class="keyword">import</span> peak_signal_noise_ratio <span class="keyword">as</span> psnr</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img1 = np.array(Image.<span class="built_in">open</span>(<span class="string">&#x27;original.jpg&#x27;</span>))</span><br><span class="line">img2 = np.array(Image.<span class="built_in">open</span>(<span class="string">&#x27;compress.jpg&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(psnr(img1, img2))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>deepmask</tag>
      </tags>
  </entry>
</search>
