<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZXC&#39;s Blog</title>
  
  
  <link href="https://xavierjiezou.github.io/atom.xml" rel="self"/>
  
  <link href="https://xavierjiezou.github.io/"/>
  <updated>2022-05-18T07:52:18.739Z</updated>
  <id>https://xavierjiezou.github.io/</id>
  
  <author>
    <name>Xavier Jiezou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【原创工具 | ys-dl】原神官方社区COS与同人图自动抓取（基于 Python 动态爬虫实现）</title>
    <link href="https://xavierjiezou.github.io/2022/05/18/%E3%80%90%E5%8E%9F%E5%88%9B%E5%B7%A5%E5%85%B7-ys-dl%E3%80%91%E5%8E%9F%E7%A5%9E%E5%AE%98%E6%96%B9%E7%A4%BE%E5%8C%BACOS%E4%B8%8E%E5%90%8C%E4%BA%BA%E5%9B%BE%E8%87%AA%E5%8A%A8%E6%8A%93%E5%8F%96%EF%BC%88%E5%9F%BA%E4%BA%8E-Python-%E5%8A%A8%E6%80%81%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/05/18/%E3%80%90%E5%8E%9F%E5%88%9B%E5%B7%A5%E5%85%B7-ys-dl%E3%80%91%E5%8E%9F%E7%A5%9E%E5%AE%98%E6%96%B9%E7%A4%BE%E5%8C%BACOS%E4%B8%8E%E5%90%8C%E4%BA%BA%E5%9B%BE%E8%87%AA%E5%8A%A8%E6%8A%93%E5%8F%96%EF%BC%88%E5%9F%BA%E4%BA%8E-Python-%E5%8A%A8%E6%80%81%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%EF%BC%89/</id>
    <published>2022-05-18T15:29:36.000Z</published>
    <updated>2022-05-18T07:52:18.739Z</updated>
    
    <content type="html"><![CDATA[<p align="center">    <img  alt="logo"                      lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/【原创工具-ys-dl】原神官方社区COS与同人图自动抓取（基于-Python-动态爬虫实现）/logo.ico"                                      >    <h1 align="center">原神下载器</h1>    <p align="center">一个可以从<a class="link"   href="https://bbs.mihoyo.com/ys/" >原神社区<i class="fas fa-external-link-alt"></i></a>自动抓取图片的命令行工具。    </p></p><p align="center">    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.shields.io/github/workflow/status/XavierJiezou/ys-dl/Release"                      alt="GitHub Workflow Status"                >    <a        href="https://www.codacy.com/gh/XavierJiezou/ys-dl/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=XavierJiezou/ys-dl&amp;utm_campaign=Badge_Grade">        <img                       lazyload                     src="/images/loading.svg"                     data-src="https://app.codacy.com/project/badge/Grade/c2f85c8d6b8a4892b40059703f087eab"                      alt="Codacy Badge"                >    </a>    <a href="https://codecov.io/gh/XavierJiezou/ys-dl">        <img                       lazyload                     src="/images/loading.svg"                     data-src="https://codecov.io/gh/XavierJiezou/ys-dl/branch/main/graph/badge.svg?token=QpCLcUGoYx"                      alt="codecov"                >    </a>    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.shields.io/pypi/pyversions/ys-dl"                      alt="PyPI - Python Version"                >    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.shields.io/pypi/dm/ys-dl"                      alt="PyPI - Downloads"                >    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.shields.io/pypi/v/ys-dl"                      alt="PyPI"                >    <a href="https://github.com/XavierJiezou/ys-dl/stargazers">        <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.shields.io/github/stars/XavierJiezou/ys-dl"                      alt="GitHub stars"                >    </a>    <a href="https://github.com/XavierJiezou/ys-dl/network">        <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.shields.io/github/forks/XavierJiezou/ys-dl"                      alt="GitHub forks"                >    </a>    <a href="https://github.com/XavierJiezou/ys-dl/issues">        <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.shields.io/github/issues/XavierJiezou/ys-dl"                      alt="GitHub issues"                >    </a>    <a href="https://github.com/XavierJiezou/ys-dl/blob/main/LICENSE">        <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.shields.io/github/license/XavierJiezou/ys-dl"                      alt="GitHub license"                >    </a>    <br />    <a href="https://www.python.org/">        <img                       lazyload                     src="/images/loading.svg"                     data-src="http://ForTheBadge.com/images/badges/made-with-python.svg"                      alt="forthebadge made-with-python"                >    </a>        <a href="https://github.com/XavierJiezou">        <img                       lazyload                     src="/images/loading.svg"                     data-src="http://ForTheBadge.com/images/badges/built-with-love.svg"                      alt="ForTheBadge built-with-love"                >        </a>    </p>  <p align="center">    <a href="#演示">观看演示</a>    •    <a class="link"   href="https://github.com/xavierjiezou/ys-dl/issues/new" >报告错误<i class="fas fa-external-link-alt"></i></a>    •    <a class="link"   href="https://github.com/xavierjiezou/ys-dl/issues/new" >功能需求<i class="fas fa-external-link-alt"></i></a>  </p>  <p align="center">    <a href="/docs/README.en.md">English </a>    •    <a href="/docs/README.cn.md">简体中文</a>  </p></p><p align="center">喜欢这个项目吗？请考虑捐赠<a href="https://paypal.me/xavierjiezou?country.x=C2&locale.x=zh_XC">（<a class="link"   href="https://fastly.jsdelivr.net/gh/XavierJiezou/ys-dl@main/image/wechat.jpg" >微信<i class="fas fa-external-link-alt"></i></a> | <a class="link"   href="https://fastly.jsdelivr.net/gh/XavierJiezou/ys-dl@main/image/alipay.jpg" >支付宝<i class="fas fa-external-link-alt"></i></a>）</a>，以帮助它改善！<hr><h2 id="引言-21">引言</h2><p>这是笔者基于 Python 开发的第二个开源工具了。本工具参考 <code>youtube-dl</code>（一个开源的 youtube 视频下载器）的命名方式，取名为 <code>ys-dl</code>，全称 <code>Yuanshen-Downloader</code>，译为原神下载器。</p><h2 id="简介-10">简介</h2><p>本工具可以从原神<a class="link"   href="https://bbs.mihoyo.com/ys/" >官方社区<i class="fas fa-external-link-alt"></i></a>（米游社）实现自动化COS 与同人图抓取与下载，适用于原神玩家与广大二次元爱好者。话不多说，直接上图。</p><h2 id="演示">演示</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90%E5%8E%9F%E5%88%9B%E5%B7%A5%E5%85%B7-ys-dl%E3%80%91%E5%8E%9F%E7%A5%9E%E5%AE%98%E6%96%B9%E7%A4%BE%E5%8C%BACOS%E4%B8%8E%E5%90%8C%E4%BA%BA%E5%9B%BE%E8%87%AA%E5%8A%A8%E6%8A%93%E5%8F%96%EF%BC%88%E5%9F%BA%E4%BA%8E-Python-%E5%8A%A8%E6%80%81%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%EF%BC%89/demo.png"                      alt="demo"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90%E5%8E%9F%E5%88%9B%E5%B7%A5%E5%85%B7-ys-dl%E3%80%91%E5%8E%9F%E7%A5%9E%E5%AE%98%E6%96%B9%E7%A4%BE%E5%8C%BACOS%E4%B8%8E%E5%90%8C%E4%BA%BA%E5%9B%BE%E8%87%AA%E5%8A%A8%E6%8A%93%E5%8F%96%EF%BC%88%E5%9F%BA%E4%BA%8E-Python-%E5%8A%A8%E6%80%81%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0%EF%BC%89/show.png"                      alt="show"                ></p><h2 id="安装-20">安装</h2><ol><li class="lvl-3"><p>本程序基于 Python 开发，目前还没有打包为桌面应用程序，因此您的电脑需要安装有 Python 环境。【支持 3.7 及以上版本】</p></li><li class="lvl-3"><p>使用 pip 包管理工具执行命令 <code>pip install ys-dl</code> 完成程序安装。</p></li><li class="lvl-3"><p>本程序依赖于动态爬虫库 Selenium，因此还需要您下载并安装浏览器驱动（目前仅支持 Google Chrome 浏览器）【下载地址：<a class="link"   href="https://chromedriver.chromium.org/downloads" >点击跳转<i class="fas fa-external-link-alt"></i></a> | 安装方式：放到 Python 安装目录下或者是需要执行 <code>ys-dl</code> 命令的地方】</p></li></ol><h2 id="提示-4">提示</h2><p>下载 的 Chrome WebDriver 版本一定要和安装的谷歌浏览器的版本对应喔~~当然，保证大版本对应即可，小版本无需严格对应。非开发者且有强烈使用意愿的可以添加笔者博客主页的微信，笔者可以亲自帮你配置运行环境。</p><h2 id="申明">申明</h2><p>本程序是非常友好的爬虫程序，每下载一张图片都会强制休眠一小段时间，然后再进行下一张图片的下载。因此，正常使用并不会给原神社区的官方服务器施加多大压力。</p><h2 id="关于-25">关于</h2><details><summary>点击查看作者联系方式和微信公众号</summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details>]]></content>
    
    
      
      
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
    &lt;img  alt=&quot;logo&quot; 
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     d</summary>
      
    
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/categories/python/"/>
    
    
    <category term="image" scheme="https://xavierjiezou.github.io/tags/image/"/>
    
    <category term="python" scheme="https://xavierjiezou.github.io/tags/python/"/>
    
    <category term="yuanshen" scheme="https://xavierjiezou.github.io/tags/yuanshen/"/>
    
    <category term="mihoyo" scheme="https://xavierjiezou.github.io/tags/mihoyo/"/>
    
    <category term="downloader" scheme="https://xavierjiezou.github.io/tags/downloader/"/>
    
    <category term="game" scheme="https://xavierjiezou.github.io/tags/game/"/>
    
    <category term="cos" scheme="https://xavierjiezou.github.io/tags/cos/"/>
    
  </entry>
  
  <entry>
    <title>【Python】基于 Sqlite3 的数据库操作（零基础入门教程）</title>
    <link href="https://xavierjiezou.github.io/2022/04/20/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Sqlite3-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/04/20/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Sqlite3-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/</id>
    <published>2022-04-20T09:37:25.000Z</published>
    <updated>2022-05-18T07:52:18.735Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/cover/SQLite_Logo.jpg"                      alt="cover" width="100%"                ></p><h2 id="引言-10">引言</h2><p>SQLite 是一个由 C 语言编写的库，它提供了一个轻量级的基于磁盘的数据库，不需要单独开一个数据库服务器，并允许使用 SQL 语句访问数据库。</p><p>判断是否使用 SQLite 的标准：</p><ul class="lvl-0"><li class="lvl-2"><p>数据与应用分离：不适用 SQLite</p></li><li class="lvl-2"><p>要求高并发性：不适用 SQLite</p></li><li class="lvl-2"><p>大数据：不适用 SQLite</p></li><li class="lvl-2"><p>否则，选择 SQLite</p></li></ul><p>SQLite 不是一个 client/server 架构的数据库引擎（如 MySQL、Oracle、PostgreSQL 或 SQL Server 等），它致力于为单个应用程序提供本地存储，强调经济性、效率、可靠性、独立性和简单性，而不追求可伸缩性、并发性、集中性和控制性。</p><p>Python3 内置了一个名为 <code>sqlite3</code> 标准模块，提供了 SQLite 数据库操作的一整套接口，本文是利用该模块实现数据库操作的零基础入门教程。</p><blockquote><p>sqlite3 是以 <a class="link"   href="http://github.com/ghaering/pysqlite" >pysqlite<i class="fas fa-external-link-alt"></i></a> 的名称在外部进行开发，其开发参考了 <a class="link"   href="https://www.python.org/dev/peps/pep-0249" >PEP 249<i class="fas fa-external-link-alt"></i></a> 定义的 <code>Database API Specification 2.0</code>（数据库接口规范 2.0），以及 <a class="link"   href="https://www.sqlite.org/" >SQLite<i class="fas fa-external-link-alt"></i></a> 官网提供的 SQL 语法和数据类型。</p></blockquote><h2 id="安装-14">安装</h2><p><code>sqlite3</code> 是 Python3 的内置标准模块，不用额外安装。</p><h2 id="教程-7">教程</h2><p>这里简要介绍一下数据库操作的一般流程：</p><ol><li class="lvl-3"><p>开启数据库连接</p></li><li class="lvl-3"><p>新建游标</p></li><li class="lvl-3"><p>调用游标执行 SQL 语句</p></li><li class="lvl-3"><p>关闭游标</p></li><li class="lvl-3"><p>提交数据库更改（如果抛出异常，则回滚）</p></li><li class="lvl-3"><p>关闭数据库连接</p></li></ol><p>最常见的增删改查操作都通过执行 SQL 语句中实现。</p><h3 id="创建和关闭数据库连接">创建和关闭数据库连接</h3><p>如要使用该模块，首先必须创建一个表示数据库的 <code>Connection</code> 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>如果不存在 <code>demo.db</code> 文件，将自动创建；如果存在，则直接进行连接。</p><h3 id="新建表">新建表</h3><p>一旦你有了一个 <code>Connection</code>，你可以创建一个 <code>Cursor</code> 对象，并调用它的 <code>execute()</code> 方法来执行 SQL 命令，比如在数据库中新建一个名为 <code>student</code> 的表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    create table student(</span></span><br><span class="line"><span class="string">        id integer primary key autoincrement not null,</span></span><br><span class="line"><span class="string">        name text,</span></span><br><span class="line"><span class="string">        age integer</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>如果表已经存在，会抛出 <code>OperationalError</code> 异常。为避免抛出该异常，可以使用 Python 的异常捕捉进行处理，也可以在 SQL 语句中进行表是否存在的判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    create table if not exists student(</span></span><br><span class="line"><span class="string">        id integer primary key autoincrement not null,</span></span><br><span class="line"><span class="string">        name text,</span></span><br><span class="line"><span class="string">        age integer</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="插入记录【增】">插入记录【增】</h3><p>接下来，让我们向表中插入几条记录用于测试。</p><ul class="lvl-0"><li class="lvl-2"><p>插入一条记录</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">data = (<span class="number">1</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">sql = <span class="string">&#x27;insert into student values (?, ?, ?)&#x27;</span></span><br><span class="line">cursor.execute(sql, data)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>插入多行记录</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">data = [</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&#x27;lily&#x27;</span>, <span class="number">19</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&#x27;mike&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">]</span><br><span class="line">sql = <span class="string">&#x27;insert into student values (?, ?, ?)&#x27;</span></span><br><span class="line">cursor.executemany(sql, data)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>通常，你不应该使用 Python 的字符串操作来组合 SQL 语句，因为这样做是不安全的，容易受到 SQL 注入攻击。正确的做法是使用 <code>?</code> 作为占位符，然后将值的元组或元组嵌套的列表作为第二个参数传递给 execute() 或 executemany() 方法。</p><h3 id="查询记录【查】">查询记录【查】</h3><ul class="lvl-0"><li class="lvl-2"><p>查询表中所有字段的记录</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;select * from student&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><pre><code>(1, 'john', 18)(2, 'lily', 19)(3, 'mike', 20)</code></pre><ul class="lvl-0"><li class="lvl-2"><p>查询表中指定字段的记录</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;select name from student&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><pre><code>('john',)('lily',)('mike',)</code></pre><ul class="lvl-0"><li class="lvl-2"><p>根据条件查询表中的记录</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;select * from student where age = 18&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cursor:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><pre><code>(1, 'john', 18)</code></pre><h3 id="修改记录【改】">修改记录【改】</h3><p>例如，将 <code>mike</code> 的 <code>name</code> 修改为 <code>mary</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&quot;update student set name = &#x27;mary&#x27; where name = &#x27;mike&#x27;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="删除记录【删】">删除记录【删】</h3><ul class="lvl-0"><li class="lvl-2"><p>按条件删除表记录</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&quot;delete from student where name = &#x27;lily&#x27;&quot;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>清空表中所有记录</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;delete from student&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="删除表">删除表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;demo.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">sql = <span class="string">&#x27;drop table student&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="附录">附录</h2><p>数据库表操作常用的 SQL 命令：</p><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>新建表</td><td>create table [if not exists] <code>TABLE_NAME</code> <code>COLUMN_DEF</code></td></tr><tr><td>清空表中所有记录</td><td>delete from <code>TABLE_NAME</code></td></tr><tr><td>按条件清除表记录</td><td>delete from <code>TABLE_NAME</code> where <code>EXPR</code></td></tr><tr><td>删除表</td><td>drop table [if exists] <code>TABLE_NAME</code></td></tr><tr><td>查看表字段</td><td>pragma table_info(<code>TABLE_NAME</code>)</td></tr><tr><td>修改表名称</td><td>alter table <code>OLD_TABLE_NAME</code> rename to <code>NEW_TABLE_NAME</code></td></tr><tr><td>添加表字段</td><td>alter table <code>TABLE_NAME</code> add <code>NEW_COLUMN_NAME</code> [<code>COLUMN_DEF</code>]</td></tr><tr><td>删除表字段</td><td>alter table <code>TABLE_NAME</code> drop <code>COLUMN_NAME</code></td></tr><tr><td>修改字段名</td><td>alter table <code>TABLE_NAME</code> rename column <code>OLD_COLUMN_NAME</code> to <code>NEW_COLUMN_NAME</code></td></tr><tr><td>插入表记录</td><td>insert into <code>TABLE_NAME</code> [(<code>COLUMN_NAME</code>)] values (<code>EXPR</code>)</td></tr><tr><td>向表中插入查询返回的数据</td><td>insert into <code>TABLE_NAME</code> select <code>EXPR</code></td></tr><tr><td>在表末尾插入一条默认数据</td><td>insert into <code>TABLE_NAME</code> default values</td></tr><tr><td>更新表记录</td><td>update <code>TABLE_NAME</code> set <code>COLUMN1_NAME</code> = <code>EXPR1</code> , <code>COLUMN2_NAME</code> = <code>EXPR2</code> [from <code>TABLE_NAME</code> or <code>SUBQUERY</code>] [where <code>EXPR</code>]</td></tr><tr><td>查询表中所有字段的记录</td><td>select * from <code>TABLE_NAME</code> [where <code>EXPR</code>] [group by <code>EXPR</code>] [order by <code>ORDERING-TERM</code>] [limit <code>EXPR</code>]</td></tr><tr><td>查询表中指定字段的记录</td><td>select <code>COLUMN1_NAME</code> , <code>COLUMN2_NAME</code> from <code>TABLE_NAME</code></td></tr></tbody></table><p>更多关于 SQL 语句的详细信息请参见<a class="link"   href="https://www.sqlite.org/doclist.html" >官方文档<i class="fas fa-external-link-alt"></i></a>。</p><h2 id="概念">概念</h2><h3 id="数据类型">数据类型</h3><p>SQLite 官方定义了如下五种<a class="link"   href="https://www.sqlite.org/datatype3.html" >数据类型<i class="fas fa-external-link-alt"></i></a>：</p><ul class="lvl-0"><li class="lvl-2"><p>NULL：空值。</p></li><li class="lvl-2"><p>INTEGER：整数。</p></li><li class="lvl-2"><p>REAL：小数。</p></li><li class="lvl-2"><p>TEXT：文本字符串。</p></li><li class="lvl-2"><p>BLOB：二进制对象。</p></li></ul><p>SQLite 没有单独的布尔数据存储类型，布尔值被存储为整数 0 (false) 和 1 (true)。</p><p>在 sqlite3 模块中，Python 数据类型和 SQLite 数据类型可以相互转换。</p><p>Python 数据类型在 SQLite 中的呈现方式：</p><table><thead><tr><th>Python type</th><th>SQLite type</th></tr></thead><tbody><tr><td>None</td><td>NULL</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>INTEGER</td></tr><tr><td>float</td><td>REAL</td></tr><tr><td>str (UTF8-encoded)</td><td>TEXT</td></tr><tr><td>unicode</td><td>TEXT</td></tr><tr><td>buffer</td><td>BLOB</td></tr></tbody></table><p>SQLite 数据类型在 Python 中按照如下方式转换：</p><table><thead><tr><th>SQLite type</th><th>Python type</th></tr></thead><tbody><tr><td>NULL</td><td>None</td></tr><tr><td>INTEGER</td><td>int or long, depending on size</td></tr><tr><td>REAL</td><td>float</td></tr><tr><td>TEXT</td><td>depends on text_factory, unicode by default</td></tr><tr><td>BLOB</td><td>buffer</td></tr></tbody></table><h3 id="字段定义">字段定义</h3><p>除数据类型外，定义字段时还有很多其他可选参数：</p><ul class="lvl-0"><li class="lvl-2"><p>primary key：主键。其值能唯一标识表中的每一行。</p></li><li class="lvl-2"><p>primary key autoincrement：主键自增。插入数据时无需带上主键的值，因为它可以自动递增赋值。</p></li><li class="lvl-2"><p>not null：非空。该字段内不允许出现空值。</p></li><li class="lvl-2"><p>unique：唯一。该字段内不允许出现重复值。</p></li><li class="lvl-2"><p>default：默认。设置该字段的默认值。</p></li></ul><h2 id="接口">接口</h2><h3 id="Connection">Connection</h3><p>Connection 对象主要实现了以下方法：</p><ul class="lvl-0"><li class="lvl-2"><p>.close()：关闭数据库连接。关闭之后，试图对数据库进行的任何操作都将引发 <code>Error</code> 异常。</p></li><li class="lvl-2"><p>.commit()：提交所有挂起的任务到数据库。</p></li><li class="lvl-2"><p>.rollback()：回滚数据库到挂起任务尚未执行之前。值得注意的是，如果在没有提交更改的情况下就关闭了数据库连接，将会自动执行隐式回滚。</p></li><li class="lvl-2"><p>.cursor()：返回一个新的使用该连接的 <code>Cursor</code> 对象。</p></li></ul><h3 id="Cursor">Cursor</h3><p>Cursor 对象主要实现了以下属性和方法：</p><ul class="lvl-0"><li class="lvl-2"><p>属性</p><ul class="lvl-2"><li class="lvl-4">.description：游标描述信息。如果没有有意义的信息，就返回 <code>None</code>。</li><li class="lvl-4">.rowcount：执行最后一个 SQL 语句操作的行数。如果没有 SQL 语句执行，返回 <code>-1</code>。</li></ul></li><li class="lvl-2"><p>方法</p><ul class="lvl-2"><li class="lvl-4">.close()：关闭游标。关闭之后，试图对游标进行的任何操作都将引发 <code>Error</code> 异常。</li><li class="lvl-4">.execute(sql [, parameters])：准备并执行 SQL 语句。</li><li class="lvl-4">.executemany(sql, seq_of_parameters)：准备并执行 SQL 语句。接受的参数是一个序列。</li><li class="lvl-4">.fetchone()：获取查询结果中的一行，返回单个序列。如果查询结果结果是空，返回 <code>None</code>。如果之前执行的 sql 语句没有任何返回结果，抛出 <code>Error</code> 异常。</li><li class="lvl-4">.fetchmany([size=cursor.arraysize])：获取多行查询结果，返回一个嵌套的序列，例如，嵌套在列表里面的元组。</li><li class="lvl-4">.fetchall()：获取查询结果的所有行，返回一个嵌套的序列。</li></ul></li></ul><h2 id="参考-13">参考</h2><blockquote><ul class="lvl-1"><li class="lvl-2"><p><a class="link"   href="https://www.sqlite.org/index.html" >SQLite Home Page<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p><a class="link"   href="https://peps.python.org/pep-0249/" >PEP 249 – Python Database API Specification v2.0<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p><a class="link"   href="https://pysqlite.readthedocs.io/en/latest/sqlite3.html" >sqlite3 — DB-API 2.0 interface for SQLite databases<i class="fas fa-external-link-alt"></i></a></p></li></ul></blockquote><h2 id="关于-14">关于</h2><details><summary>点击查看作者联系方式和微信公众号</summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-14">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/anime/%E9%81%A0%E5%9D%82%E3%81%82%E3%81%95%E3%81%8E-pixiv.net-82092664.jpg"                      alt="anime" width="100%"                ></p><center><font color="#ccc">【画师】遠坂あさぎ 【P站ID】82092664</font></center>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/tags/python/"/>
    
    <category term="sqlite" scheme="https://xavierjiezou.github.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>【Python】快速创建一个简易 HTTP 服务器（http.server）</title>
    <link href="https://xavierjiezou.github.io/2022/04/16/%E3%80%90Python%E3%80%91%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93-HTTP-%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88http.server%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/04/16/%E3%80%90Python%E3%80%91%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93-HTTP-%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88http.server%EF%BC%89/</id>
    <published>2022-04-16T13:16:32.000Z</published>
    <updated>2022-05-18T07:52:18.735Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/cover/Python_Logo.png"                      alt="cover" width="100%"                ></p><h2 id="引言-13">引言</h2><p><code>http.server</code> 是 <code>socketserver.TCPServer</code> 的子类，它在 HTTP 套接字上创建和监听，并将请求分派给处理程序。本文是关于如何使用 Python 的 <code>http.server</code> 模块快速地搭建一个简易 HTTP 服务器的教程。</p><h2 id="安装-17">安装</h2><p>Python3 内置标准模块，无需安装。（在之前的 Python2 版本名称是 <code>SimpleHTTPServer</code>）</p><h2 id="教程-9">教程</h2><h3 id="用命令行创建">用命令行创建</h3><div class="success"><p>http.server 支持以 Python 解释器的 -m 参数直接调用。</p></div><p>通过执行如下命令创建一个最简单的 HTTP 服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p>服务器默认监听端口是 8000，支持自定义端口号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 9000</span><br></pre></td></tr></table></figure><p>服务器默认绑定到所有接口，可以通过 <code>-b/--bind</code> 指定地址，如本地主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server --<span class="built_in">bind</span> 127.0.0.1</span><br></pre></td></tr></table></figure><p>服务器默认工作目录为当前目录，可通过 <code>-d/--directory</code> 参数指定工作目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server --directory /tmp/</span><br></pre></td></tr></table></figure><p>此外，可以通过传递参数 <code>--cgi</code> 启用 <a class="link"   href="https://baike.baidu.com/item/CGI/607810" >CGI<i class="fas fa-external-link-alt"></i></a> 请求处理程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server --cgi</span><br></pre></td></tr></table></figure><h3 id="编写代码创建">编写代码创建</h3><div class="tips"><p>http.server 也支持在代码中调用，导入对应的类和函数即可。</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> SimpleHTTPRequestHandler</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> CGIHTTPRequestHandler</span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> ThreadingHTTPServer</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DualStackServer</span>(<span class="params">ThreadingHTTPServer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_bind</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># suppress exception when protocol is IPv4</span></span><br><span class="line">        <span class="keyword">with</span> contextlib.suppress(Exception):</span><br><span class="line">            self.socket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_V6ONLY, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().server_bind()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">server_class=DualStackServer,</span></span></span><br><span class="line"><span class="params"><span class="function">        handler_class=SimpleHTTPRequestHandler,</span></span></span><br><span class="line"><span class="params"><span class="function">        port=<span class="number">8000</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        bind=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        cgi=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        directory=os.getcwd(<span class="params"></span>)</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Run an HTTP server on port 8000 (or the port argument).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        server_class (_type_, optional): Class of server. Defaults to DualStackServer.</span></span><br><span class="line"><span class="string">        handler_class (_type_, optional): Class of handler. Defaults to SimpleHTTPRequestHandler.</span></span><br><span class="line"><span class="string">        port (int, optional): Specify alternate port. Defaults to 8000.</span></span><br><span class="line"><span class="string">        bind (str, optional): Specify alternate bind address. Defaults to &#x27;127.0.0.1&#x27;.</span></span><br><span class="line"><span class="string">        cgi (bool, optional): Run as CGI Server. Defaults to False.</span></span><br><span class="line"><span class="string">        directory (_type_, optional): Specify alternative directory. Defaults to os.getcwd().</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cgi:</span><br><span class="line">        handler_class = partial(CGIHTTPRequestHandler, directory=directory)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        handler_class = partial(SimpleHTTPRequestHandler, directory=directory)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> server_class((bind, port), handler_class) <span class="keyword">as</span> httpd:</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">f&quot;Serving HTTP on <span class="subst">&#123;bind&#125;</span> port <span class="subst">&#123;port&#125;</span> &quot;</span></span><br><span class="line">            <span class="string">f&quot;(http://<span class="subst">&#123;bind&#125;</span>:<span class="subst">&#123;port&#125;</span>/) ...&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            httpd.serve_forever()</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\nKeyboard interrupt received, exiting.&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run(port=<span class="number">8000</span>, bind=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>server_class</code>：服务器类</p></li><li class="lvl-2"><p><code>handler_class</code>：请求处理类</p></li><li class="lvl-2"><p><code>port</code>：端口</p></li><li class="lvl-2"><p><code>bind</code>：IP</p></li><li class="lvl-2"><p><code>cgi</code>：是否启用 CGI 请求处理程序</p></li><li class="lvl-2"><p><code>directory</code>：工作目录</p></li></ul><h2 id="实例">实例</h2><p>既然我们已经知道了 http.server 能够快速地创建一个 HTTP 服务器，那么它能应用到哪些项目场景？</p><ol><li class="lvl-3"><p>小型 web 项目在局域网内的预览</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>项目目录</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">web:.</span><br><span class="line">├─index.html</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>index.html</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>切换到目录 <code>cd web</code>，执行命令 <code>python -m http.server</code>，浏览器地址栏输入 <code>localhost:8000</code>，显示：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><div class="tips"><p>对于局域网的其他用户，可通过你的主机IP+端口号访问，如你的主机IP是192.168.0.1，那么将网址 192.168.0.1:8000 发送给你的同事或同学，他们也可以看到 index.html 文件渲染的内容。</p></div><ol start="2"><li class="lvl-3"><p>在本地浏览器访问远程服务器的端口映射</p></li></ol><p>如果通过 VSCode 连接远程服务器，使用 http.server 开启一个端口后，会自动映射到本地，这样在本地浏览器就能查看和下载远程服务器资源。（除 VSCode 外，其他工具应该也可以实现远程与本地的端口映射）</p><h2 id="注意-2">注意</h2><div class="warning"><p>http.server 只实现了最基本的安全审查，请不要用于生产环境。</p></div><h2 id="参考-16">参考</h2><blockquote><p><a class="link"   href="https://docs.python.org/3/library/http.server.html" >http.server 官方文档<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="关于-16">关于</h2><details><summary>点击查看作者联系方式和微信公众号</summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-16">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/anime/%E3%83%95%E3%82%AB%E3%83%92%E3%83%AC_pixiv.net_78142008.jpg"                      alt="cover" width="100%"                ></p><center><font style="color: #ccc">【画师】フカヒレ 【P站ID】78142008</font></center>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/tags/python/"/>
    
    <category term="http.server" scheme="https://xavierjiezou.github.io/tags/http-server/"/>
    
  </entry>
  
  <entry>
    <title>【Python】创建虚拟环境的三种方式（venv | pipenv | conda）</title>
    <link href="https://xavierjiezou.github.io/2022/04/16/%E3%80%90Python%E3%80%91%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%88venv-pipenv-conda%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/04/16/%E3%80%90Python%E3%80%91%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%88venv-pipenv-conda%EF%BC%89/</id>
    <published>2022-04-16T10:20:12.000Z</published>
    <updated>2022-05-18T07:52:18.735Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/cover/Python_Logo.png"                      alt="cover" width="100%"                ></p><h2 id="引言-8">引言</h2><p>什么是虚拟环境？虚拟环境是一个 Python 环境，其中安装的 Python 解释器、库和脚本与安装在其他虚拟环境中的那些是隔离的，而且（默认情况下）安装在系统 Python 中的任何库（即作为操作系统的一部分安装的库）也是隔离的。</p><p>为什么需要虚拟环境？这是由于 pip 的特性决定的，同一个环境下，仅允许安装每个包的一个版本。假设，这里有三个包，分别为：A、B 和 C。A 包依赖于 B 包的 v1.0 版本，而 C 包依赖于 B 包的 v2.0 版本。如果我安装了 v1.0 的 B 包，那么 C 包就无法使用；如果安装了 v2.0 的 B 包，那么 A 包就无法使用。因此，在同一个环境下，由于只能安装一个版本的 B 包，导致 A 包和 C 包无法同时使用。</p><p>因此，我们需要创建多个 Python 的虚拟环境来解决上述问题。在环境 1 下安装 v1.0 的 B 包，然后就能使用 A 包，在环境 2 下安装 v2.0 的 B 包，就能使用 C 包。也就说，不同虚拟环境下的包是互不影响的，避免了包冲突问题。</p><p>此外，我们推荐每进行一个新的项目开发，就创建一个仅适用于该项目的虚拟 Python 环境。这样有助于包管理，同时还能非常清晰地列出项目开发用到的所有包，生成一键安装清单，方便后期的部署或复现。</p><p>本文将介绍三种最常用的创建 Python 虚拟环境的方式，让您轻松掌握创建及使用虚拟环境的方法。</p><h2 id="教程-6">教程</h2><h3 id="venv">venv</h3><p>Python2 版本创建虚拟环境常使用一个名为 virtualenv 的第三方包。从 Python3.3 以后，标准库就内置了一个名为 venv 的模块，我们可以用它来创建虚拟环境，完全替换 virtualenv。</p><h4 id="安装-10">安装</h4><p>不需要安装，Python3.3 及以上版本的内置标准模块。</p><h4 id="用法-4">用法</h4><ol><li class="lvl-3"><p>创建环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m venv ENV_DIR</span><br></pre></td></tr></table></figure><p><code>ENV_DIR</code> 指定存放环境的目录，一般使用 <code>venv</code>，这是一个不成文的规定。</p><p>虚拟环境的目录树结构如下（Windows）：</p><details><summary><span class="pre-summary">&nbsp;</span><strong>点击展开</strong></summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.venv</span><br><span class="line">    ├─pyvenv.cfg</span><br><span class="line">    ├─Include</span><br><span class="line">    ├─Lib</span><br><span class="line">    │  └─site-packages</span><br><span class="line">    │      ├─pip</span><br><span class="line">    │      ├─pip-20.2.3.dist-info</span><br><span class="line">    │      ├─pkg_resources</span><br><span class="line">    │      ├─setuptools-49.2.1.dist-info</span><br><span class="line">    │      ├─easy_install.py</span><br><span class="line">    │      └─__pycache__</span><br><span class="line">    └─Scripts</span><br><span class="line">    │  └─activate</span><br><span class="line">    │  └─activate.bat</span><br><span class="line">    │  └─Activate.ps1</span><br><span class="line">    │  └─deactivate.bat</span><br><span class="line">    │  └─easy_install-3.9.exe</span><br><span class="line">    │  └─easy_install.exe</span><br><span class="line">    │  └─pip.exe</span><br><span class="line">    │  └─pip3.9.exe</span><br><span class="line">    │  └─pip3.exe</span><br><span class="line">    │  └─python.exe</span><br><span class="line">    │  └─pythonw.exe</span><br></pre></td></tr></table></figure></details><p><code>pyvenv.cfg</code> 是一个配置文件，包含三个参数：</p><ul class="lvl-0"><li class="lvl-2"><p><code>home</code>：指向运行命令的 Python 安装目录；</p></li><li class="lvl-2"><p><code>include-system-site-packages</code>：是否使用系统 Python 环境中安装的包。默认是 <code>false</code>，即不使用；</p></li><li class="lvl-2"><p><code>version</code>：Python 版本号。</p></li></ul><ol start="2"><li class="lvl-3"><p>激活环境</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>Windows</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\ENV_DIR\Scripts\activate</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>Unix/macOS</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ENV_DIR/bin/activate</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>退出环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>删除环境</p></li></ol><p>删除整个环境的安装目录即可。</p><h3 id="pipenv">pipenv</h3><p>pipenv 将包管理工具 pip 和虚拟环境创建工具 virtualenv 有机地结合到了一起，实现了开发环境和生产环境依赖的分离，旨在构建专属于 Python 的开发工作流，达到类似于 npm，yarn 等工具的效果。</p><h4 id="安装-11">安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><h4 id="用法-5">用法</h4><ol><li class="lvl-3"><p>环境管理</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>创建环境：<code>pipenv install</code></p></li><li class="lvl-2"><p>激活环境：<code>pipenv shell</code></p></li><li class="lvl-2"><p>退出环境：<code>exit</code></p></li><li class="lvl-2"><p>删除环境：<code>pipenv --rm</code></p></li></ul><p>pipenv install 命令会根据系统默认 Python 版本来创建虚拟环境，并生成用于依赖包管理的 <code>Pipfile</code> 和 <code>Pipfile.lock</code> 文件。当你将项目分享给他人的时候，执行 pipenv install 命令会创建一个虚拟环境并自动安装 <code>Pipfile</code> 中指定的依赖包。</p><ol start="2"><li class="lvl-3"><p>包管理</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>安装包：</p><ul class="lvl-2"><li class="lvl-4">用包名安装并写入 <code>Pipfile</code> 的生产环境：<code>pipenv install requests</code></li><li class="lvl-4">用包名安装并写入 <code>Pipfile</code> 的开发环境：<code>pipenv install pytest --dev</code></li><li class="lvl-4">安装 <code>Pipfile</code> 中列出的所有生产环境包：<code>pipenv install</code></li><li class="lvl-4">安装 <code>Pipfile</code> 中列出的所有开发环境包：<code>pipenv install --dev</code></li></ul></li><li class="lvl-2"><p>卸载包：</p><ul class="lvl-2"><li class="lvl-4">卸载指定包并从 <code>Pipfile</code> 中移除：<code>pipenv uninstall requests</code></li><li class="lvl-4">卸载所有生产环境包(不从<code>Pipfile</code>中移除)：<code>pipenv uninstall --all</code></li><li class="lvl-4">卸载所有开发环境包并从 <code>Pipfile</code> 中移除：<code>pipenv uninstall --all-dev</code></li></ul></li></ul><ol start="3"><li class="lvl-3"><p>配置 pypi 镜像</p></li></ol><p>将 <code>Pipfile</code> 和 <code>Pipfile.lock</code> 中对应的 pypi 源（<a class="link"   href="https://pypi.org/simple%EF%BC%89%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%E5%8C%85%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82" >https://pypi.org/simple）修改为国内镜像源，可以解决包下载速度慢的问题。<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">清华大学：https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="string">阿里云：http://mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line"><span class="string">中国科技大学</span> <span class="string">https://pypi.mirrors.ustc.edu.cn/simple/</span></span><br><span class="line"><span class="string">豆瓣：http://pypi.douban.com/simple/</span></span><br></pre></td></tr></table></figure><h3 id="conda">conda</h3><p>Anaconda 是一个大型的环境管理系统，支持 Python/R 在内的多种语言。安装 Anaconda 或 Miniconda（精简版） 之后就能使用 conda 命令来创建和管理 Python 环境。</p><h4 id="安装-12">安装</h4><blockquote><p><a class="link"   href="https://blog.csdn.net/qq_42951560/article/details/109035229" >Miniconda软件安装教程（Windows）<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://blog.csdn.net/qq_42951560/article/details/109152114" >Miniconda软件安装教程（Linux）<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="用法-6">用法</h4><ol><li class="lvl-3"><p>创建环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n ENV_NAME python=3.9</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>激活环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate ENV_NAME</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>退出环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>删除环境</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env remove -n ENV_NAME</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ul class="lvl-0"><li class="lvl-2"><p>venv：内置模块，小巧轻便，使用灵活；</p></li><li class="lvl-2"><p>pipenv：Python 开发专属，定义了一套完整的 Python 开发工作流；</p></li><li class="lvl-2"><p>conda：大型的环境管理系统，Python 开发必备软件。</p></li></ul><div class="tips"><p>conda 可以创建多个不同版本的 Python 环境，而 venv 和 pipenv 只能根据系统中已有 Python 版本创建。</p></div><h2 id="拓展-4">拓展</h2><p>在虚拟环境中可通过 pip 命令来进行管理，常用的包管理命令如下（以 requests 包为例）：</p><ul class="lvl-0"><li class="lvl-2"><p>安装包：<code>pip install requests</code></p></li><li class="lvl-2"><p>升级包：<code>pip install --upgrade requests</code></p></li><li class="lvl-2"><p>卸载包：<code>pip uninstall requests</code></p></li></ul><p>此外，安装指定版本的包可通过命令 <code>pip install requests==2.18.4</code> 实现。如果有多个包，可将包名及其对应的版本（中间用<code>==</code>连接，不同包之间换行）写入一个名为 <code>requirements.txt</code> 的文件，然后通过如下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>同理，因为是在虚拟环境中，所以该环境中的安装的所有包都是开发需要用到的，没有其他项目的包，可以通过如下命令导出所有安装包的清单，方便后续复现或持续开发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h2 id="参考-11">参考</h2><blockquote><p><a class="link"   href="https://docs.python.org/3/library/venv.html" >Python官方文档-&gt;venv <i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/" >Python用户指南-&gt;使用 pip 和虚拟环境安装包<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://github.com/pypa/pipenv" >pipenv开源地址<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="关于-12">关于</h2><details><summary>点击查看作者联系方式和微信公众号</summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-12">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/anime/%E9%A3%B4%E7%8E%89%E3%82%B3%E3%83%B3-pixiv.net-78140545.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】飴玉コン 【P站ID】78140545</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/tags/python/"/>
    
    <category term="venv" scheme="https://xavierjiezou.github.io/tags/venv/"/>
    
    <category term="pipenv" scheme="https://xavierjiezou.github.io/tags/pipenv/"/>
    
    <category term="conda" scheme="https://xavierjiezou.github.io/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>【Python】执行系统命令</title>
    <link href="https://xavierjiezou.github.io/2022/04/15/%E3%80%90Python%E3%80%91%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/"/>
    <id>https://xavierjiezou.github.io/2022/04/15/%E3%80%90Python%E3%80%91%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/</id>
    <published>2022-04-15T17:38:16.000Z</published>
    <updated>2022-05-18T07:52:18.735Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Python%E3%80%91%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/Python_Logo.png"                      alt="cover" width="100%"                ></p><h2 id="引言-14">引言</h2><p>Python 编程中可能会需要调用系统命令。本文以一段测试网络连通性的代码来演示如何执行系统命令，并获取输出结果。</p><h2 id="教程-10">教程</h2><h3 id="os-system😐">os.system😐</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">ip</span>):</span></span><br><span class="line">    os.system(<span class="string">f&#x27;ping <span class="subst">&#123;ip&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ping(<span class="built_in">input</span>(<span class="string">&#x27;please enter the ip to ping: &#x27;</span>))</span><br></pre></td></tr></table></figure><p>执行上述代码，输入 <code>baidu.com</code> 并回车，控制台就会打印 <code>ping</code> 结果。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Python%E3%80%91%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/vscode.png"                      alt="vscode"                ></p><hr><p><code>os.system</code> 调用标准 C 函数来实现命令在子进程中执行。它会将命令执行的任何输出重定向到解释器（我们这里是 Python 解释器）的标准输出流。其返回值是进程的退出码，反映进程的退出状态，在 Windows 和 Unix 系统上会有所不同。实测是 Windows 系统上的退出码是 0，表示命令成功执行并关闭进程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">&#x27;pwd&#x27;</span>) </span><br><span class="line">/c/Users/<span class="number">87897</span>/Desktop</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="os-popen😊">os.popen😊</h3><p><code>os.system</code> 函数返回值是进程退出码，无法获取命令执行输出结果。而 <code>os.popen</code> 通过管道的方式连接到执行进程，可灵活地获得命令执行的输出。其返回值是一个连接到管道的打开文件对象，可以根据模式是 <code>r</code> (默认值) 还是 <code>w</code> 来读取或写入。</p><hr><p>根据 os.popen 的特性，我们可以将上述代码简单变动一下：不在控制台打印 ping 结果，而是将其保存在一个名为 <code>ping.log</code> 的日志文件中，方便后续的 debug 或审查。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">ip</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ping.log&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fw:</span><br><span class="line">        <span class="keyword">with</span> os.popen(<span class="string">f&#x27;ping <span class="subst">&#123;ip&#125;</span>&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fr:</span><br><span class="line">            fw.write(fr.read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ping(<span class="built_in">input</span>(<span class="string">&#x27;please enter the ip to ping: &#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="subprocess😁">subprocess😁</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">ip</span>):</span></span><br><span class="line">    p = subprocess.run(</span><br><span class="line">        <span class="string">f&#x27;ping <span class="subst">&#123;ip&#125;</span>&#x27;</span>,</span><br><span class="line">        capture_output=<span class="literal">True</span>,</span><br><span class="line">        text=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> p.stdout</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(ping(<span class="built_in">input</span>(<span class="string">&#x27;please enter the ip to ping: &#x27;</span>)))</span><br></pre></td></tr></table></figure><p>官方开发 <code>subprocess</code> 模块就是为了替换 <code>os.system</code> 和 <code>os.popen</code>，因此更推荐使用 <code>subprocess</code>。通过 <code>subprocess.run</code> 函数开一个子进程来执行系统命令。如果指定 <code>capture_output=True</code>，将返回一个 <code>CompletedProcess</code> 的类实例，该类的 <code>stdout</code> 属性可查看命令的输出结果。</p><h2 id="提示-3">提示</h2><p>如果想让一行执行多条关联命令，比如：先 <code>cd</code> 到一个目录，然后在该目录下新建文件夹，可以用 <code>&amp;</code> 符号将多条命令连接起来，实例代码如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    os.system(<span class="string">&#x27;cd test &amp; mkdir main&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    func()</span><br></pre></td></tr></table></figure><p>如果多条命令没有依赖关系的话，直接多调用几次函数，然后从上到下顺序执行。</p><hr><p>如果执行的命令的时候需要进行人机交互（例如 SSH 远程连接服务器时需要输入密码），可以考虑使用 pexpect 库，这是一个 Python 第三方库，用来启动一个子进程，并对其进行自动化控制。其常规用法如下：</p><ol><li class="lvl-3"><p>使用 <code>spawn</code> 方法来执行程序</p></li><li class="lvl-3"><p>使用 <code>expect </code>方法等待程序打印输入提示关键字</p></li><li class="lvl-3"><p>使用 <code>send/sendline</code> 方法发送字符串到程序</p></li></ol><p>但该库目前仅支持 Unix 系统，对 Windows 系统的支持非常有限，请根据需求选择。</p><h2 id="注意-3">注意</h2><p>上述所有执行系统命令的方式都有被注入恶意脚本的风险。因此，在实际应用场景下，要设置过滤策略，进行代码漏洞排查。</p><hr><p>例如，下方的代码就在 <code>ping</code> 的同时添加了一条删除整个 <code>test</code> 文件夹的命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">ip</span>):</span></span><br><span class="line">    os.system(<span class="string">f&#x27;ping <span class="subst">&#123;ip&#125;</span> &amp; rm -rf test/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ping(<span class="built_in">input</span>(<span class="string">&#x27;please enter the ip to ping: &#x27;</span>))</span><br></pre></td></tr></table></figure><p>如果把 <code>rm -rf test/</code> 改为 <code>rm -rf /</code>，那就是删除整个系统文件了，所以一定要慎用！</p><h2 id="参考-17">参考</h2><blockquote><p><a class="link"   href="https://docs.python.org/3/library/os.html#os.system" >os.system 官方文档<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://docs.python.org/3/library/os.html#os.popen" >os.popen 官方文档<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://docs.python.org/3/library/subprocess.html" >subprocess 官方文档<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://blog.csdn.net/qq_26139045/article/details/104583222" >Python学习之OS库的system函数<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://zhuanlan.zhihu.com/p/339070615" >Python模块Pexpect详解<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.cnblogs.com/linwenbin/p/10944152.html" >python pexpect模块的使用<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="关于-17">关于</h2><details><summary>点击查看作者联系方式和微信公众号</summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-17">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Python%E3%80%91%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/saraki%EF%BC%A0%E3%81%8A%E4%BB%95%E4%BA%8B%E5%8B%9F%E9%9B%86%E4%B8%AD-pixiv.net-79898386.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】saraki 【P站ID】79898386</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/tags/python/"/>
    
    <category term="os" scheme="https://xavierjiezou.github.io/tags/os/"/>
    
    <category term="subprocess" scheme="https://xavierjiezou.github.io/tags/subprocess/"/>
    
    <category term="pexpect" scheme="https://xavierjiezou.github.io/tags/pexpect/"/>
    
  </entry>
  
  <entry>
    <title>【Python】基于 Pillow 的图像处理（零基础入门教程）</title>
    <link href="https://xavierjiezou.github.io/2022/04/14/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/04/14/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/</id>
    <published>2022-04-14T20:30:42.000Z</published>
    <updated>2022-05-18T07:52:18.735Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/Pillow_Logo.png"                      alt="cover" width="100%"                ></p><h2 id="引言-12">引言</h2><p>Python Imaging Library（简称：PIL）是一个基于 Python 的图像处理库，这个库提供了广泛的文件格式支持、高效的内部表示和相当强大的图像处理能力。旨在快速访问几种基本像素格式存储的数据，为通用图像处理工具提供坚实的基础。本文是 Pillow 的零基础入门教程，让你轻松学会用 Pillow 处理图像的方法。</p><h2 id="安装-16">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><h2 id="教程-8">教程</h2><h3 id="使用-Image-类">使用 Image 类</h3><p>Pillow 中最重要的类就是 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image" >Image<i class="fas fa-external-link-alt"></i></a> 类。通过这个类，你可以从文件中加载图像，处理图像，或从头创建图像。</p><p>使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.open" >open()<i class="fas fa-external-link-alt"></i></a> 函数从文件中加载图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>)</span><br><span class="line">im</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_6_0.png"                      alt="png"                ></p><p>如果加载成功，会返回一个 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image" >Image<i class="fas fa-external-link-alt"></i></a> 对象；如果图像无法打开，则会抛出 <a class="link"   href="https://docs.python.org/3/library/exceptions.html#OSError" >OSError<i class="fas fa-external-link-alt"></i></a> 异常。现在让我们打印类实例的属性来看看图像的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;format: <span class="subst">&#123;im.<span class="built_in">format</span>&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;size: <span class="subst">&#123;im.size&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mode: <span class="subst">&#123;im.mode&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>format: JPEGsize: (128, 128)mode: RGB</code></pre><ul class="lvl-0"><li class="lvl-2"><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.format" >format<i class="fas fa-external-link-alt"></i></a>: 图像格式。标识图像来源。</p></li><li class="lvl-2"><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.size" >size<i class="fas fa-external-link-alt"></i></a>: 图像大小。是一个二元组，包含了图像的宽和高。</p></li><li class="lvl-2"><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.mode" >mode<i class="fas fa-external-link-alt"></i></a>: 图像模式。定义了图像中波段的数量和名称，以及像素类型和深度。常用模式有：<code>l</code> -&gt; 灰度图像；<code>RGB</code> -&gt; 真彩色图像；<code>CMYK</code> -&gt; 预印图像。</p></li></ul><p>一旦有了 Image 类的实例，你就可以使用该类定义的方法来操作图像。例如，让我们显示刚才加载的图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">im.show()</span><br></pre></td></tr></table></figure><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.show" >show()<i class="fas fa-external-link-alt"></i></a> 方法首先将图像保存到一个临时文件中，然后调用系统默认打开图像的程序来加载这个临时文件。</p><h3 id="读取和保存图像">读取和保存图像</h3><p>Pillow 库支持读取多种图像格式。请使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#module-PIL.Image" >Image<i class="fas fa-external-link-alt"></i></a> 模块的 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.open" >open()<i class="fas fa-external-link-alt"></i></a> 函数从磁盘读取文件。读取的时候不必指定图像格式，Pillow 库会根据文件的内容自动确定。</p><p>请使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image" >Image<i class="fas fa-external-link-alt"></i></a> 类的 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.save" >save()<i class="fas fa-external-link-alt"></i></a> 方法来保存图像。保存图像时，文件后缀非常重要，因为这个库会根据你指定的文件拓展名来决定使用哪种存储格式。</p><h4 id="将其他格式的图像转换为-JPEG-格式">将其他格式的图像转换为 JPEG 格式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.png&#x27;</span></span><br><span class="line">im_png = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_png.save(<span class="string">f&#x27;<span class="subst">&#123;fname.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]&#125;</span>.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="创建-JPEG-缩略图">创建 JPEG 缩略图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">thumbnail_size = (<span class="number">64</span>, <span class="number">64</span>) <span class="comment"># 指定缩略图的大小</span></span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line"><span class="keyword">if</span> thumbnail_size:</span><br><span class="line">    im.thumbnail(thumbnail_size)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    im.thumbnail((im.width//<span class="number">2</span>, im.height//<span class="number">2</span>))</span><br><span class="line">im</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_19_0.png"                      alt="png"                ></p><h3 id="裁剪、粘贴及合并图像">裁剪、粘贴及合并图像</h3><h4 id="裁剪图像">裁剪图像</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">box = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">region = im.crop(box)</span><br><span class="line">region</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_22_0.png"                      alt="png"                ></p><p>Pillow 定义图像左上角坐标为 (0, 0)，<a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.crop" >crop()<i class="fas fa-external-link-alt"></i></a> 方法接受一个四元组参数，对应裁剪的坐标 (左, 上, 右, 下)。例如，(0, 0, 64, 64) 表示裁剪矩形左上角的坐标是 (0, 0)，右下角的坐标是 (64, 64)。那么，最终裁剪的子图大小就是 (64-0, 64-0)。</p><h4 id="粘贴图像">粘贴图像</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">region = region.transpose(Image.Transpose.ROTATE_180) <span class="comment"># 将图像旋转180°</span></span><br><span class="line">box = (<span class="number">64</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">128</span>) <span class="comment"># 指定粘贴覆盖的区域</span></span><br><span class="line">im.paste(region, box) <span class="comment"># 粘贴图像</span></span><br><span class="line">im</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_25_0.png"                      alt="png"                ></p><p>使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.paste" >paste()<i class="fas fa-external-link-alt"></i></a> 方法粘贴图像。贴图的大小必须和给定粘贴区域的大小一致，且不能超出给定底图的区域。</p><h4 id="合并图片">合并图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">size = (<span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">im_1 = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, size, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">im_2 = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, size, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">im_3 = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, size, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">im_3.paste(im_1, (<span class="number">0</span>, size[<span class="number">1</span>]//<span class="number">3</span>))</span><br><span class="line">im_3.paste(im_2, (<span class="number">0</span>, size[<span class="number">1</span>]//<span class="number">3</span>*<span class="number">2</span>))</span><br><span class="line">im_3</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_28_0.png"                      alt="png"                ></p><h4 id="划分和合并波段">划分和合并波段</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">r, g, b = im.split()</span><br><span class="line">rgb = Image.merge(<span class="string">&#x27;RGB&#x27;</span>, (r, g, b))</span><br><span class="line">bgr = Image.merge(<span class="string">&#x27;RGB&#x27;</span>, (b, g, r))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [r, g, b, rgb, bgr]</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">5</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;rgb&#x27;</span>, <span class="string">&#x27;bgr&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_30_0.png"                      alt="png"                ></p><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.split" >split()<i class="fas fa-external-link-alt"></i></a> 方法用于划分图像波段。对于单波段图像，返回它本身。</p><h3 id="几何变换">几何变换</h3><h4 id="缩放和旋转图像">缩放和旋转图像</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">im = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">128</span>, <span class="number">128</span>), <span class="string">&#x27;cyan&#x27;</span>)</span><br><span class="line">im_resied = im.resize((<span class="number">64</span>, <span class="number">64</span>))</span><br><span class="line">im_rotated = im.rotate(<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, im_resied, im_rotated]</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;resized&#x27;</span>, <span class="string">&#x27;rotated&#x27;</span>][i])</span><br><span class="line">    <span class="comment"># plt.axis(&#x27;off&#x27;) # 为了对比 resize 前后图片的大小，我们这里就不隐藏坐标轴了</span></span><br><span class="line">    plt.imshow(j, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_34_0.png"                      alt="png"                ></p><p>使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.resize" >resize()<i class="fas fa-external-link-alt"></i></a> 方法缩放图像，该方法接受一个二元组，其含义为图像的宽高；使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.rotate" >rotate()<i class="fas fa-external-link-alt"></i></a> 方法旋转图像，接受一个整数，其含义为逆时针旋转的角度。</p><h4 id="翻转图像">翻转图像</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_h_flip = im.transpose(Image.Transpose.FLIP_LEFT_RIGHT)</span><br><span class="line">im_v_flip = im.transpose(Image.Transpose.FLIP_TOP_BOTTOM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, im_h_flip, im_v_flip]</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;flip horizontally&#x27;</span>, <span class="string">&#x27;flip vertically&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_37_0.png"                      alt="png"                ></p><p>使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.transpose" >transpose()<i class="fas fa-external-link-alt"></i></a> 方法可以实现图像的水平翻转和垂直翻转。</p><h3 id="颜色变换">颜色变换</h3><p>Pillow 库允许使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert" >convert()<i class="fas fa-external-link-alt"></i></a> 方法在不同的像素表示之间转换图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_L = im.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, im_L]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original_RGB&#x27;</span>, <span class="string">&#x27;converted_Gray&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_41_0.png"                      alt="png"                ></p><p>该库支持每个格式与 <code>L</code> 和 <code>RGB</code> 的相互转换，但如何和其他格式进行转换，一般采用 RGB 做中间媒介。</p><h3 id="图像增强">图像增强</h3><p>Pillow 库提供了大量的的用于图像增强的方法和模块。</p><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/ImageFilter.html" >ImageFilter<i class="fas fa-external-link-alt"></i></a> 模块中封装了很多用于图像滤波的类，包括高斯模糊，边缘增强，细节滤波等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  ImageFilter</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_out = im.<span class="built_in">filter</span>(ImageFilter.DETAIL) <span class="comment"># 细节滤波，使图像中的细节更加明显</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, im_out]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;after detail filtering&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_46_0.png"                      alt="png"                ></p><h4 id="像素点操作">像素点操作</h4><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.point" >point()<i class="fas fa-external-link-alt"></i></a> 方法用于批量转换图像像素点。该方法接受一个 lambda 函数作为参数，图像中所有像素点都根据该函数进行处理。例如，下方这个例子就是通过 point() 方法对图像的对比度进行增强。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_out = im.point(<span class="keyword">lambda</span> _: _*<span class="number">1.25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, im_out]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;after contrast enhanced&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_49_0.png"                      alt="png"                ></p><h4 id="高级图像增强">高级图像增强</h4><p>要想获得更高级的图像增强，你可以使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/ImageEnhance.html#module-PIL.ImageEnhance" >ImageEnhance<i class="fas fa-external-link-alt"></i></a> 模块中定义的类。通过那些类，你可以快速地对图像的亮度、对比度、色彩平衡以及锐化程度进行调节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageEnhance</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">enh = ImageEnhance.Brightness(im).enhance(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">im_list = [im, enh]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title([<span class="string">&#x27;original&#x27;</span>, <span class="string">&#x27;100% more brightness&#x27;</span>][i])</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_52_0.png"                      alt="png"                ></p><h3 id="图像序列">图像序列</h3><p>Pillow 库也包含对图像序列（动画格式）的一些基本支持。支持的序列格式文件包括：GIF、TIFF 和 FLI 等等。</p><h4 id="读取序列">读取序列</h4><p>当加载序列图像时，默认加载的是第一帧。你可以使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.seek" >seek()<i class="fas fa-external-link-alt"></i></a> 和 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.tell" >tell()<i class="fas fa-external-link-alt"></i></a> 方法访问不同的帧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/digit.gif&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_list = [im.copy()]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        im.seek(im.tell()+<span class="number">1</span>)</span><br><span class="line">        im_list.append(im.copy())</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title(<span class="built_in">str</span>(i+<span class="number">1</span>))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_57_0.png"                      alt="png"                ></p><h4 id="迭代序列">迭代序列</h4><p>除使用 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.seek" >seek()<i class="fas fa-external-link-alt"></i></a> 方法读取图像序列外，<a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/ImageSequence.html" >ImageSequence<i class="fas fa-external-link-alt"></i></a> 模块还提供了 for 循环迭代遍历图像序列的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageSequence</span><br><span class="line">fname = <span class="string">&#x27;images/test/digit.gif&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_list = []</span><br><span class="line"><span class="keyword">for</span> frame <span class="keyword">in</span> ImageSequence.Iterator(im):</span><br><span class="line">    im_list.append(frame.copy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title(<span class="built_in">str</span>(i+<span class="number">1</span>))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_60_0.png"                      alt="png"                ></p><p>此外，你也可以通过 Image 模块定义的属性 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.n_frames" >n_frames<i class="fas fa-external-link-alt"></i></a> 来控制 for 循环的次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/digit.gif&#x27;</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">im_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(im.n_frames):</span><br><span class="line">    im.seek(i)</span><br><span class="line">    im_list.append(im.copy())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(im_list):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.title(<span class="built_in">str</span>(i+<span class="number">1</span>))</span><br><span class="line">    plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    plt.imshow(j)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_62_0.png"                      alt="png"                ></p><h3 id="PostScript-打印">PostScript 打印</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, PSDraw</span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(<span class="string">&quot;images/test/hopper.jpg&quot;</span>) <span class="keyword">as</span> im:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.ps&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="comment"># 创建文档</span></span><br><span class="line">        ps = PSDraw.PSDraw(fp)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始文档</span></span><br><span class="line">        ps.begin_document(<span class="string">&quot;hopper&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入图片</span></span><br><span class="line">        ps.image(box, im, <span class="number">75</span>)</span><br><span class="line">        ps.rectangle((<span class="number">1</span> * <span class="number">72</span>, <span class="number">2</span> * <span class="number">72</span>, <span class="number">7</span> * <span class="number">72</span>, <span class="number">10</span> * <span class="number">72</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入标题</span></span><br><span class="line">        ps.setfont(<span class="string">&quot;HelveticaNarrow-Bold&quot;</span>, <span class="number">36</span>)</span><br><span class="line">        ps.text((<span class="number">3</span> * <span class="number">72</span>, <span class="number">4</span> * <span class="number">72</span>), <span class="string">&quot;hopper&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 结束文档</span></span><br><span class="line">        ps.end_document()</span><br></pre></td></tr></table></figure><h3 id="更多读取图片的方式">更多读取图片的方式</h3><p>我们通常使用 Image.open(filename) 的方式来打开一张图片。其实，Image.open() 还可以作为上下文管理器。如果一切顺利，返回一个 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image" >PIL.Image.Image<i class="fas fa-external-link-alt"></i></a> 对象，否则抛出 <a class="link"   href="https://docs.python.org/3/library/exceptions.html#OSError" >OSError<i class="fas fa-external-link-alt"></i></a> 异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>) <span class="keyword">as</span> im:</span><br><span class="line">    im.show()</span><br></pre></td></tr></table></figure><h4 id="从打开的文件中读取">从打开的文件中读取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    im = Image.<span class="built_in">open</span>(fp)</span><br><span class="line">    im.show()</span><br></pre></td></tr></table></figure><h4 id="从-tar-存档中读取">从 tar 存档中读取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, TarIO</span><br><span class="line">fp = TarIO.TarIO(<span class="string">&#x27;images/test/hopper.tar&#x27;</span>, <span class="string">&quot;hopper.jpg&quot;</span>)</span><br><span class="line">im = Image.<span class="built_in">open</span>(fp)</span><br><span class="line">im</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_71_0.png"                      alt="png"                ></p><h4 id="批量处理">批量处理</h4><p>例如，将所有 PNG 格式的图片都转换成低质量的 JPEG 格式保存在工作目录中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress_image</span>(<span class="params">source_path, dest_path</span>):</span></span><br><span class="line">    <span class="keyword">with</span> Image.<span class="built_in">open</span>(source_path) <span class="keyword">as</span> img:</span><br><span class="line">        <span class="keyword">if</span> img.mode != <span class="string">&quot;RGB&quot;</span>:</span><br><span class="line">            img = img.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        img.save(dest_path, <span class="string">&quot;JPEG&quot;</span>, optimize=<span class="literal">True</span>, quality=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> glob.glob(<span class="string">&quot;*.png&quot;</span>):</span><br><span class="line">        compress_image(path, path[:-<span class="number">4</span>] + <span class="string">&quot;.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="控制解码器">控制解码器</h3><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.draft" >draft()<i class="fas fa-external-link-alt"></i></a> 方法允许操作一个打开但尚未加载的图像，使其尽可能与给定模式和大小匹配，这是通过重新配置图像解码器来实现的。但仅适用于 JPEG 和 MPO 文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">fname = <span class="string">&#x27;images/test/hopper.jpg&#x27;</span></span><br><span class="line"><span class="keyword">with</span> Image.<span class="built_in">open</span>(fname) <span class="keyword">as</span> im:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;original =&quot;</span>, im.mode, im.size)</span><br><span class="line"></span><br><span class="line">    im.draft(<span class="string">&quot;L&quot;</span>, (<span class="number">64</span>, <span class="number">64</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;draft =&quot;</span>, im.mode, im.size)</span><br><span class="line"></span><br><span class="line">    im.show()</span><br></pre></td></tr></table></figure><pre><code>original = RGB (128, 128)draft = L (64, 64)</code></pre><h2 id="概念-2">概念</h2><h3 id="波段">波段</h3><p>一幅图像可能由一个或多个波段组成，只要它们具有相同的尺寸和深度。例如，PNG 图像可能有 R、G、B 和 A 四个波段，分别表示红色、绿色、蓝色和 alpha 透明值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(im.getbands())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(im.getdata(<span class="number">0</span>))[:<span class="number">10</span>]) <span class="comment"># 数据太多，这里只展示前10个像素点的值</span></span><br><span class="line">r, g, b = im.split()</span><br><span class="line">r = im.getchannel(<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">r</span><br></pre></td></tr></table></figure><pre><code>('R', 'G', 'B')[24, 18, 16, 22, 25, 23, 19, 17, 28, 29]</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/output_81_1.png"                      alt="png"                ></p><ul class="lvl-0"><li class="lvl-2"><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.getbands" >Image.getbands()<i class="fas fa-external-link-alt"></i></a>：获取图像中所有波段的名称，并以元组的形式返回。</p></li><li class="lvl-2"><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.getdata" >Image.getdata(band=None)<i class="fas fa-external-link-alt"></i></a>：将此图像的内容作为包含像素值的序列对象返回。序列对象是扁平的，即第一行的值紧跟在第 0 行之后，依此类推。<code>band</code> 参数表示波段的索引，默认是 <code>None</code>，返回所有波段。</p></li><li class="lvl-2"><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.split" >Image.split()<i class="fas fa-external-link-alt"></i></a>：将图像分割为单独的波段。</p></li><li class="lvl-2"><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.getchannel" >Image.getchannel(channel)<i class="fas fa-external-link-alt"></i></a>：返回图像的单个通道。<code>channel</code> 参数可接受一个整型的索引值，或大写的通道名称。</p></li></ul><h3 id="模式">模式</h3><p>图像模式 <a class="link"   href="https://pillow.readthedocs.io/en/stable/handbook/concepts.html#modes" >mode<i class="fas fa-external-link-alt"></i></a> 是一个字符串，它定义图像中像素的类型和深度。每个像素使用位深度的全部范围，例如：1 位像素的范围是 0-1，8 位像素的范围是 0-255，以此类推。当前 Pillow 支持以下标准模式：</p><ul class="lvl-0"><li class="lvl-2"><p><code>1</code>：1 位，黑白，每字节存储 1 个像素</p></li><li class="lvl-2"><p><code>L</code>：8 位，黑白</p></li><li class="lvl-2"><p><code>P</code>：8 位，使用调色板映射到任何其他模式</p></li><li class="lvl-2"><p><code>RGB</code>：3x8 位，真彩色</p></li><li class="lvl-2"><p><code>RGBA</code>：4x8 位，带透明遮罩的真彩色</p></li><li class="lvl-2"><p><code>CMYK</code>：4x8 位，印刷色彩（cyan，magenta，yellow，black）</p></li><li class="lvl-2"><p>……</p></li></ul><p>你可以通过 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.mode" >mode<i class="fas fa-external-link-alt"></i></a> 属性读取图像的模式。这是一个包含上述值之一的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(im.mode)</span><br><span class="line">r = im.getchannel(<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.mode)</span><br></pre></td></tr></table></figure><pre><code>RGBL</code></pre><h3 id="大小">大小</h3><p>你可以通过 <a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.size" >size<i class="fas fa-external-link-alt"></i></a> 属性读取图像大小。这是一个二元组，包含以像素位单位的水平和垂直大小，即图像的宽和高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span>  Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;images/test/hopper.jpg&#x27;</span>)</span><br><span class="line">im.size</span><br></pre></td></tr></table></figure><pre><code>(128, 128)</code></pre><h3 id="坐标系">坐标系</h3><p>Pillow 使用笛卡尔坐标系，左上角坐标为 (0, 0)。坐标通常作为 2 元组传递给类或函数。矩形表示为 4 元组，前两个元素是左上角点的坐标，后两个元素代表右下角点的坐标。</p><h3 id="调色板">调色板</h3><p>调色板模式（p）使用调色板为每个像素定义实际颜色。</p><h3 id="滤波器">滤波器</h3><p>对于可能将多个输入像素映射到单个输出像素的几何操作，Pillow 提供了多种不同的重采样滤波器。</p><ul class="lvl-0"><li class="lvl-2"><p>PIL.Image.NEAREST：最邻近采样</p></li><li class="lvl-2"><p>PIL.Image.BILINEAR：双线性插值</p></li><li class="lvl-2"><p>PIL.Image.HAMMING：汉明采样</p></li><li class="lvl-2"><p>PIL.Image.BICUBIC：双三插值</p></li><li class="lvl-2"><p>PIL.Image.LANCZOS：余弦滤波</p></li></ul><h2 id="参考-15">参考</h2><blockquote><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/index.html" >Pillow 官方文档<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="关于-15">关于</h2><details><summary>点击查看作者联系方式和微信公众号</summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-15">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9F%BA%E4%BA%8E-Pillow-%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%89/Yomi-pixiv.net-82757552.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】Yomi 【P站ID】8275755</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/tags/python/"/>
    
    <category term="pillow" scheme="https://xavierjiezou.github.io/tags/pillow/"/>
    
    <category term="image processing" scheme="https://xavierjiezou.github.io/tags/image-processing/"/>
    
  </entry>
  
  <entry>
    <title>【Python】图像反转/反色的三种方法（pillow）</title>
    <link href="https://xavierjiezou.github.io/2022/04/10/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/04/10/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/</id>
    <published>2022-04-10T16:15:13.000Z</published>
    <updated>2022-05-18T07:52:18.735Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/pillow.png"                      alt="cover" width="100%"                ></p><h2 id="引言-9">引言</h2><p>图像反转（反色）是将图像的灰度值反转，若图像灰度级为 256，则新图的灰度值为 255 减去原图的灰度值。本文介绍了使用 Python 的 pillow 库进行图像反转（反色）的三种方法。</p><h2 id="安装-13">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><h2 id="方法">方法</h2><h3 id="方法-1🙂">方法 1🙂</h3><p>使用 <code>point()</code> 方法对图像所有像素值进行运算，并返回结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_color</span>(<span class="params">fname</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">    im_inverted = im.point(<span class="keyword">lambda</span> _: <span class="number">255</span>-_)</span><br><span class="line">    im_inverted.save(fname.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;_inverted.&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> im_inverted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    invert_color(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="方法-2😁">方法 2😁</h3><p>使用嵌套 for 循环遍历图像的每个像素点，并进行取反操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_color</span>(<span class="params">fname</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">    px = im.load()</span><br><span class="line">    w, h = im.size</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">type</span>(px[i, j]) == <span class="built_in">int</span>:</span><br><span class="line">                px[i, j] = <span class="number">255</span>-px[i, j]</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(px[i, j]) == <span class="number">3</span>:</span><br><span class="line">                px[i, j] = <span class="built_in">tuple</span>([<span class="number">255</span>-i <span class="keyword">for</span> i <span class="keyword">in</span> px[i, j]])</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(px[i, j]) == <span class="number">4</span>:</span><br><span class="line">                px[i, j] = <span class="built_in">tuple</span>([<span class="number">255</span>-i <span class="keyword">for</span> i <span class="keyword">in</span> px[i, j][:<span class="number">3</span>]]+[px[i, j][-<span class="number">1</span>]])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    im.save(fname.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;_inverted.&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> im</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    invert_color(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="方法-3😊">方法 3😊</h3><p>直接使用 ImageChops 中定义的反转函数进行图像颜色反转。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageChops</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_color</span>(<span class="params">fname</span>):</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(fname)</span><br><span class="line">    im_inverted = ImageChops.invert(im)</span><br><span class="line">    im_inverted.save(fname.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;_inverted.&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> im_inverted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    invert_color(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="实验">实验</h2><table><thead><tr><th style="text-align:center">原图通道</th><th style="text-align:center">原图</th><th style="text-align:center">反色</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/test_1_channel.jpg"                      alt=""                ></td><td style="text-align:center"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/test_1_channel_inverted.jpg"                      alt=""                ></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/test_3_channel.jpg"                      alt=""                ></td><td style="text-align:center"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/test_3_channel_inverted.jpg"                      alt=""                ></td></tr></tbody></table><h2 id="参考-12">参考</h2><blockquote><ul class="lvl-1"><li class="lvl-2"><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.point" >PIL.Image.Image.point<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/ImageChops.html#PIL.ImageChops.invert" >PIL.ImageChops.invert<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p><a class="link"   href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.load" >PIL.Image.Image.load<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p><a class="link"   href="https://www.cnblogs.com/weixia-blog/p/12833624.html" >图像二值化处理<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p><a class="link"   href="https://blog.csdn.net/m0_49762339/article/details/112285408" >python 图像处理 Pillow 学习笔记<i class="fas fa-external-link-alt"></i></a></p></li></ul></blockquote><h2 id="关于-13">关于</h2><details><summary>点击查看作者联系方式和微信公众号</summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-13">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E5%9B%BE%E5%83%8F%E5%8F%8D%E8%BD%AC-%E5%8F%8D%E8%89%B2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%88pillow%EF%BC%89/test_3_channel.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】森倉円 【P站ID】78693898</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/categories/python/"/>
    
    
    <category term="image" scheme="https://xavierjiezou.github.io/tags/image/"/>
    
    <category term="python" scheme="https://xavierjiezou.github.io/tags/python/"/>
    
    <category term="pillow" scheme="https://xavierjiezou.github.io/tags/pillow/"/>
    
  </entry>
  
  <entry>
    <title>高性能平台作业调度系统使用手册</title>
    <link href="https://xavierjiezou.github.io/2022/04/08/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>https://xavierjiezou.github.io/2022/04/08/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</id>
    <published>2022-04-08T16:43:53.000Z</published>
    <updated>2022-05-18T07:52:18.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="平台简介">平台简介</h2><p>高性能平台由 1 个管理节点、1 个登录节点、16 个计算节点、 4 个 GPU 节点组成，可用存储空间为 110 TB 并部署并行文件系统。各节点配置信息如下：</p><table><thead><tr><th style="text-align:center">节点类型</th><th style="text-align:center">CPU</th><th style="text-align:center">内存（GB）</th></tr></thead><tbody><tr><td style="text-align:center">管理节点</td><td style="text-align:center">2 颗 Intel® Xeon® Silver</br>4208 CPU @ 2.10GHz 共 16 核</td><td style="text-align:center">192</td></tr><tr><td style="text-align:center">登录节点</td><td style="text-align:center">2 颗 Intel® Xeon® Silver</br>4208 CPU @ 2.10GHz 共 16 核</td><td style="text-align:center">192</td></tr><tr><td style="text-align:center">计算节点</td><td style="text-align:center">2 颗 Intel® Xeon® Gold</br>6242 CPU @ 2.80GHz 共 32 核</td><td style="text-align:center">192</td></tr><tr><td style="text-align:center">GPU 节点</td><td style="text-align:center">2 颗 Intel® Xeon® Gold</br>6242 CPU @ 2.80GHz 共 32 核</td><td style="text-align:center">192</td></tr></tbody></table><h2 id="使用方式">使用方式</h2><h3 id="命令行使用方式">命令行使用方式</h3><h4 id="登录方式">登录方式</h4><p>使用系统自带终端并配合 SSH 命令即可登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host -p 22</span><br></pre></td></tr></table></figure><p>普通用户登录成功后直接进入登录节点 <code>ln01</code>。</p><div class="tips"><p><strong>提示</strong><br>推荐使用第三方工具，如 <a class="link"   href="https://code.visualstudio.com/Download" >VSCode<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://www.xshell.com/zh/xshell-download/" >Xshell<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" >PuTTY<i class="fas fa-external-link-alt"></i></a> 等进行登录。</p></div><h4 id="数据传输">数据传输</h4><p>可使用 SCP，SFTP 等以命令行的方式传输数据。（详细教程：<a href="/2022/03/19/%E6%9C%AC%E5%9C%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/">点击查看</a>）</p><div class="tips"><p><strong>提示</strong><br>推荐使用第三方工具，如 <a class="link"   href="https://blog.csdn.net/qq_42951560/article/details/116243914" >FileZilla<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://blog.csdn.net/qq_42951560/article/details/116227677" >WinSCP<i class="fas fa-external-link-alt"></i></a>、<a class="link"   href="https://www.xshell.com/xftp-download/" >Xftp<i class="fas fa-external-link-alt"></i></a> 等传输数据。</p></div><h4 id="作业调度">作业调度</h4><h5 id="提交作业">提交作业</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsub -q &lt;队列名&gt; -n &lt;CPU数&gt; [-J &lt;作业名&gt; -o output.%J -e error.%J] ./commandline</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>-q</code>：指定该作业运行时使用的队列。先提交的作业先执行，后提交的作业排队等待执行。队列由管理员分配，可使用命令 <code>jqueues -u $USER</code> 查看自己可用的队列。CPU 串行作业请使用队列 <code>normal</code>，CPU 并行作业请使用队列 <code>para</code>，GPU 作业请使用队列 <code>qgpu</code>，MATLAB 作业请使用队列 <code>matlab</code>；</p></li><li class="lvl-2"><p><code>-n</code>：指定该作业所需的 CPU 核数；</p></li><li class="lvl-2"><p><code>-J</code>：指定作业名。方便辨识；</p></li><li class="lvl-2"><p><code>-o</code>：指定输出结果文件。<code>-o output.%J</code> 表示将作业的输出结果输出重定向到 <code>output.&lt;作业号&gt;</code>；</p></li><li class="lvl-2"><p><code>-e</code>：指定错误日志文件。<code>-e error.%J</code> 表示将作业的错误日志重定向到 <code>output.&lt;作业号&gt;</code>。</p></li></ul><p>除上述以命令行的方式提交作业外，还支持 shell 脚本提交模式，但必须按照以下格式提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#JSUB -q normal</span></span><br><span class="line"><span class="comment">#JSUB -n 1</span></span><br><span class="line"><span class="comment">#JSUB -e error.%J</span></span><br><span class="line"><span class="comment">#JSUB -o output.%J</span></span><br><span class="line"><span class="comment">#JSUB -J my_job</span></span><br><span class="line">python test.py</span><br></pre></td></tr></table></figure><p>然后提交脚本：<code>jsub &lt; run.sh</code></p><h5 id="查看作业">查看作业</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jjobs [[-a] [-l] &lt;作业号&gt;]</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>jjobs</code>：不使用参数，查看目前正在排队或运行的作业；</p></li><li class="lvl-2"><p><code>jjobs -a</code>：查看所有作业，除正在排队或运行的作业外，还包括最近完成的作业；</p></li><li class="lvl-2"><p><code>jjobs &lt;作业号&gt;</code>：查看指定作业的状态；</p></li><li class="lvl-2"><p><code>jjobs -l &lt;作业号&gt;</code>：查看指定作业的详细信息。</p></li></ul><h5 id="终止作业">终止作业</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jctrl <span class="built_in">kill</span> &lt;作业号&gt;</span><br></pre></td></tr></table></figure><h4 id="预置软件">预置软件</h4><p>为方便用户使用，省去安装麻烦，服务器预置了部分常用软件，可使用 <code>module</code> 命令动态地加载和移除。</p><ul class="lvl-0"><li class="lvl-2"><p>显示所有可用模块</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module avail</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>动态加载指定模块</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module load intel/compilervars</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>列出所有加载模块</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module list</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>动态移除指定模块</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module rm intel/compilervars</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>动态移除所有模块</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module purge</span><br></pre></td></tr></table></figure><h3 id="网页端使用方式">网页端使用方式</h3><h4 id="登录方式-2">登录方式</h4><ol><li class="lvl-3"><p>浏览器地址栏输入<strong>24 服务器的 IP 地址</strong>进入平台</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649472778315.png"                      alt="1"                ></p><ol start="2"><li class="lvl-3"><p>输入分配的用户名和密码进行登录，登录进去的主页如下</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649472835693.png"                      alt="2"                ></p><h4 id="数据传输-2">数据传输</h4><ol><li class="lvl-3"><p>在本地计算机上安装 FileClient 软件（下载地址：<a class="link"   href="https://ghgxj.lanzouu.com/icfk9033wati" >Windows<i class="fas fa-external-link-alt"></i></a>）</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649474876189.png"                      alt="1"                ></p><ol start="2"><li class="lvl-3"><p>登录平台，进入<strong>我的数据</strong>界面</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649474950617.png"                      alt="2"                ></p><ol start="3"><li class="lvl-3"><p>点击<strong>上传</strong>按钮即可打开 FileClient，轻松拖拽即可实现本地机与远程机的数据传输</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649475076974.png"                      alt="3"                ></p><h4 id="作业调度-2">作业调度</h4><h5 id="提交作业-2">提交作业</h5><div class="warning"><p><strong>警告</strong><br>网页端只能提交 Matlab 和 CPU 串行作业，GPU 和 CPU 并行作业请以命令行的方式提交。</p></div><h6 id="提交-Matlab-作业">提交 Matlab 作业</h6><p>这里以 <code>test.m</code> 为例，演示如何提交 Matlab 作业，其内容如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fprintf(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">% 打印 hello world</span></span><br></pre></td></tr></table></figure><hr><ol><li class="lvl-3"><p>登录平台，点击<strong>仿真计算-&gt;Matlab</strong></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649481362872.png"                      alt="1"                ></p><ol start="2"><li class="lvl-3"><p>指定作业名，选择要执行的 <code>.m</code> 文件，点击<strong>确定</strong></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649481455524.png"                      alt="2"                ></p><ol start="3"><li class="lvl-3"><p>从上一步直接跳转到了<strong>我的作业</strong>界面，稍等几秒即可看到输出的 <code>matlab.log</code></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649481913972.png"                      alt="3"                ></p><ol start="4"><li class="lvl-3"><p>双击查看 <code>matlab.log</code>，已经正确打印出 <code>hello world</code> 了</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649482066784.png"                      alt="4"                ></p><ol start="5"><li class="lvl-3"><p>此外，你也可以在 <code>ouput.&lt;作业号&gt;</code> 文件中看到输出结果</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649482199097.png"                      alt="5"                ></p><h6 id="提交-CPU-串行作业">提交 CPU 串行作业</h6><p>这里以 <code>test.py</code> 为例，演示如何提交 CPU 串行作业，其内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此外，还需创建一个执行的脚本文件，这里为 <code>run.sh</code>，其内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py</span><br></pre></td></tr></table></figure><hr><ol><li class="lvl-3"><p>登录平台，点击<strong>仿真计算-&gt;通用计算</strong></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649485357192.png"                      alt="1"                ></p><ol start="2"><li class="lvl-3"><p>可执行文件选择 <code>run.sh</code>，其他计算文件选择 <code>test.py</code>，点击确定</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649485487096.png"                      alt="2"                ></p><ol start="3"><li class="lvl-3"><p>从上一步直接跳转到了<strong>我的作业</strong>界面，稍等几秒即可看到输出的 <code>output.&lt;作业号&gt;</code></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649485626708.png"                      alt="3"                ></p><ol start="4"><li class="lvl-3"><p>双击查看 <code>output.&lt;作业号&gt;</code>，已经正确打印出 <code>hello world</code> 了</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649485702846.png"                      alt="4"                ></p><h5 id="查看作业-2">查看作业</h5><ol><li class="lvl-3"><p>登录平台，点击<strong>我的作业</strong></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649486035939.png"                      alt="1"                ></p><ol start="2"><li class="lvl-3"><p>我的作业界面以表格的方式列出了所有作业的信息，包括作业号，队列，状态，执行节点，以及运行时长……</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649486110168.png"                      alt="2"                ></p><ol start="3"><li class="lvl-3"><p>点击作业号超链接，可查看作业数据，作业详情和作业历史</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649486214123.png"                      alt="3"                ></p><h5 id="终止作业-2">终止作业</h5><p>点击正在运行的作业，单击终止按钮即可强制关闭作业。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649486489970.png"                      alt="1"                ></p><h4 id="数据管理">数据管理</h4><p>在我的数据界面中可直接管理用户数据，其包括用户家目录，作业数据区和共享数据区。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E9%AB%98%E6%80%A7%E8%83%BD%E5%B9%B3%E5%8F%B0%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/1649486765096.png"                      alt="1"                ></p><ul class="lvl-0"><li class="lvl-2"><p>用户家目录：用户个人文件存放的目录；</p></li><li class="lvl-2"><p>作业数据区：作业提交数据和输出结果；</p></li><li class="lvl-2"><p>共享数据区：方便用户之间的文件共享。</p></li></ul><h2 id="温馨提示-2">温馨提示</h2><ul class="lvl-0"><li class="lvl-2"><p>推荐以命令行的方式提交作业，网页端用起来不如命令行方便，且无法提交 GPU 和 CPU 并行作业；</p></li><li class="lvl-2"><p>非必要情况，请勿在登录节点直接执行程序，否则会造成登录节点卡顿，影响自己和他人使用服务器；</p></li><li class="lvl-2"><p>每次登录都要输入密码，很麻烦？服务器已允许公钥密码的 SSH 免密登录，配置教程请参考<a href="/2022/04/05/%E3%80%90Linux%E3%80%91%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/">这篇</a>文章。</p></li></ul><h2 id="常见问题">常见问题</h2><ol><li class="lvl-3"><p>如何使用 Conda 下的 Python 环境执行代码？</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>（1）使用命令 <code>conda activate &lt;ENV_NAME&gt;</code> 切入 Conda 环境；</p></li><li class="lvl-2"><p>（2）使用命令 <code>which python</code> 查看该环境下 Python 编译器路径；</p></li><li class="lvl-2"><p>（3）将上一步路径中的 <code>~</code> 换成绝对路径（可使用命令 <code>pwd</code> 获得）；</p></li><li class="lvl-2"><p>（4）提交作业的时候指定上一步获得的 Python 编译器的路径。</p></li></ul><hr><p>举个例子：我在 Conda 里面创建了一个名为 <code>torch</code> 的 Python 环境（并在里面安装了 GPU 版的 PyTorch）。现在，想要使用这个环境来执行我的 Python 代码。</p><hr><p>① 首先，切入该环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) [xxx@ln01 ~]$ conda activate torch</span><br><span class="line">(torch) [xxx@ln01 ~]$ <span class="built_in">which</span> python</span><br><span class="line">~/.conda/envs/torch/bin/python</span><br><span class="line">(torch) [xxx@ln01 ~]$ <span class="built_in">pwd</span></span><br><span class="line">/gpfs/home/xxx</span><br></pre></td></tr></table></figure><p>② 然后，这里想要执行的代码文件是 <code>test.py</code>，里面的内容如下（测试 CUDA 加速是否可用）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure><p>③ 接着，为了将执行这个文件，我写了一个作业提交脚本 <code>run.sh</code>。（因为是 GPU 作业，队列需选 <code>ggpu</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#JSUB -q ggpu</span></span><br><span class="line"><span class="comment">#JSUB -e error.%J</span></span><br><span class="line"><span class="comment">#JSUB -o output.%J</span></span><br><span class="line"><span class="comment">#JSUB -J my_torch_job</span></span><br><span class="line">/gpfs/home/xxx/.conda/envs/torch/bin/python test.py</span><br></pre></td></tr></table></figure><p>④ 最后，使用命令<code>jsub &lt; run.sh</code> 提交作业，查看 <code>output.&lt;作业号&gt;</code>，输出为 <code>True</code>，说明 GPU 可用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Successfully completed.</span><br><span class="line"></span><br><span class="line">Resource usage summary:</span><br><span class="line"></span><br><span class="line">    Max Memory :                 5 MB</span><br><span class="line">    Max Processes  :               1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The output (<span class="keyword">if</span> any) follows:</span><br><span class="line"></span><br><span class="line">True</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>提交作业时如何指定节点？</p></li></ol><p>jsub 命令搭配 <code>-m &lt;节点名称&gt;</code> 参数在提交作业时可以指定节点。服务器共有 CPU 节点 16 个，编号依次为 <code>computer01, ..., computer16</code>，共有 GPU 节点 4 个，编号依次为 <code>gpu01, ..., gpu04</code>。</p><ul class="lvl-0"><li class="lvl-2"><p>提交 CPU 作业时指定节点：<code>jsub -q normal -m computer01 -o out -e err pwd</code></p></li><li class="lvl-2"><p>提交 GPU 作业时指定节点：<code>jsub -q qgpu -m gpu01 -o out -e err nvidia-smi</code></p></li></ul><h2 id="关于我们">关于我们</h2><p>高性能平台仅限校内人士使用，任何其他问题请微信（微信号：XavierJiezou）或<a class="link"   href="mailto:878972272@qq.com" >邮件<i class="fas fa-external-link-alt"></i></a>联系，亦可在下方评论区直接留言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;平台简介&quot;&gt;平台简介&lt;/h2&gt;
&lt;p&gt;高性能平台由 1 个管理节点、1 个登录节点、16 个计算节点、 4 个 GPU 节点组成，可用存储空间为 110 TB 并部署并行文件系统。各节点配置信息如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th st</summary>
      
    
    
    
    <category term="qhdx" scheme="https://xavierjiezou.github.io/categories/qhdx/"/>
    
    
    <category term="linux" scheme="https://xavierjiezou.github.io/tags/linux/"/>
    
    <category term="qhdx" scheme="https://xavierjiezou.github.io/tags/qhdx/"/>
    
    <category term="jsub" scheme="https://xavierjiezou.github.io/tags/jsub/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】配置SSH免密登录</title>
    <link href="https://xavierjiezou.github.io/2022/04/05/%E3%80%90Linux%E3%80%91%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <id>https://xavierjiezou.github.io/2022/04/05/%E3%80%90Linux%E3%80%91%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</id>
    <published>2022-04-05T13:41:05.000Z</published>
    <updated>2022-05-18T07:52:18.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介-7">简介</h2><p>每次在本地计算机上通过 SSH 远程连接 Linux 服务器的时候都需要输入密码，非常繁琐，本文是配置 SSH 免密登录的教程。</p><h2 id="教程-5">教程</h2><ol><li class="lvl-3"><p>在本地通过 RSA 加密算法生成公私钥对</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_test</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>t</code>：指定加密类型</p></li><li class="lvl-2"><p><code>b</code>：指定加密字长</p></li><li class="lvl-2"><p><code>f</code>：指定保存路径</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_blog</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (C:\Users\87897/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> C:\Users\87897/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> C:\Users\87897/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:uV8DJX7MT9dAGBUdVDtIkidM4ULSCXOyfMK8Z+S4RXY 87897@ZXC-LAPTOP</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 4096]----+</span></span><br><span class="line"><span class="string">|       =oo+++===+|</span></span><br><span class="line"><span class="string">|      + Bo.++o. o|</span></span><br><span class="line"><span class="string">|       * *.E+..o |</span></span><br><span class="line"><span class="string">|        Xoo=   .o|</span></span><br><span class="line"><span class="string">|       oS=o + . o|</span></span><br><span class="line"><span class="string">|        =. o o . |</span></span><br><span class="line"><span class="string">|       ..   o .  |</span></span><br><span class="line"><span class="string">|         . . .   |</span></span><br><span class="line"><span class="string">|          .      |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>从本地拷贝公钥（后缀为 <code>.pub</code> 的文件 ）到 Linux 服务器（SCP 远程文件传输教程：<a href="/2022/03/19/%E6%9C%AC%E5%9C%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/">点击跳转</a>）</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 22 ~/.ssh/id_rsa_test.pub user@host:~/.ssh/</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>在远程 Linux 服务器中追加公钥到文件 <code>authorized_keys</code> 中</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa_test.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>在本地 ssh 配置文件 <code>~/.ssh/config</code> 中添加如下配置信息</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host host</span><br><span class="line">    HostName host</span><br><span class="line">    User user</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_test</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>Host</code>：远程服务器的 IP 地址</p></li><li class="lvl-2"><p><code>HostName</code>：远程服务器的 IP 地址</p></li><li class="lvl-2"><p><code>User</code>：远程服务器的用户名称</p></li><li class="lvl-2"><p><code>IdentityFile</code>：本地私钥保存路径</p></li></ul><h2 id="注意">注意</h2><div class="warning"><p><strong>警告</strong><br>远程 Linux 服务器必须开启公钥密码验证和 RSA 加密验证，允许免密登录，并确保加密验证文件正确。</p></div><ol><li class="lvl-3"><p>首先，查看 SSH 配置文件</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>可以看到公钥密码验证和 RSA 加密验证都是 <code>yes</code>，加密验证文件是 <code>.ssh/authorized_keys</code></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication yes</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>如若不然，请联系管理员修改配置文件</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><h2 id="参考-10">参考</h2><blockquote><p><a class="link"   href="https://code.visualstudio.com/docs/remote/troubleshooting" >Visual Studio Code 远程开发疑难解答提示和技巧<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="关于-11">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-11">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Linux%E3%80%91%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/%E9%98%B2%E4%BA%BA-pixiv.net-79919440.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】防人 【P站ID】79919440</div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介-7&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;每次在本地计算机上通过 SSH 远程连接 Linux 服务器的时候都需要输入密码，非常繁琐，本文是配置 SSH 免密登录的教程。&lt;/p&gt;
&lt;h2 id=&quot;教程-5&quot;&gt;教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li class=&quot;lvl-3&quot;&gt;
</summary>
      
    
    
    
    <category term="linux" scheme="https://xavierjiezou.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://xavierjiezou.github.io/tags/linux/"/>
    
    <category term="ssh" scheme="https://xavierjiezou.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>【Python】遍历文件夹下的所有文件（glob）</title>
    <link href="https://xavierjiezou.github.io/2022/04/03/%E3%80%90Python%E3%80%91%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%88glob%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/04/03/%E3%80%90Python%E3%80%91%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%88glob%EF%BC%89/</id>
    <published>2022-04-03T15:59:56.000Z</published>
    <updated>2022-05-18T07:52:18.739Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%88glob%EF%BC%89/Python-Logo.png"                      alt="cover"                ></p><h2 id="引言-15">引言</h2><p>若文件夹下没有子文件夹，则遍历其下文件的最好方法是 <code>os.listdir()</code>。但如果文件夹下有子文件夹，并且还想用正则匹配的话，使用 Python 内置标准模块 <code>glob</code> 是最好的选择。</p><h2 id="安装-18">安装</h2><p>不需要安装，Python 内置标准模块。</p><h2 id="用法-8">用法</h2><p>glob 模块可根据 Unix 终端所用规则找出所有匹配特定模式的路径名，但会按<strong>不确定</strong>的顺序返回结果。此外，glob 还支持三种正则匹配模式：</p><ul class="lvl-0"><li class="lvl-2"><p><code>*</code>：匹配 0 个或多个字符</p></li><li class="lvl-2"><p><code>?</code>：匹配单个字符</p></li><li class="lvl-2"><p><code>[]</code>：匹配指定范围内的字符，如 [0-9] 匹配数字，[a-z] 匹配字母</p></li></ul><hr><p><strong>测试样例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root:.</span><br><span class="line">│  1.gif</span><br><span class="line">│  2.txt</span><br><span class="line">│  cart.gif</span><br><span class="line">└──sub</span><br><span class="line">        3.txt</span><br><span class="line">        4.gif</span><br></pre></td></tr></table></figure><p><strong>实战代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历 root 目录</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/*&#x27;</span>)  </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>, <span class="string">&#x27;root\\cart.gif&#x27;</span>, <span class="string">&#x27;root\\sub&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下的所有文件（不含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/*.*&#x27;</span>)                        </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>, <span class="string">&#x27;root\\cart.gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下的所有文件（包含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/**/*.*&#x27;</span>, recursive=<span class="literal">True</span>)     </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>, <span class="string">&#x27;root\\cart.gif&#x27;</span>, <span class="string">&#x27;root\\sub\\3.txt&#x27;</span>, <span class="string">&#x27;root\\sub\\4.gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下的所有 .gif 后缀的文件（不含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/*.gif&#x27;</span>)    </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\cart.gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下的所有 .gif 后缀的文件（包含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/**/*.gif&#x27;</span>, recursive=<span class="literal">True</span>) </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\cart.gif&#x27;</span>, <span class="string">&#x27;root\\sub\\4.gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下以数字命名的所有文件（不含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/[0-9].*&#x27;</span>)   </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下以数字命名的所有文件（包含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/**/[0-9].*&#x27;</span>, recursive=<span class="literal">True</span>) </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>, <span class="string">&#x27;root\\sub\\3.txt&#x27;</span>, <span class="string">&#x27;root\\sub\\4.gif&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下文件名为单个字符的所有文件（不含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/?.*&#x27;</span>)  </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 root 目录下文件名为单个字符的所有文件（包含子目录中的文件）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">&#x27;root/**/?.*&#x27;</span>, recursive=<span class="literal">True</span>) </span><br><span class="line">[<span class="string">&#x27;root\\1.gif&#x27;</span>, <span class="string">&#x27;root\\2.txt&#x27;</span>, <span class="string">&#x27;root\\sub\\3.txt&#x27;</span>, <span class="string">&#x27;root\\sub\\4.gif&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="注意-4">注意</h2><div class="warning"><p><strong>警告</strong><br>glob.glob() 返回结果（列表类型）的顺序是不确定的。想要确定的返回顺序，可以使用 sorted() 或 .sort() 进一步排序处理。</p></div><h2 id="参考-18">参考</h2><blockquote><p><a class="link"   href="https://docs.python.org/zh-cn/3/library/glob.html" >https://docs.python.org/zh-cn/3/library/glob.html<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="关于-18">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-18">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E3%80%90Python%E3%80%91%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%88glob%EF%BC%89/%E3%81%97%E3%81%8D%E3%81%AA%E3%81%97%E3%82%85%E3%83%BC%E3%81%84%E3%81%A1-pixiv.net-71253216.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】しきなしゅーいち 【P站ID】71253216</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://xavierjiezou.github.io/tags/python/"/>
    
    <category term="glob" scheme="https://xavierjiezou.github.io/tags/glob/"/>
    
  </entry>
  
  <entry>
    <title>Google Chrome 浏览器安装教程</title>
    <link href="https://xavierjiezou.github.io/2022/04/03/Google-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://xavierjiezou.github.io/2022/04/03/Google-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2022-04-03T15:01:46.000Z</published>
    <updated>2022-05-18T07:52:18.427Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/Google-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Google-Chrome-Logo.png"                      alt="cover"                ></p><h2 id="简介-4">简介</h2><p>Google Chrome 是由谷歌公司开发的网络浏览器。</p><h2 id="下载-2">下载</h2><blockquote><p><a class="link"   href="https://google.cn/chrome/" >https://google.cn/chrome/<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="安装-5">安装</h2><p>从官网下载 Google Chrome 浏览器安装包，下载完成后双击默认安装即可。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/Google-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1648969727579.png"                      alt="1"                ></p><h2 id="拓展">拓展</h2><p>国内谷歌服务受限，导致无法登录谷歌账号进行同步，这里推荐 <a class="link"   href="https://iguge.xyz/" >iGG 谷歌学术助手<i class="fas fa-external-link-alt"></i></a>。使用该软件可以免费访问谷歌服务，包括但不限于谷歌搜索，谷歌账号同步，谷歌邮箱，谷歌学术等。</p><h2 id="关于-4">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-4">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/Google-Chrome-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E4%BD%90%E5%80%89%E3%81%8A%E3%82%8A%E3%81%93@%E5%8D%98%E8%A1%8C%E6%9C%AC%E7%99%BA%E5%A3%B2%E4%B8%AD-pixiv.net-81241050.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】佐倉おりこ 【P站ID】81241050</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="application" scheme="https://xavierjiezou.github.io/categories/application/"/>
    
    
    <category term="installation" scheme="https://xavierjiezou.github.io/tags/installation/"/>
    
    <category term="application" scheme="https://xavierjiezou.github.io/tags/application/"/>
    
    <category term="google" scheme="https://xavierjiezou.github.io/tags/google/"/>
    
    <category term="chrome" scheme="https://xavierjiezou.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>固态硬盘信息查验和速度测试</title>
    <link href="https://xavierjiezou.github.io/2022/03/28/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/"/>
    <id>https://xavierjiezou.github.io/2022/03/28/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/</id>
    <published>2022-03-28T11:44:26.000Z</published>
    <updated>2022-05-18T07:52:18.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言-22">引言</h2><p>今天，笔者新购入的 1T 固态硬盘到货了。检查一下是否是全新的，容量是否达标，速度是否和商家描述的差不多，顺便出一期教程分享给大家。</p><h2 id="准备-3">准备</h2><p>我们需要用到两款软件，分别是 CrystalDiskInfo 和 CrystalDiskMark，前者用来查看硬盘信息和使用状况，后者用于对硬盘进行性能（速度）测试。（下载地址：<a class="link"   href="https://crystalmark.info/" >https://crystalmark.info/<i class="fas fa-external-link-alt"></i></a>）</p><div class="tips"><p><strong>提示</strong><br>两个软件都是同一个作者开发的，有标准版和萌妹子版可供选择，对于喜欢二次元的同学推荐入手萌妹子版，都是免费的，只不过萌妹子版的安装包体积会大很多。</p></div><h2 id="教程-14">教程</h2><p>分别测试电脑原装的已经用了很久的 128G 固态硬盘和 1T 机械硬盘，以及新买的 1T 固态硬盘的性能，对比结果如下：</p><table><thead><tr><th></th><th>128G SSD</th><th>1T HHD</th><th>1T SSD</th></tr></thead><tbody><tr><td>硬盘信息</td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/128g-ssd-info.png"                      alt="128g-ssd-info"                ></td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/1t-hhd-info.png"                      alt="1t-hhd-info"                ></td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/1t-ssd-info.png"                      alt="1t-ssd-info"                ></td></tr><tr><td>速度测试</td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/128g-ssd-speed.png"                      alt="128g-ssd-speed"                ></td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/1t-hhd-speed.png"                      alt="1t-hhd-speed"                ></td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/1t-ssd-speed.png"                      alt="1t-ssd-speed"                ></td></tr></tbody></table><p>对于新买的固态硬盘，商家给出的连续读写速度如下，和我们测试结果相差不大，说明这个硬盘没什么问题。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/good.jpg"                      alt="good"                ></p><h2 id="参考-21">参考</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/ref-1.jpg"                      alt="ref1"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/ref-2.jpg"                      alt="ref2"                ></p><style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-DNOGGypEszSJLwwe" src="https://player.bilibili.com/player.html?bvid=BV1yZ4y1D72e&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-DNOGGypEszSJLwwe").style.height=document.getElementById("mmedia-DNOGGypEszSJLwwe").scrollWidth*0.76+"px";    window.onresize = function(){      document.getElementById("mmedia-DNOGGypEszSJLwwe").style.height=document.getElementById("mmedia-DNOGGypEszSJLwwe").scrollWidth*0.76+"px";    }; </script><h2 id="关于-26">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-22">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting/post/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E4%BF%A1%E6%81%AF%E6%9F%A5%E9%AA%8C%E5%92%8C%E9%80%9F%E5%BA%A6%E6%B5%8B%E8%AF%95/%E8%97%A4%E5%8E%9F-pixiv.net-80545109.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】藤原 【P站ID】80545109</div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言-22&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;今天，笔者新购入的 1T 固态硬盘到货了。检查一下是否是全新的，容量是否达标，速度是否和商家描述的差不多，顺便出一期教程分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;准备-3&quot;&gt;准备&lt;/h2&gt;
&lt;p&gt;我们需要用到两款软件，分别是 Cry</summary>
      
    
    
    
    <category term="application" scheme="https://xavierjiezou.github.io/categories/application/"/>
    
    
    <category term="application" scheme="https://xavierjiezou.github.io/tags/application/"/>
    
    <category term="ssd" scheme="https://xavierjiezou.github.io/tags/ssd/"/>
    
  </entry>
  
  <entry>
    <title>【LaTex】IEEE论文作者信息排版</title>
    <link href="https://xavierjiezou.github.io/2022/03/27/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/"/>
    <id>https://xavierjiezou.github.io/2022/03/27/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/</id>
    <published>2022-03-27T11:43:04.000Z</published>
    <updated>2022-05-18T07:52:18.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言-7">引言</h2><p>IEEE 会议论文投稿，样例论文作者信息排版如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/1648352728065.png"                      alt="1"                ></p><p>但是给的 LaTex 模板里面渲染的效果却是这样的：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/1648352859752.png"                      alt="2"                ></p><p>对应的 LaTex 语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">\author&#123;\IEEEauthorblockN&#123;Michael Shell&#125;</span><br><span class="line">\IEEEauthorblockA&#123;School of Electrical and\\Computer Engineering\\</span><br><span class="line">Georgia Institute of Technology\\</span><br><span class="line">Atlanta, Georgia 30332--0250\\</span><br><span class="line">Email: http://www.michaelshell.org/contact.html&#125;</span><br><span class="line">\and</span><br><span class="line">\IEEEauthorblockN&#123;Homer Simpson&#125;</span><br><span class="line">\IEEEauthorblockA&#123;Twentieth Century Fox\\</span><br><span class="line">Springfield, USA\\</span><br><span class="line">Email: homer@thesimpsons.com&#125;</span><br><span class="line">\and</span><br><span class="line">\IEEEauthorblockN&#123;James Kirk\\ and Montgomery Scott&#125;</span><br><span class="line">\IEEEauthorblockA&#123;Starfleet Academy\\</span><br><span class="line">San Francisco, California 96678--2391\\</span><br><span class="line">Telephone: (800) 555--1212\\</span><br><span class="line">Fax: (888) 555--1212&#125;&#125;</span><br></pre></td></tr></table></figure><p>如何修改 LaTex 语句，使其达到样例论文展示的效果？</p><h2 id="教程-4">教程</h2><p>按照如下修改方式修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\author&#123;</span><br><span class="line">\IEEEauthorblockN&#123;</span><br><span class="line">Michael Shell\IEEEauthorrefmark&#123;1&#125;,</span><br><span class="line">Homer Simpson\IEEEauthorrefmark&#123;2&#125;,</span><br><span class="line">James Kirk\IEEEauthorrefmark&#123;3&#125;, and</span><br><span class="line">Montgomery Scott\IEEEauthorrefmark&#123;3&#125;&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\IEEEauthorrefmark&#123;1&#125;School of Electrical and Computer Engineering, Georgia Institute of Technology, Atlanta, Georgia 30332--0250&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\IEEEauthorrefmark&#123;2&#125;Twentieth Century Fox, Springfield, USA&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\IEEEauthorrefmark&#123;3&#125;Starfleet Academy, San Francisco, California 96678--2391&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\IEEEauthorrefmark&#123;3&#125;Starfleet Academy, San Francisco, California 96678--2391&#125;</span><br><span class="line">\IEEEauthorblockA&#123;ms@michaelshell.org, homer@thesimpsons.com, (800) 555--1212, (888) 555--1212&#125;</span><br><span class="line">\IEEEauthorblockA&#123;Corresponding Author: Michael Shell \quad Email: ms@michaelshell.org&#125;&#125;</span><br></pre></td></tr></table></figure><p>修改完成渲染效果如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/1648372515495.png"                      alt="3"                ></p><p>发现还是不太一样，作者标注格式是星号，而我们要的是数字。</p><p>要想实现数字的效果，需要在 <code>\begin&#123;document&#125;</code> 前插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\DeclareRobustCommand*&#123;\IEEEauthorrefmark&#125;[1]&#123;%</span><br><span class="line">    \raisebox&#123;0pt&#125;[0pt][0pt]&#123;\textsuperscript&#123;\footnotesize\ensuremath&#123;#1&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>最终效果：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/1648372756500.png"                      alt="4"                ></p><h2 id="参考-9">参考</h2><blockquote><p><a class="link"   href="https://blog.csdn.net/mimomumu/article/details/59111005" >https://blog.csdn.net/mimomumu/article/details/59111005<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="关于-10">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-10">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90LaTex%E3%80%91IEEE%E8%AE%BA%E6%96%87%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF%E6%8E%92%E7%89%88/%E3%81%8C%E3%81%B0%E3%81%8A%E3%80%82@3%E6%97%A5%E7%9B%AE%E8%A5%BF%E3%82%80-21a-pixiv.net-73436968.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】3日目西む 【P站ID】73436968</div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言-7&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;IEEE 会议论文投稿，样例论文作者信息排版如下：&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg</summary>
      
    
    
    
    <category term="latex" scheme="https://xavierjiezou.github.io/categories/latex/"/>
    
    
    <category term="latex" scheme="https://xavierjiezou.github.io/tags/latex/"/>
    
    <category term="IEEE" scheme="https://xavierjiezou.github.io/tags/IEEE/"/>
    
  </entry>
  
  <entry>
    <title>DataEase安装教程（Windows）</title>
    <link href="https://xavierjiezou.github.io/2022/03/24/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/03/24/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/</id>
    <published>2022-03-24T11:19:15.000Z</published>
    <updated>2022-05-18T07:52:18.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>DataEase 是开源的数据可视化分析工具，帮助用户快速分析数据并洞察业务趋势，从而实现业务的改进与优化。DataEase 支持丰富的数据源连接，能够通过拖拉拽方式快速制作图表，并可以方便的与他人分享。</p><h2 id="示例">示例</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/ex_1.png"                      alt="ex_1"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/ex_2.png"                      alt="ex_2"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/ex_3.png"                      alt="ex_3"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/ex_4.png"                      alt="ex_4"                ></p><h2 id="安装-2">安装</h2><h3 id="安装-WSL">安装 WSL</h3><p><mark>以管理员身份打开 cmd</mark></p><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line"></span><br><span class="line">部署映像服务和管理工具</span><br><span class="line">版本: 10.0.22000.1</span><br><span class="line"></span><br><span class="line">映像版本: 10.0.22000.556</span><br><span class="line"></span><br><span class="line">启用一个或多个功能</span><br><span class="line">[==========================100.0%==========================]</span><br><span class="line">操作成功完成。</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line"></span><br><span class="line">部署映像服务和管理工具</span><br><span class="line">版本: 10.0.22000.1</span><br><span class="line"></span><br><span class="line">映像版本: 10.0.22000.556</span><br><span class="line"></span><br><span class="line">启用一个或多个功能</span><br><span class="line">[==========================100.0%==========================]</span><br><span class="line">操作成功完成。</span><br></pre></td></tr></table></figure><p><mark>立即重启操作系统</mark></p><h3 id="更新-WSL">更新 WSL</h3><blockquote><p>下载<a class="link"   href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" >适用于 x64 计算机的 WSL2 Linux 内核更新包<i class="fas fa-external-link-alt"></i></a>并安装</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/1.png"                      alt="1"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/2.png"                      alt="2"                ></p><p><mark>设置 WSL2 为默认</mark></p><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;wsl --set-default-version 2</span><br><span class="line">有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2</span><br><span class="line">操作成功完成。</span><br></pre></td></tr></table></figure><h3 id="安装-Ubuntu">安装 Ubuntu</h3><p>在 Windows 应用商店里搜索&quot;Ubuntu&quot;并安装</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/3.png"                      alt="3"                ></p><p>安装完成后打开，设置用户名和密码</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/4.png"                      alt="4"                ></p><p>检测 Ubuntu WSL 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl.exe -l -v</span><br></pre></td></tr></table></figure><p>输出如下结果，可以看到 VERSION 是 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   NAME      STATE           VERSION</span><br><span class="line">* Ubuntu    Running         2</span><br></pre></td></tr></table></figure><p>如果 VERSION 为 1，继续执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl.exe --set-version Ubuntu 2</span><br></pre></td></tr></table></figure><h3 id="安装-Docker">安装 Docker</h3><blockquote><p>下载<a class="link"   href="https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe" >Docker Desktop for Windows<i class="fas fa-external-link-alt"></i></a></p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/5.png"                      alt="5"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/6.png"                      alt="6"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/7.png"                      alt="7"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/8.png"                      alt="8"                ></p><h3 id="安装-Dataease">安装 Dataease</h3><ol><li class="lvl-3"><p>下载离线版安装包</p></li></ol><blockquote><p><a class="link"   href="https://community.fit2cloud.com/#/products/dataease/downloads" >https://community.fit2cloud.com/#/products/dataease/downloads<i class="fas fa-external-link-alt"></i></a></p></blockquote><ol start="2"><li class="lvl-3"><p>启动 Ubuntu，执行以下命令，切换到 root 用户</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su -</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/9.png"                      alt="9"                ></p><ol start="3"><li class="lvl-3"><p>检查 Docker 是否能正常使用</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><p>正常显示版本号，则可以继续执行以下操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker version 20.10.13, build a224086</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>执行以下解压命令</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设安装包存放路径为 c:\dataease-v1.5.0-offline.tar.gz</span></span><br><span class="line"><span class="built_in">cd</span> /mnt/c</span><br><span class="line"><span class="comment"># 解压安装包</span></span><br><span class="line">tar zxvf dataease-v1.8.0-offline.tar.gz</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>执行安装脚本</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入安装包目录</span></span><br><span class="line"><span class="built_in">cd</span> dataease-v1.5.0-offline</span><br><span class="line"><span class="comment"># 运行安装脚本</span></span><br><span class="line">/bin/bash install.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">root@DESKTOP-L559T0C:/mnt/c<span class="comment"># cd dataease-v1.8.0-offline/</span></span><br><span class="line">root@DESKTOP-L559T0C:/mnt/c/dataease-v1.8.0-offline<span class="comment"># /bin/bash install.sh</span></span><br><span class="line">======================= 开始安装 =======================</span><br><span class="line">[DATAEASE Log]: 拷贝配置文件模板文件  -&gt; /opt/dataease/conf</span><br><span class="line">[DATAEASE Log]: 根据安装配置参数调整配置文件</span><br><span class="line">time: Wed Mar 23 10:28:06 CST 2022</span><br><span class="line">[DATAEASE Log]: 检测到 Docker 已安装，跳过安装步骤</span><br><span class="line">[DATAEASE Log]: 启动 Docker</span><br><span class="line">docker: unrecognized service</span><br><span class="line">[DATAEASE Log]: 检测到 Docker Compose 已安装，跳过安装步骤</span><br><span class="line">[DATAEASE Log]: 加载镜像</span><br><span class="line">Loaded image: registry.cn-qingdao.aliyuncs.com/dataease/dataease:v1.8.0</span><br><span class="line">Loaded image: registry.cn-qingdao.aliyuncs.com/dataease/doris:0.15-1125</span><br><span class="line">Loaded image: registry.cn-qingdao.aliyuncs.com/dataease/kettle:8.3-v1.7</span><br><span class="line">Loaded image: registry.cn-qingdao.aliyuncs.com/dataease/mysql:5.7.36</span><br><span class="line">[DATAEASE Log]: 配置 dataease Service</span><br><span class="line">vm.max_map_count = 262144</span><br><span class="line">[DATAEASE Log]: 启动服务</span><br><span class="line"></span><br><span class="line">[+] Running 6/6</span><br><span class="line"> ⠿ Network dataease_dataease-network  Created 0.6ss</span><br><span class="line"> ⠿ Container mysql                    Healthy 15.6s</span><br><span class="line"> ⠿ Container doris-be                 Healthy 15.1s</span><br><span class="line"> ⠿ Container kettle                   Started 4.4ss</span><br><span class="line"> ⠿ Container dataease                 Started 15.8ss</span><br><span class="line"> ⠿ Container doris-fe                 Started 14.9ss</span><br><span class="line"></span><br><span class="line">NAME                COMMAND                  SERVICE             STATUS               PORTS</span><br><span class="line">dataease            <span class="string">&quot;/deployments/run-ja…&quot;</span>   dataease            running (starting)   0.0.0.0:80-&gt;8081/tcp</span><br><span class="line">doris-be            <span class="string">&quot;/entrypoint.sh&quot;</span>         doris-be            running (healthy)</span><br><span class="line">doris-fe            <span class="string">&quot;/entrypoint.sh&quot;</span>         doris-fe            running (starting)</span><br><span class="line">kettle              <span class="string">&quot;/opt/kettle/carte.s…&quot;</span>   kettle              running</span><br><span class="line">mysql               <span class="string">&quot;docker-entrypoint.s…&quot;</span>   mysql               running (healthy)    0.0.0.0:3306-&gt;3306/tcp</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动中，请稍候 ...</span><br><span class="line">[DATAEASE Log]: 服务启动成功!</span><br><span class="line">======================= 安装完成 =======================</span><br><span class="line"></span><br><span class="line">请通过以下方式访问:</span><br><span class="line"> URL: http://<span class="variable">$LOCAL_IP</span>:80</span><br><span class="line"> 用户名: admin</span><br><span class="line"> 初始密码: dataease</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>打开浏览器，地址栏输入 <code>localhost:80</code>，输入用户名和密码进入系统</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/10.png"                      alt="10"                ></p><h2 id="参考-2">参考</h2><blockquote><p><a class="link"   href="https://dataease.io/docs/installation/offline_installation_windows/" >离线安装(Windows) - DataEase 文档<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="关于-2">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-2">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/DataEase%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/%E5%AE%A4%E5%9F%B4%E3%83%9D%E3%82%B3-pixiv.net-84118881.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】/室埴ポコ 【P站ID】84118881</div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;DataEase 是开源的数据可视化分析工具，帮助用户快速分析数据并洞察业务趋势，从而实现业务的改进与优化。DataEase 支持丰富的数据源连接，能够通过拖拉拽方式快速制作图表，并可以方便的与他人分享。&lt;/p&gt;
&lt;h2 id=&quot;示例</summary>
      
    
    
    
    <category term="visualization" scheme="https://xavierjiezou.github.io/categories/visualization/"/>
    
    
    <category term="visualization" scheme="https://xavierjiezou.github.io/tags/visualization/"/>
    
    <category term="dataease" scheme="https://xavierjiezou.github.io/tags/dataease/"/>
    
    <category term="installation" scheme="https://xavierjiezou.github.io/tags/installation/"/>
    
  </entry>
  
  <entry>
    <title>Node.js安装教程（Windows）</title>
    <link href="https://xavierjiezou.github.io/2022/03/24/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/03/24/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/</id>
    <published>2022-03-24T09:47:37.000Z</published>
    <updated>2022-05-18T07:52:18.427Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/Node.js-Logo.png"                      alt="cover"                ></p><h2 id="简介-5">简介</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。</p><h2 id="下载-3">下载</h2><blockquote><ul class="lvl-1"><li class="lvl-2"><p>🔗官网下载：<a class="link"   href="https://nodejs.org/zh-cn/download/" >https://nodejs.org/zh-cn/download/<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>👍镜像下载：<a class="link"   href="http://nodejs.cn/download/" >http://nodejs.cn/download/<i class="fas fa-external-link-alt"></i></a></p></li></ul></blockquote><h2 id="安装-6">安装</h2><div class="tips"><p><strong>提示</strong><br>一路默认安装即可，可自定义安装路径</p></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/1.png"                      alt="1"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/2.png"                      alt="2"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/3.png"                      alt="3"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/4.png"                      alt="4"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/5.png"                      alt="5"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/6.png"                      alt="6"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/7.png"                      alt="7"                ></p><h2 id="检验">检验</h2><div class="tips"><p><strong>提示</strong><br>打开终端，输入 <code>node</code> 出现类似如下信息，则说明安装成功</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">Welcome to Node.js v14.19.1.</span><br><span class="line">Type <span class="string">&quot;.help&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="关于-5">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-5">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Node-js%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%EF%BC%88Windows%EF%BC%89/TOKKYU-pixiv.net-80503896.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】TOKKYU 【P站ID】80503896</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="node.js" scheme="https://xavierjiezou.github.io/categories/node-js/"/>
    
    
    <category term="installation" scheme="https://xavierjiezou.github.io/tags/installation/"/>
    
    <category term="windows" scheme="https://xavierjiezou.github.io/tags/windows/"/>
    
    <category term="node.js" scheme="https://xavierjiezou.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Git软件安装教程（Windows）</title>
    <link href="https://xavierjiezou.github.io/2022/03/23/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://xavierjiezou.github.io/2022/03/23/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2022-03-23T21:21:01.000Z</published>
    <updated>2022-05-18T07:52:18.427Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/Git-Logo.png"                      alt="cover" width="100%"                ></p><h2 id="简介-3">简介</h2><p>Git 是一个开源免费的分布式版本控制工具，旨在以高效的速度处理各种规格的项目。Git 易于学习，占用空间小，性能快如闪电。它比 Subversion、CVS、Perforce 和 ClearCase 等 SCM 工具更具优势，具有廉价的本地分支，方便的暂存区和多个工作流等特征。</p><h2 id="下载">下载</h2><blockquote><p>🔗官网下载：<a class="link"   href="https://git-scm.com/download/win" >https://git-scm.com/download/win<i class="fas fa-external-link-alt"></i></a><br>👍镜像下载：<a class="link"   href="https://npm.taobao.org/mirrors/git-for-windows/" >https://npm.taobao.org/mirrors/git-for-windows/<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="安装-4">安装</h2><ol><li class="lvl-3"><p>下载安装程序开始安装<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/1.png"                      alt="1"                ></p></li><li class="lvl-3"><p>这一步是选择安装路径<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/2.png"                      alt="2"                ></p></li><li class="lvl-3"><p>选择需要安装的组件，默认即可<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/3.png"                      alt="3"                ></p></li><li class="lvl-3"><p>添加快捷方式到开始菜单<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/4.png"                      alt="4"                ></p></li><li class="lvl-3"><p>选择 Git 的默认编辑器，笔者常用 Vscode，所以这里就选它了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/5.png"                      alt="5"                ></p></li><li class="lvl-3"><p>设置初始化分支的名称，这里设置为 <code>main</code><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/6.png"                      alt="6"                ></p></li><li class="lvl-3"><p>设置如何将 Git 添加到环境变量，使用推荐的设置即可<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/7.png"                      alt="7"                ></p></li><li class="lvl-3"><p>选择要使用的 SSH 程序，默认即可<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/8.png"                      alt="8"                ></p></li><li class="lvl-3"><p>选择 HTTPS 连接使用的后端库，默认即可<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/9.png"                      alt="9"                ></p></li><li class="lvl-4"><p>配置换行符转换方式，默认即可<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/10.png"                      alt="10"                ></p></li><li class="lvl-4"><p>选择 Git Bash 要使用的终端仿真程序，默认即可<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/11.png"                      alt="11"                ></p></li><li class="lvl-4"><p>选择 <code>git pull</code> 的行为，默认即可<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/12.png"                      alt="12"                ></p></li><li class="lvl-4"><p>配置帮助文档，默认即可<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/13.png"                      alt="13"                ></p></li><li class="lvl-4"><p>配置额外的选项，默认即可<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/14.png"                      alt="14"                ></p></li><li class="lvl-4"><p>这里可以选择是否开始一些实验性的功能，对于喜欢尝鲜的用户可以开启<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/15.png"                      alt="15"                ></p></li><li class="lvl-4"><p>安装完成，启动 Git Bash<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/16.png"                      alt="16"                ></p></li><li class="lvl-4"><p>Git Bash 启动界面如下<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/17.png"                      alt="17"                ></p></li></ol><h2 id="配置">配置</h2><p>首次打开需要配置用户名和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br></pre></td></tr></table></figure><p>使用如下命令查看刚配置的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><h2 id="参考-4">参考</h2><blockquote><p>Git-官方网站：<a class="link"   href="https://git-scm.com/" >https://git-scm.com/<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="关于-3">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-3">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/Git%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/%E3%81%91%E3%82%93%E3%81%9F%E3%81%86%E3%82%8D%E3%81%99%EF%BC%A03%E6%97%A5%E7%9B%AE%E8%A5%BFG15b-pixiv.net-67579299.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】3日目西G15b 【P站ID】67579299</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="git" scheme="https://xavierjiezou.github.io/categories/git/"/>
    
    
    <category term="installation" scheme="https://xavierjiezou.github.io/tags/installation/"/>
    
    <category term="git" scheme="https://xavierjiezou.github.io/tags/git/"/>
    
    <category term="windows" scheme="https://xavierjiezou.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>【Windows】合并分区教程（解决C盘空间不足）</title>
    <link href="https://xavierjiezou.github.io/2022/03/21/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/03/21/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/</id>
    <published>2022-03-21T12:35:28.000Z</published>
    <updated>2022-05-18T07:52:18.739Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/Windows_Logo.jpg"                      alt="logo"                ></p><h2 id="引言-18">引言</h2><p>不知道你有没有遇到过 C 盘空间不足，经常需要清理的情况。即使你不将软件和数据放到 C 盘，随着 Windows 系统的更新，C 盘存放的东西也会越来越多。今天，笔者给大家带来 Windows 磁盘合并分区的教程，让你不再为 C 盘的空见不足而烦恼。</p><h2 id="教程-11">教程</h2><h3 id="通过磁盘管理合并分区">通过磁盘管理合并分区</h3><div class="warning"><p><strong>警告</strong><br>该方法有限制条件：要求待合并的分区必须相邻。</p></div><ol><li class="lvl-3"><p><kbd>WIN+R</kbd> 打开运行，输入 <code>diskmgmt.msc</code> 点击<strong>确定</strong>，打开<strong>磁盘管理</strong></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647838040533.png"                      alt="1_1"                ></p><ol start="2"><li class="lvl-3"><p>可以看到我这里有 3 个磁盘卷：卷 C，卷 D，以及两者之间的一个卷（恢复分区）</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647838122371.png"                      alt="1_2"                ></p><ol start="3"><li class="lvl-3"><p>我这里想将 D 盘合并到 C 盘，那么先要删除 D 盘对应的卷</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647838353409.png"                      alt="1_3"                ></p><ol start="4"><li class="lvl-3"><p>删除卷会格式化 D 盘，因此请先备份重要的文件</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647838443621.png"                      alt="1_4"                ></p><ol start="5"><li class="lvl-3"><p>删除卷后该卷就变成了一个待分配的可用空间</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647838758165.png"                      alt="1_5"                ></p><ol start="6"><li class="lvl-3"><p>鼠标右击 C 盘选择<strong>拓展卷</strong>，添加上一步删除的卷即可完成分区的合并</p></li></ol><div class="warning"><p><strong>警告</strong><br>但是，我这里 C 盘和 D 盘并不相邻，中间有个恢复分区挡着，因此就无法合并了，需要利用第三方工具，如分区助手，下面是<a class="link"   href="https://www.disktool.cn/" >分区助手<i class="fas fa-external-link-alt"></i></a>合并分区的教程。</p></div><h3 id="通过分区助手合并分区">通过分区助手合并分区</h3><ol><li class="lvl-3"><p>鼠标右击 D 盘选择<strong>删除分区</strong></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647840036883.png"                      alt="2_1"                ></p><ol start="2"><li class="lvl-3"><p>点击<strong>确定</strong>（默认输出分区而不删除数据，当然如果你不需要这些数据或者已经备份，那可以直接删掉）</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647840097711.png"                      alt="2_2"                ></p><ol start="3"><li class="lvl-3"><p>右击 C 盘，选择<strong>合并分区</strong></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647840182347.png"                      alt="2_3"                ></p><ol start="4"><li class="lvl-3"><p>勾选<strong>未分配空间</strong>，点击<strong>确定</strong></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647840250702.png"                      alt="2_4"                ></p><ol start="5"><li class="lvl-3"><p>点击左上角的<strong>提交</strong>，点击<strong>执行</strong></p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647840977415.png"                      alt="2_5"                ></p><ol start="6"><li class="lvl-3"><p>执行完成，点击<strong>确定</strong><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/1647841622904.png"                      alt="2_6"                ></p></li></ol><h2 id="注意-5">注意</h2><div class="warning"><p><strong>警告</strong><br>只有同一磁盘的分区才能合并，不同磁盘的分区不能合并。例如，磁盘 0 里面的多个子分区是可以合并的，但是磁盘 0 不能与磁盘 1 合并。</p></div><p>笔者电脑是 128G 的固态硬盘加上 1T 的机械硬盘，系统安装到固态硬盘，这样使用起来会更快。但是 128G 太小了，即使我尽可能地将所有的软件都安装到机械硬盘，随着系统更新，固态硬盘也会经常爆满。</p><p>于是，我想着能不能用分区助手将机械硬盘合并到固态硬盘分区里，格式化机械硬盘并准备合并到固态硬盘的时候，却发现合并不了，因为是完全不同的两个磁盘。笔者算是替大家踩坑了，吃了没常识的亏。</p><p>后来，我了解到我电脑有两个硬盘插槽，一个是 <code>m.2</code> 接口的，一个是 <code>sata</code> 接口的。m.2 接口插的是 128 GB 的固态硬盘，sata 接口插的是 1T 的机械硬盘。128G 太小了不够用，合并分区的方法行不通，只能买一块更大容量的固态硬盘替换。花了 500 大洋买了 1T 的固态硬盘，拆机装上之后，再也不用担心 C 盘爆满问题了。</p><h2 id="拓展-6">拓展</h2><p>这里再简单拓展一下电脑知识。电脑的这五个硬件至关重要：CPU，内存条，磁盘，显卡以及显示器。</p><ul class="lvl-0"><li class="lvl-2"><p>CPU：电脑最核心的硬件，决定单个程序运行的速度。CPU越好，你的 QQ 就运行越快。</p></li><li class="lvl-2"><p>内存条：内存越大，同时运行多个程序才不卡。</p></li><li class="lvl-2"><p>磁盘：数据的存储离不开磁盘。QQ 消息的历史纪录都需要保存在磁盘里面。</p></li><li class="lvl-2"><p>显卡：控制屏幕显示。好的显卡可以让你玩大型游戏时不掉帧。</p></li><li class="lvl-2"><p>显示器：高分辨率和高色域的显示器看起来更舒服。</p></li></ul><p>如果你感觉你的电脑很卡，那么最常规的方案就是加装内存条和固态硬盘，在不换电脑（CPU）的前提下，这是最经济的选择。</p><h2 id="关于-22">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-21">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Windows%E3%80%91%E5%90%88%E5%B9%B6%E5%88%86%E5%8C%BA%E6%95%99%E7%A8%8B%EF%BC%88%E8%A7%A3%E5%86%B3C%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%EF%BC%89/%E5%8C%97%E5%BD%A9%E3%81%82%E3%81%84%EF%BC%A0%E3%81%8A%E4%BB%95%E4%BA%8B%E5%8B%9F%E9%9B%86%E4%B8%AD-pixiv.net-73436361.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】北彩あい 【P站ID】73436361</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="windows" scheme="https://xavierjiezou.github.io/categories/windows/"/>
    
    
    <category term="windows" scheme="https://xavierjiezou.github.io/tags/windows/"/>
    
    <category term="disk" scheme="https://xavierjiezou.github.io/tags/disk/"/>
    
  </entry>
  
  <entry>
    <title>推荐一款免费开源的GIF动图软件（录制，编辑，压缩）</title>
    <link href="https://xavierjiezou.github.io/2022/03/21/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/"/>
    <id>https://xavierjiezou.github.io/2022/03/21/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/</id>
    <published>2022-03-21T10:05:36.000Z</published>
    <updated>2022-05-18T07:52:18.739Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/ScreenToGif_Logo.png"                      alt="cover" width="100%"                ></p><h2 id="引言-24">引言</h2><p>今天给大家推荐一款免费开源的，集录制，编辑，压缩于一体的 GIF 处理软件：<a class="link"   href="https://www.screentogif.com/" >ScreenToGif<i class="fas fa-external-link-alt"></i></a>。</p><h2 id="简介-16">简介</h2><p>ScreenToGif 是 GitHub 上的一个开源工具，该工具可以录制屏幕上任一选定的区域，录制完成后，你可以编辑和保存动画作为一个 gif，apng，video，psd 或 png 图像。</p><h2 id="下载-5">下载</h2><blockquote><p>官方下载地址：<a class="link"   href="https://github.com/NickeManarin/ScreenToGif/releases" >点击跳转<i class="fas fa-external-link-alt"></i></a>（无法访问或下载缓慢？请使用 <a href="/2022/03/14/%E5%A5%BD%E7%94%A8%E4%B8%94%E5%85%8D%E8%B4%B9%E7%9A%84GitHub%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/">GitHub 加速工具</a>）</p></blockquote><h2 id="用法-16">用法</h2><ol><li class="lvl-3"><p>安装完成后打开软件，点击录像机</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/1647829789009.png"                      alt="图1"                ></p><ol start="2"><li class="lvl-3"><p>选择一个区域，窗口或屏幕，点击录制</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/1647830064777.png"                      alt="图2"                ></p><ol start="3"><li class="lvl-3"><p>录制完成后可批量编辑图片帧，包括添加水印，大小调节，添加字幕等</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/1647830196076.png"                      alt="图3"                ></p><ol start="4"><li class="lvl-3"><p>可选择包括图片，视频在内的多种导出格式，并且提供神经网络算法在内的多种编码器</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/1647830390355.png"                      alt="图4"                ></p><h2 id="关于-28">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-24">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%85%8D%E8%B4%B9%E5%BC%80%E6%BA%90%E7%9A%84GIF%E5%8A%A8%E5%9B%BE%E8%BD%AF%E4%BB%B6%EF%BC%88%E5%BD%95%E5%88%B6%EF%BC%8C%E7%BC%96%E8%BE%91%EF%BC%8C%E5%8E%8B%E7%BC%A9%EF%BC%89/Dangmyo-pixiv.net-75233788.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】Dangmyo 【P站ID】75233788</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://fastly.jsdeliv</summary>
      
    
    
    
    <category term="application" scheme="https://xavierjiezou.github.io/categories/application/"/>
    
    
    <category term="windows" scheme="https://xavierjiezou.github.io/tags/windows/"/>
    
    <category term="application" scheme="https://xavierjiezou.github.io/tags/application/"/>
    
    <category term="screentogif" scheme="https://xavierjiezou.github.io/tags/screentogif/"/>
    
    <category term="gif" scheme="https://xavierjiezou.github.io/tags/gif/"/>
    
  </entry>
  
  <entry>
    <title>【Vscode】快速生成用于排版效果测试的随机文本</title>
    <link href="https://xavierjiezou.github.io/2022/03/20/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/"/>
    <id>https://xavierjiezou.github.io/2022/03/20/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/</id>
    <published>2022-03-20T21:13:23.000Z</published>
    <updated>2022-05-18T07:52:18.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言-16">引言</h2><p>Vscode 中编写 HTML 时，输入 <code>lorem</code> 可自动生成“乱数假文”，即乱序的并没有实际含义的文本，但可提高排版测试的效率。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/1.gif"                      alt="图1 Vscode 自带 Lorem"                ></p><p>但 Vscode 自带的 <code>lorem</code> 仅支持 HTML 文件，不支持其它格式的文件，比如 Markdown 等。</p><p>因此，这里推荐 Vscode 中两款用于生成“乱数假文”的插件，一个用于英文，另一个是中文的。</p><h2 id="插件-2">插件</h2><h3 id="Lorem-ipsum">Lorem ipsum</h3><p>拓展中心搜索该插件名称并安装。<kbd>Ctrl+Shift+P</kbd> 调出控制台。</p><ul class="lvl-0"><li class="lvl-2"><p>Lorem Ipsum: Insert a line（插入一行）</p></li><li class="lvl-2"><p>Lorem Ipsum: Insert a paragraph（插入一段）</p></li><li class="lvl-2"><p>Lorem Ipsum: Insert multiple paragraphs（插入多段）</p></li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/1.gif"                      alt="图2 English Lorem"                ></p><h3 id="Chinese-Lorem">Chinese Lorem</h3><p>拓展中心搜索该插件名称并安装。<kbd>Ctrl+Shift+P</kbd> 调出控制台。</p><p>输入 <code>Insert Lorem</code> 后选择汉字字符总长度即可插入汉字的乱数假文。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/1.gif"                      alt="图3 Chinese Lorem"                ></p><h2 id="关于-20">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-19">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E3%80%90Vscode%E3%80%91%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E7%94%A8%E4%BA%8E%E6%8E%92%E7%89%88%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%96%87%E6%9C%AC/%E3%81%B5%E3%81%87%E3%81%82%E3%82%8A%E3%81%83%E3%81%82%E3%81%84%EF%BC%A0%E5%9C%9F%E6%9B%9C%E5%8D%97%E3%83%8A41a-pixiv.net-74663991.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】土曜南ナ41a 【P站ID】74663991</div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言-16&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;Vscode 中编写 HTML 时，输入 &lt;code&gt;lorem&lt;/code&gt; 可自动生成“乱数假文”，即乱序的并没有实际含义的文本，但可提高排版测试的效率。&lt;/p&gt;
&lt;p&gt;&lt;img  
                    </summary>
      
    
    
    
    <category term="vscode" scheme="https://xavierjiezou.github.io/categories/vscode/"/>
    
    
    <category term="vscode" scheme="https://xavierjiezou.github.io/tags/vscode/"/>
    
    <category term="lorem" scheme="https://xavierjiezou.github.io/tags/lorem/"/>
    
  </entry>
  
  <entry>
    <title>本地计算机与远程服务器之间的文件传输</title>
    <link href="https://xavierjiezou.github.io/2022/03/19/%E6%9C%AC%E5%9C%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    <id>https://xavierjiezou.github.io/2022/03/19/%E6%9C%AC%E5%9C%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</id>
    <published>2022-03-19T21:57:06.000Z</published>
    <updated>2022-05-18T07:52:18.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言-26">引言</h2><p>本地计算机与远程服务器常常需要进行文件传输，如将本地计算机中的文件<strong>上传</strong>到远程服务器，或从远程服务器<strong>下载</strong>文件到本地计算机。本文主要介绍包含 <strong>FTP</strong>，<strong>SFTP</strong> 和 <strong>SCP</strong> 在内的三种常用的文件传输方式，直接通过命令行操作，无需安装任何软件。</p><h2 id="简介-17">简介</h2><ul class="lvl-0"><li class="lvl-2"><p>FTP（File Transfer Protocol）：文件传输协议，基于互联网实现文件传输。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></li><li class="lvl-2"><p>SFTP（SSH File Transfer Protocol）：SSH 文件传输协议，也称安全文件传输协议，通过 SSH 建立的安全连接来实现加密文件传输。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p></li><li class="lvl-2"><p>SCP（Secure Copy）：通过 SSH 建立的安全连接实现本地机与远程机或两台远程机之间的文件传输。<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p></li></ul><h2 id="用法-17">用法</h2><div class="tips"><p><strong>提示</strong><br>SFTP 与 FTP 有着几乎一样的语法和功能，故这里只展示 SFTP 的用法。</p></div><h3 id="SFTP">SFTP</h3><p>SFTP 比 FTP 更加安全可靠，因此更推荐在实际应用场景中使用。</p><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看 SFTP 命令详解</strong></summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">sftp&gt; <span class="built_in">help</span></span><br><span class="line">Available commands:</span><br><span class="line"><span class="built_in">bye</span>                                Quit sftp</span><br><span class="line"><span class="built_in">cd</span> path                            Change remote directory to <span class="string">&#x27;path&#x27;</span></span><br><span class="line">chgrp [-h] grp path                Change group of file <span class="string">&#x27;path&#x27;</span> to <span class="string">&#x27;grp&#x27;</span></span><br><span class="line">chmod [-h] mode path               Change permissions of file <span class="string">&#x27;path&#x27;</span> to <span class="string">&#x27;mode&#x27;</span></span><br><span class="line">chown [-h] own path                Change owner of file <span class="string">&#x27;path&#x27;</span> to <span class="string">&#x27;own&#x27;</span></span><br><span class="line">df [-hi] [path]                    Display statistics <span class="keyword">for</span> current directory or</span><br><span class="line">                                   filesystem containing <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="built_in">exit</span>                               Quit sftp</span><br><span class="line">get [-afpR] remote [<span class="built_in">local</span>]         Download file</span><br><span class="line"><span class="built_in">help</span>                               Display this <span class="built_in">help</span> text</span><br><span class="line">lcd path                           Change <span class="built_in">local</span> directory to <span class="string">&#x27;path&#x27;</span></span><br><span class="line">lls [ls-options [path]]            Display <span class="built_in">local</span> directory listing</span><br><span class="line">lmkdir path                        Create <span class="built_in">local</span> directory</span><br><span class="line">ln [-s] oldpath newpath            Link remote file (-s <span class="keyword">for</span> symlink)</span><br><span class="line">lpwd                               Print <span class="built_in">local</span> working directory</span><br><span class="line">ls [-1afhlnrSt] [path]             Display remote directory listing</span><br><span class="line">lumask <span class="built_in">umask</span>                       Set <span class="built_in">local</span> <span class="built_in">umask</span> to <span class="string">&#x27;umask&#x27;</span></span><br><span class="line">mkdir path                         Create remote directory</span><br><span class="line">progress                           Toggle display of progress meter</span><br><span class="line">put [-afpR] <span class="built_in">local</span> [remote]         Upload file</span><br><span class="line"><span class="built_in">pwd</span>                                Display remote working directory</span><br><span class="line">quit                               Quit sftp</span><br><span class="line">reget [-fpR] remote [<span class="built_in">local</span>]        Resume download file</span><br><span class="line">rename oldpath newpath             Rename remote file</span><br><span class="line">reput [-fpR] <span class="built_in">local</span> [remote]        Resume upload file</span><br><span class="line">rm path                            Delete remote file</span><br><span class="line">rmdir path                         Remove remote directory</span><br><span class="line">symlink oldpath newpath            Symlink remote file</span><br><span class="line">version                            Show SFTP version</span><br><span class="line">!<span class="built_in">command</span>                           Execute <span class="string">&#x27;command&#x27;</span> <span class="keyword">in</span> <span class="built_in">local</span> shell</span><br><span class="line">!                                  Escape to <span class="built_in">local</span> shell</span><br><span class="line">?                                  Synonym <span class="keyword">for</span> <span class="built_in">help</span></span><br></pre></td></tr></table></figure></details><h4 id="建立连接">建立连接</h4><p>在本地计算机输入以下命令即可连接到远程服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sftp -P 22 user@host</span><br></pre></td></tr></table></figure><p><code>-P</code>：指定 SSH 远程连接的端口号。默认是 22。</p><p>执行以上命令后，会要求你输入密码，验证通过后即可进行 SFTP 命令行交互界面。</p><h4 id="文件传输">文件传输</h4><ul class="lvl-0"><li class="lvl-2"><p>本地计算机上传文件到远程服务器：<code>put filename</code></p></li><li class="lvl-2"><p>远程服务器下载文件到本地计算机：<code>get filename</code></p></li></ul><h4 id="目录传输">目录传输</h4><ul class="lvl-0"><li class="lvl-2"><p>本地计算机上传文件到远程服务器：<code>put -r LocalDirectory RemoteDirectory</code></p></li><li class="lvl-2"><p>远程服务器下载文件到本地计算机：<code>get -r RemoteDirectory LocalDirectory</code></p></li></ul><h3 id="SCP">SCP</h3><p>SCP 程序的语法类似 Linux 系统中 <code>cp</code>（copy），一般使用默认端口 <code>22</code>，这和 SSH 实现的默认端口一致。</p><h4 id="文件传输-2">文件传输</h4><ul class="lvl-0"><li class="lvl-2"><p>本地计算机上传文件到远程服务器：<code>scp SourceFile user@host:directory/TargetFile</code></p></li><li class="lvl-2"><p>远程服务器下载文件到本地计算机：<code>scp user@host:directory/SourceFile TargetFile</code></p></li></ul><h4 id="目录传输-2">目录传输</h4><ul class="lvl-0"><li class="lvl-2"><p>本地计算机上传文件夹到远程服务器：<code>scp -r SourceFolder user@host:directory/TargetFolder</code></p></li><li class="lvl-2"><p>远程服务器下载文件夹到本地计算机：<code>scp -r user@host:directory/SourceFolder TargetFolder</code></p></li></ul><h4 id="指定端口">指定端口</h4><p>若远程服务器使用非默认端口 22，可通过 <code>-P</code> 参数指定端口号。例如，从远程服务器下载文件到本地计算机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 5678 user@host:directory/SourceFile TargetFile</span><br></pre></td></tr></table></figure><h4 id="温馨提示">温馨提示</h4><p>SCP 也支持两台远程服务器之间的文件传输。例如，将远程服务器 A 的文件发送到远程服务器 B：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp userA@hostA:directory/SourceFile userB@hostB:directory/TargetFile</span><br></pre></td></tr></table></figure><h2 id="关于-29">关于</h2><details><summary><span class="pre-summary">&nbsp;</span><strong>点击查看作者联系方式和微信公众号</strong></summary><table><thead><tr><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/qq2.jpg"                      alt="qq"                ></th><th><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat2.jpg"                      alt="wx"                ></th></tr></thead></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/about/wechat-official-account.webp"                      alt="wechat-official-account"                ></p></details><h2 id="插画-25">插画</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://fastly.jsdelivr.net/gh/XavierJiezou/picx-image-hosting@main/post/%E6%9C%AC%E5%9C%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/%E8%97%A4%E5%8E%9F-pixiv.net-63529251.jpg"                      alt="anime" width="100%"                ></p><div align="center" style="color: #ccc">【画师】藤原 【P站ID】63529251</div><h2 id="参考-24">参考</h2><style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-TbPawOeIxAcsiWzE" src="https://player.bilibili.com/player.html?bvid=BV1wf4y127LV&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-TbPawOeIxAcsiWzE").style.height=document.getElementById("mmedia-TbPawOeIxAcsiWzE").scrollWidth*0.76+"px";    window.onresize = function(){      document.getElementById("mmedia-TbPawOeIxAcsiWzE").style.height=document.getElementById("mmedia-TbPawOeIxAcsiWzE").scrollWidth*0.76+"px";    }; </script><style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-XGkrAyMHhTjKoFTg" src="https://player.bilibili.com/player.html?bvid=BV1mQ4y1A78E&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-XGkrAyMHhTjKoFTg").style.height=document.getElementById("mmedia-XGkrAyMHhTjKoFTg").scrollWidth*0.76+"px";    window.onresize = function(){      document.getElementById("mmedia-XGkrAyMHhTjKoFTg").style.height=document.getElementById("mmedia-XGkrAyMHhTjKoFTg").scrollWidth*0.76+"px";    }; </script><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a class="link"   href="https://baike.baidu.com/item/FTP/13839" >FTP-百度百科<i class="fas fa-external-link-alt"></i></a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a class="link"   href="https://baike.baidu.com/item/SSH%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/2974699" >SFTP-百度百科<i class="fas fa-external-link-alt"></i></a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a class="link"   href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A4%8D%E5%88%B6" >SCP-维基百科<i class="fas fa-external-link-alt"></i></a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言-26&quot;&gt;引言&lt;/h2&gt;
&lt;p&gt;本地计算机与远程服务器常常需要进行文件传输，如将本地计算机中的文件&lt;strong&gt;上传&lt;/strong&gt;到远程服务器，或从远程服务器&lt;strong&gt;下载&lt;/strong&gt;文件到本地计算机。本文主要介绍包含 &lt;strong&gt;FTP</summary>
      
    
    
    
    <category term="linux" scheme="https://xavierjiezou.github.io/categories/linux/"/>
    
    
    <category term="windows" scheme="https://xavierjiezou.github.io/tags/windows/"/>
    
    <category term="linux" scheme="https://xavierjiezou.github.io/tags/linux/"/>
    
    <category term="ftp" scheme="https://xavierjiezou.github.io/tags/ftp/"/>
    
    <category term="sftp" scheme="https://xavierjiezou.github.io/tags/sftp/"/>
    
    <category term="scp" scheme="https://xavierjiezou.github.io/tags/scp/"/>
    
  </entry>
  
</feed>
